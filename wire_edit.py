import sys
import re
import os
import shutil
import time
import colorama
from colorama import Fore, Style
import subprocess
from time import sleep
import readline
import netifaces
import netifaces as ni
import io
import ipaddress


sys.stdout = io.TextIOWrapper(sys.stdout.detach(), encoding="utf-8", errors="replace")

if os.geteuid() != 0:
    print("\033[91mThis script must be run as root. Please use sudo -i.\033[0m")
    sys.exit(1)


def logo():
    logo_path = "/etc/logo2.sh"
    try:
        subprocess.run(["bash", "-c", logo_path], check=True)
    except subprocess.CalledProcessError as e:
        return e

    return None

def wireguard_edit_server():
    os.system("clear")
    logo()
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard Edit local\033[97mMenu\033[0m")
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mWireguard UDP\033[0m")
    print("2. \033[93mSit + Wireguard\033[0m")
    print("3. \033[92mGre6tap [Native] + Wireguard\033[0m")
    print("4. \033[93mWireguard + Gre6tap\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the main script\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardeditserver_mnu()
            break
        elif server_type == "2":
            wireguardsiteditserver_mnu()
            break
        elif server_type == "3":
            gre6tapwireguardeditserver_mnu()
            break
        elif server_type == "4":
            wireguardgre6tapeditserver_mnu()
            break
        elif server_type == "0":
            os.system("clear")
            os._exit(0)
            break
        else:
            print("Invalid choice.")


def wireguardeditserver_mnu():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard \033[93m Edit Menu\033[0m")
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mNo IPSEC\033[0m")
    print("2. \033[93mWith IPSEC\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardeditserver_nosec_mnu()
            break
        elif server_type == "2":
            wireguardeditserver_sec_mnu()
            break
        elif server_type == "0":
            os.system("clear")
            wireguard_edit_server()
            break
        else:
            print("Invalid choice.")


def wireguardeditserver_nosec_mnu():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard \033[93m Edit Menu\033[0m")
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mWireguard - [1]Kharej Server [5]IRAN Clients\033[0m")
    print("2. \033[93mWireguard - [1]IRAN   Server [5]Kharej Clients\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardedit_noconjuction_kharej1_5iran()
            break
        elif server_type == "2":
            wireguardedit_noconjuction_1iran_5kharej()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardeditserver_mnu()
            break
        else:
            print("Invalid choice.")


def wireguardedit_noconjuction_kharej1_5iran():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mWireguard \033[92m[1]Kharej Server\033[96m [5]IRAN Client\033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mIRAN Client [1] Config\033[0m")
    print("2. \033[92mIRAN Client [2] Config\033[0m")
    print("3. \033[92mIRAN Client [3] Config\033[0m")
    print("4. \033[93mIRAN Client [4] Config\033[0m")
    print("5. \033[92mIRAN Client [5] Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("6. \033[96mKharej Server Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardudp_iran_client1()
            break
        elif server_type == "2":
            wireguardudp_iran_client2()
            break
        elif server_type == "3":
            wireguardudp_iran_client3()
            break
        elif server_type == "4":
            wireguardudp_iran_client4()
            break
        elif server_type == "5":
            wireguardudp_iran_client5()
            break
        elif server_type == "6":
            wireguardudpedit_kharej_server()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardeditserver_mnu()
            break
        else:
            print("Invalid choice.")


def wireguardudpedit_kharej_server():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mWireguard \033[92m[1]Kharej Server\033[96m [5]IRAN Client\033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej Server Config [1] \033[0m")
    print("2. \033[92mKharej Server Config [2]\033[0m")
    print("3. \033[93mKharej Server Config [3]\033[0m")
    print("4. \033[92mKharej Server Config [4]\033[0m")
    print("5. \033[92mKharej Server Config [5]\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardedit_kharejconfig_1()
            break
        elif server_type == "2":
            wireguardedit_kharejconfig_2()
            break
        elif server_type == "3":
            wireguardedit_kharejconfig_3()
            break
        elif server_type == "4":
            wireguardedit_kharejconfig_4()
            break
        elif server_type == "5":
            wireguardedit_kharejconfig_5()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardedit_noconjuction_kharej1_5iran()
            break
        else:
            print("Invalid choice.")


def wtb_opposite_ip_wireguard(ip):
    if ":" in ip:
        ip_parts = ip.split(":")
        if ip_parts[-1] == "1":
            ip_parts[-1] = "2"
        elif ip_parts[-1] == "2":
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        return ":".join(ip_parts)
    else:
        ip_parts = ip.split(".")
        ip_parts[-1] = "1" if ip_parts[-1] == "2" else "2"
        return ".".join(ip_parts)


def load_wireguardconfig(file_path):
    try:
        with open(file_path, "r") as file:
            content = file.read()

        address_match = re.search(r"Address = ([^\s]+)", content)
        listen_port_match = re.search(r"ListenPort = (\d+)", content)
        endpoint_match = re.search(r"Endpoint = ([^\s]+):\d+", content)
        allowed_ips_match = re.search(r"AllowedIPs = ([^\s]+)", content)

        address = address_match.group(1) if address_match else "N/A"
        listen_port = listen_port_match.group(1) if listen_port_match else "N/A"
        endpoint = endpoint_match.group(1) if endpoint_match else "N/A"
        allowed_ips = allowed_ips_match.group(1) if allowed_ips_match else "N/A"

        return address, address.split("/")[0], listen_port, endpoint, allowed_ips
    except FileNotFoundError:
        print("\033[91mWireGuard configuration file not found.\033[0m")
        return None, None, None, None, None
    except Exception as e:
        print(f"\033[91mAn error occurred: {e}\033[0m")
        return None, None, None, None, None


def display_checkmark(message):
    print("\u2714 " + message)


def save_wireguardconfig1(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+:\d+)?"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )
        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )
        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )
        existing_endpoint_match = re.search(endpoint_pattern, config)
        if existing_endpoint_match:
            existing_endpoint = existing_endpoint_match.group(1)
            if ":" not in new_config["Endpoint"]:
                new_config["Endpoint"] += f":{existing_endpoint.split(':')[1]}"

        new_config_content = re.sub(
            endpoint_pattern, f'Endpoint = {new_config["Endpoint"]}', new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)
        service_name = "wireguardping_1.service"
        service_status = subprocess.run(
            ["systemctl", "is-active", service_name],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if service_status.returncode != 0:
            print(f"\033[91mService {service_name} doesn't exist or is inactive\033[0m")

        subprocess.run(
            ["wg-quick", "down", "/etc/wireguard/wireserver1.conf"], check=True
        )
        subprocess.run(
            ["wg-quick", "up", "/etc/wireguard/wireserver1.conf"], check=True
        )

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in restarting services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving the config: {e}\033[0m")


def save_wireguardconfig2(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+:\d+)?"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )
        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )
        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )
        existing_endpoint_match = re.search(endpoint_pattern, config)
        if existing_endpoint_match:
            existing_endpoint = existing_endpoint_match.group(1)
            if ":" not in new_config["Endpoint"]:
                new_config["Endpoint"] += f":{existing_endpoint.split(':')[1]}"

        new_config_content = re.sub(
            endpoint_pattern, f'Endpoint = {new_config["Endpoint"]}', new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)
        service_name = "wireguardping_2.service"
        service_status = subprocess.run(
            ["systemctl", "is-active", service_name],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if service_status.returncode != 0:
            print(f"\033[91mService {service_name} doesn't exist or is inactive\033[0m")

        subprocess.run(
            ["wg-quick", "down", "/etc/wireguard/wireserver2.conf"], check=True
        )
        subprocess.run(
            ["wg-quick", "up", "/etc/wireguard/wireserver2.conf"], check=True
        )

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in restarting services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving the config: {e}\033[0m")


def save_wireguardconfig3(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+:\d+)?"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )
        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )
        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )
        existing_endpoint_match = re.search(endpoint_pattern, config)
        if existing_endpoint_match:
            existing_endpoint = existing_endpoint_match.group(1)
            if ":" not in new_config["Endpoint"]:
                new_config["Endpoint"] += f":{existing_endpoint.split(':')[1]}"

        new_config_content = re.sub(
            endpoint_pattern, f'Endpoint = {new_config["Endpoint"]}', new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)
        service_name = "wireguardping_3.service"
        service_status = subprocess.run(
            ["systemctl", "is-active", service_name],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if service_status.returncode != 0:
            print(f"\033[91mService {service_name} doesn't exist or is inactive\033[0m")

        subprocess.run(
            ["wg-quick", "down", "/etc/wireguard/wireserver3.conf"], check=True
        )
        subprocess.run(
            ["wg-quick", "up", "/etc/wireguard/wireserver3.conf"], check=True
        )

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in restarting services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving the config: {e}\033[0m")


def save_wireguardconfig4(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+:\d+)?"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )
        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )
        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )
        existing_endpoint_match = re.search(endpoint_pattern, config)
        if existing_endpoint_match:
            existing_endpoint = existing_endpoint_match.group(1)
            if ":" not in new_config["Endpoint"]:
                new_config["Endpoint"] += f":{existing_endpoint.split(':')[1]}"

        new_config_content = re.sub(
            endpoint_pattern, f'Endpoint = {new_config["Endpoint"]}', new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)
        service_name = "wireguardping_4.service"
        service_status = subprocess.run(
            ["systemctl", "is-active", service_name],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if service_status.returncode != 0:
            print(f"\033[91mService {service_name} doesn't exist or is inactive\033[0m")

        subprocess.run(
            ["wg-quick", "down", "/etc/wireguard/wireserver4.conf"], check=True
        )
        subprocess.run(
            ["wg-quick", "up", "/etc/wireguard/wireserver4.conf"], check=True
        )

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in restarting services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving the config: {e}\033[0m")


def save_wireguardconfig5(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+:\d+)?"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )
        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )
        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )
        existing_endpoint_match = re.search(endpoint_pattern, config)
        if existing_endpoint_match:
            existing_endpoint = existing_endpoint_match.group(1)
            if ":" not in new_config["Endpoint"]:
                new_config["Endpoint"] += f":{existing_endpoint.split(':')[1]}"

        new_config_content = re.sub(
            endpoint_pattern, f'Endpoint = {new_config["Endpoint"]}', new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)
        service_name = "wireguardping_5.service"
        service_status = subprocess.run(
            ["systemctl", "is-active", service_name],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if service_status.returncode != 0:
            print(f"\033[91mService {service_name} doesn't exist or is inactive\033[0m")

        subprocess.run(
            ["wg-quick", "down", "/etc/wireguard/wireserver5.conf"], check=True
        )
        subprocess.run(
            ["wg-quick", "up", "/etc/wireguard/wireserver5.conf"], check=True
        )

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in restarting services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving the config: {e}\033[0m")


def save_wireguardconfig_client(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+:\d+)?"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )
        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )
        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )
        existing_endpoint_match = re.search(endpoint_pattern, config)
        if existing_endpoint_match:
            existing_endpoint = existing_endpoint_match.group(1)
            if ":" not in new_config["Endpoint"]:
                new_config["Endpoint"] += f":{existing_endpoint.split(':')[1]}"

        new_config_content = re.sub(
            endpoint_pattern, f'Endpoint = {new_config["Endpoint"]}', new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)
        service_name = "wireguardping.service"
        service_status = subprocess.run(
            ["systemctl", "is-active", service_name],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if service_status.returncode != 0:
            print(f"\033[91mService {service_name} doesn't exist or is inactive\033[0m")

        subprocess.run(
            ["wg-quick", "down", "/etc/wireguard/wireclient.conf"], check=True
        )
        subprocess.run(["wg-quick", "up", "/etc/wireguard/wireclient.conf"], check=True)

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in restarting services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving the config: {e}\033[0m")


def update_ufw_ruleswireguard(old_ip, new_ip, old_port=None, new_port=None):
    if old_port:
        delete_ufw_rules(old_ip, old_port)
        delete_ufw_rules(wtb_opposite_ip_wireguard(old_ip), old_port)
    add_ufw_ruleswireguard(new_ip, new_port)
    add_ufw_ruleswireguard(wtb_opposite_ip_wireguard(new_ip), new_port)


def delete_ufw_rules(ip, port):
    try:
        subprocess.run(
            ["sudo", "ufw", "delete", "allow", "from", ip, "to", "any", "port", port],
            check=False,
        )
    except subprocess.CalledProcessError as e:
        print(f"\033[91mError deleting UFW rule for {ip} on port {port}: {e}\033[0m")


def add_ufw_ruleswireguard(ip, port):
    try:
        subprocess.run(
            ["sudo", "ufw", "allow", "from", ip, "to", "any", "port", port], check=True
        )
    except subprocess.CalledProcessError as e:
        print(f"\033[91mError adding UFW rule for {ip} on port {port}: {e}\033[0m")


def display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips):
    lines = [
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[93mTitle:         Wireguard Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mAddress:           \033[97m{address_no_subnet}\033[0m",
        f"\033[92mListenPort:        \033[97m{listen_port}\033[0m",
        f"\033[92mEndpoint:          \033[97m{endpoint}\033[0m",
        f"\033[92mAllowedIPs:        \033[97m{allowed_ips}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def update_ping_script_opposite_ip_wirenosec_client(new_opposite_ip):
    script_path = "/etc/ping_wireguard.sh"
    try:
        with open(script_path, "r") as f:
            script_content = f.read()

        updated_script_content = re.sub(
            r'ip_address="[^"]+"', f'ip_address="{new_opposite_ip}"', script_content
        )

        with open(script_path, "w") as f:
            f.write(updated_script_content)

        display_checkmark(
            "\033[92mPing script updated with new opposite IP address!\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mPing script {script_path} not found.\033[0m")
    except Exception as e:
        print(f"\033[91mError updating ping script: {e}\033[0m")


def update_ping_script_opposite_ip_wirenosec1(new_opposite_ip):
    script_path = "/etc/ping_wireguard_1.sh"
    try:
        with open(script_path, "r") as f:
            script_content = f.read()

        updated_script_content = re.sub(
            r'ip_address="[^"]+"', f'ip_address="{new_opposite_ip}"', script_content
        )

        with open(script_path, "w") as f:
            f.write(updated_script_content)

        display_checkmark(
            "\033[92mPing script updated with new opposite IP address!\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mPing script {script_path} not found.\033[0m")
    except Exception as e:
        print(f"\033[91mError updating ping script: {e}\033[0m")


def update_ping_script_opposite_ip_wirenosec2(new_opposite_ip):
    script_path = "/etc/ping_wireguard_2.sh"
    try:
        with open(script_path, "r") as f:
            script_content = f.read()

        updated_script_content = re.sub(
            r'ip_address="[^"]+"', f'ip_address="{new_opposite_ip}"', script_content
        )

        with open(script_path, "w") as f:
            f.write(updated_script_content)

        display_checkmark(
            "\033[92mPing script updated with new opposite IP address!\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mPing script {script_path} not found.\033[0m")
    except Exception as e:
        print(f"\033[91mError updating ping script: {e}\033[0m")


def update_ping_script_opposite_ip_wirenosec3(new_opposite_ip):
    script_path = "/etc/ping_wireguard_3.sh"
    try:
        with open(script_path, "r") as f:
            script_content = f.read()

        updated_script_content = re.sub(
            r'ip_address="[^"]+"', f'ip_address="{new_opposite_ip}"', script_content
        )

        with open(script_path, "w") as f:
            f.write(updated_script_content)

        display_checkmark(
            "\033[92mPing script updated with new opposite IP address!\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mPing script {script_path} not found.\033[0m")
    except Exception as e:
        print(f"\033[91mError updating ping script: {e}\033[0m")


def update_ping_script_opposite_ip_wirenosec4(new_opposite_ip):
    script_path = "/etc/ping_wireguard_4.sh"
    try:
        with open(script_path, "r") as f:
            script_content = f.read()

        updated_script_content = re.sub(
            r'ip_address="[^"]+"', f'ip_address="{new_opposite_ip}"', script_content
        )

        with open(script_path, "w") as f:
            f.write(updated_script_content)

        display_checkmark(
            "\033[92mPing script updated with new opposite IP address!\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mPing script {script_path} not found.\033[0m")
    except Exception as e:
        print(f"\033[91mError updating ping script: {e}\033[0m")


def update_ping_script_opposite_ip_wirenosec5(new_opposite_ip):
    script_path = "/etc/ping_wireguard_5.sh"
    try:
        with open(script_path, "r") as f:
            script_content = f.read()

        updated_script_content = re.sub(
            r'ip_address="[^"]+"', f'ip_address="{new_opposite_ip}"', script_content
        )

        with open(script_path, "w") as f:
            f.write(updated_script_content)

        display_checkmark(
            "\033[92mPing script updated with new opposite IP address!\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mPing script {script_path} not found.\033[0m")
    except Exception as e:
        print(f"\033[91mError updating ping script: {e}\033[0m")


def listen_port(config_path):
    """Extracts the ListenPort from the WireGuard configuration file."""
    try:
        with open(config_path, "r") as file:
            content = file.read()
            match = re.search(r"^ListenPort\s*=\s*(\d+)", content, re.MULTILINE)
            if match:
                return match.group(1)
            else:
                print("\033[91mPort not found in the config file.\033[0m")
                return "51820"
    except FileNotFoundError:
        print(f"\033[91mError: Configuration file '{config_path}' not found.\033[0m")
        return "51820"


def update_endpoint_ip1(endpoint, config_path="/etc/wireguard/wireserver1.conf"):
    default_port = listen_port(config_path)

    if ":" in endpoint:
        current_ip, current_port = endpoint.split(":")
    else:
        current_ip = endpoint
        current_port = default_port

    new_endpoint_ip = input(
        f"\033[93mEnter\033[92m New Endpoint IP \033[97m(IRAN Client [1]) \033[93m({current_ip}): \033[0m"
    )

    if new_endpoint_ip:
        new_endpoint = f"{new_endpoint_ip}:{current_port}"
        return new_endpoint
    else:
        print("\033[91mNo IP entered, keeping the existing Endpoint unchanged\033[0m")
        return endpoint


def update_endpoint_ip2(endpoint, config_path="/etc/wireguard/wireserver2.conf"):
    default_port = listen_port(config_path)

    if ":" in endpoint:
        current_ip, current_port = endpoint.split(":")
    else:
        current_ip = endpoint
        current_port = default_port

    new_endpoint_ip = input(
        f"\033[93mEnter\033[92m New Endpoint IP \033[97m(IRAN Client [2]) \033[93m({current_ip}): \033[0m"
    )

    if new_endpoint_ip:
        new_endpoint = f"{new_endpoint_ip}:{current_port}"
        return new_endpoint
    else:
        print("\033[91mNo IP entered, keeping the existing Endpoint unchanged\033[0m")
        return endpoint


def update_endpoint_ip3(endpoint, config_path="/etc/wireguard/wireserver3.conf"):
    default_port = listen_port(config_path)

    if ":" in endpoint:
        current_ip, current_port = endpoint.split(":")
    else:
        current_ip = endpoint
        current_port = default_port

    new_endpoint_ip = input(
        f"\033[93mEnter\033[92m New Endpoint IP \033[97m(IRAN Client [3]) \033[93m({current_ip}): \033[0m"
    )

    if new_endpoint_ip:
        new_endpoint = f"{new_endpoint_ip}:{current_port}"
        return new_endpoint
    else:
        print("\033[91mNo IP entered, keeping the existing Endpoint unchanged\033[0m")
        return endpoint


def update_endpoint_ip4(endpoint, config_path="/etc/wireguard/wireserver4.conf"):
    default_port = listen_port(config_path)

    if ":" in endpoint:
        current_ip, current_port = endpoint.split(":")
    else:
        current_ip = endpoint
        current_port = default_port

    new_endpoint_ip = input(
        f"\033[93mEnter\033[92m New Endpoint IP \033[97m(IRAN Client [4]) \033[93m({current_ip}): \033[0m"
    )

    if new_endpoint_ip:
        new_endpoint = f"{new_endpoint_ip}:{current_port}"
        return new_endpoint
    else:
        print("\033[91mNo IP entered, keeping the existing Endpoint unchanged\033[0m")
        return endpoint


def update_endpoint_ip5(endpoint, config_path="/etc/wireguard/wireserver5.conf"):
    default_port = listen_port(config_path)

    if ":" in endpoint:
        current_ip, current_port = endpoint.split(":")
    else:
        current_ip = endpoint
        current_port = default_port

    new_endpoint_ip = input(
        f"\033[93mEnter\033[92m New Endpoint IP \033[97m(IRAN Client [5]) \033[93m({current_ip}): \033[0m"
    )

    if new_endpoint_ip:
        new_endpoint = f"{new_endpoint_ip}:{current_port}"
        return new_endpoint
    else:
        print("\033[91mNo IP entered, keeping the existing Endpoint unchanged\033[0m")
        return endpoint


def update_endpoint_ip_server(endpoint, config_path="/etc/wireguard/wireclient.conf"):
    default_port = listen_port(config_path)

    if ":" in endpoint:
        current_ip, current_port = endpoint.split(":")
    else:
        current_ip = endpoint
        current_port = default_port

    new_endpoint_ip = input(
        f"\033[93mEnter\033[92m New Endpoint IP \033[97m(Kharej Server) \033[93m({current_ip}): \033[0m"
    )

    if new_endpoint_ip:
        new_endpoint = f"{new_endpoint_ip}:{current_port}"
        return new_endpoint
    else:
        print("\033[91mNo IP entered, keeping the existing Endpoint unchanged\033[0m")
        return endpoint


def update_tunnel_port(listen_port, endpoint):
    new_port = input(
        f"\033[93mEnter \033[92mNew Tunnel Port \033[93m({listen_port}): \033[0m"
    )

    if new_port.isdigit():
        if ":" in endpoint:
            endpoint_ip, _ = endpoint.split(":")
        else:
            endpoint_ip = endpoint
        new_endpoint = f"{endpoint_ip}:{new_port}"
        return new_port, new_endpoint
    else:
        print("\033[91mInvalid Port!\033[0m")
        return listen_port, endpoint


def update_endpoint_ir_ip1(endpoint, config_path="/etc/wireguard/wireserver1.conf"):
    default_port = listen_port(config_path)

    if ":" in endpoint:
        current_ip, current_port = endpoint.split(":")
    else:
        current_ip = endpoint
        current_port = default_port

    new_endpoint_ip = input(
        f"\033[93mEnter\033[92m New Endpoint IP \033[97m(Kharej Client [1]) \033[93m({current_ip}): \033[0m"
    )

    if new_endpoint_ip:
        new_endpoint = f"{new_endpoint_ip}:{current_port}"
        return new_endpoint
    else:
        print("\033[91mNo IP entered, keeping the existing Endpoint unchanged\033[0m")
        return endpoint


def update_endpoint_ir_ip2(endpoint, config_path="/etc/wireguard/wireserver2.conf"):
    default_port = listen_port(config_path)

    if ":" in endpoint:
        current_ip, current_port = endpoint.split(":")
    else:
        current_ip = endpoint
        current_port = default_port

    new_endpoint_ip = input(
        f"\033[93mEnter\033[92m New Endpoint IP \033[97m(Kharej Client [2]) \033[93m({current_ip}): \033[0m"
    )

    if new_endpoint_ip:
        new_endpoint = f"{new_endpoint_ip}:{current_port}"
        return new_endpoint
    else:
        print("\033[91mNo IP entered, keeping the existing Endpoint unchanged\033[0m")
        return endpoint


def update_endpoint_ir_ip3(endpoint, config_path="/etc/wireguard/wireserver3.conf"):
    default_port = listen_port(config_path)

    if ":" in endpoint:
        current_ip, current_port = endpoint.split(":")
    else:
        current_ip = endpoint
        current_port = default_port

    new_endpoint_ip = input(
        f"\033[93mEnter\033[92m New Endpoint IP \033[97m(Kharej Client [3]) \033[93m({current_ip}): \033[0m"
    )

    if new_endpoint_ip:
        new_endpoint = f"{new_endpoint_ip}:{current_port}"
        return new_endpoint
    else:
        print("\033[91mNo IP entered, keeping the existing Endpoint unchanged\033[0m")
        return endpoint


def update_endpoint_ir_ip4(endpoint, config_path="/etc/wireguard/wireserver4.conf"):
    default_port = listen_port(config_path)

    if ":" in endpoint:
        current_ip, current_port = endpoint.split(":")
    else:
        current_ip = endpoint
        current_port = default_port

    new_endpoint_ip = input(
        f"\033[93mEnter\033[92m New Endpoint IP \033[97m(Kharej Client [4]) \033[93m({current_ip}): \033[0m"
    )

    if new_endpoint_ip:
        new_endpoint = f"{new_endpoint_ip}:{current_port}"
        return new_endpoint
    else:
        print("\033[91mNo IP entered, keeping the existing Endpoint unchanged\033[0m")
        return endpoint


def update_endpoint_ir_ip5(endpoint, config_path="/etc/wireguard/wireserver5.conf"):
    default_port = listen_port(config_path)

    if ":" in endpoint:
        current_ip, current_port = endpoint.split(":")
    else:
        current_ip = endpoint
        current_port = default_port

    new_endpoint_ip = input(
        f"\033[93mEnter\033[92m New Endpoint IP \033[97m(Kharej Client [5]) \033[93m({current_ip}): \033[0m"
    )

    if new_endpoint_ip:
        new_endpoint = f"{new_endpoint_ip}:{current_port}"
        return new_endpoint
    else:
        print("\033[91mNo IP entered, keeping the existing Endpoint unchanged\033[0m")
        return endpoint


def update_endpoint_ir_server(endpoint, config_path="/etc/wireguard/wireclient.conf"):
    default_port = listen_port(config_path)

    if ":" in endpoint:
        current_ip, current_port = endpoint.split(":")
    else:
        current_ip = endpoint
        current_port = default_port

    new_endpoint_ip = input(
        f"\033[93mEnter\033[92m New Endpoint IP \033[97m(IRAN Server) \033[93m({current_ip}): \033[0m"
    )

    if new_endpoint_ip:
        new_endpoint = f"{new_endpoint_ip}:{current_port}"
        return new_endpoint
    else:
        print("\033[91mNo IP entered, keeping the existing Endpoint unchanged\033[0m")
        return endpoint


def wireguardedit_kharejconfig_1():
    config_path = "/etc/wireguard/wireserver1.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard Edit local\033[97m Kharej Server Config\033[92m [1]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is Kharej Server - \033[97mConfig [1]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[96m Change Tunnel Port\033[0m")
        print(
            "3.\033[93m Change \033[92mIRAN Client [1]\033[93m IP \033[96m(Endpoint IP)\033[0m"
        )
        print("4.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec1(opposite_ip)
            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "3":
            endpoint = update_endpoint_ip1(endpoint)

        elif choice == "4":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig1(config_path, new_config)
            break

        elif choice == "0":
            wireguardedit_noconjuction_kharej1_5iran()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardedit_kharejconfig_2():
    config_path = "/etc/wireguard/wireserver2.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard Edit local\033[97m Kharej Server Config\033[92m [2]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is Kharej Server - \033[97mConfig [2]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[96m Change Tunnel Port\033[0m")
        print(
            "3.\033[93m Change \033[92mIRAN Client [2]\033[93m IP \033[96m(Endpoint IP)\033[0m"
        )
        print("4.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec2(opposite_ip)
            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "3":
            endpoint = update_endpoint_ip2(endpoint)

        elif choice == "4":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig2(config_path, new_config)
            break

        elif choice == "0":
            wireguardedit_noconjuction_kharej1_5iran()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardedit_kharejconfig_3():
    config_path = "/etc/wireguard/wireserver3.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard Edit local\033[97m Kharej Server Config\033[92m [3]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is Kharej Server - \033[97mConfig [3]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[96m Change Tunnel Port\033[0m")
        print(
            "3.\033[93m Change \033[92mIRAN Client [3]\033[93m IP \033[96m(Endpoint IP)\033[0m"
        )
        print("4.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec3(opposite_ip)
            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "3":
            endpoint = update_endpoint_ip3(endpoint)

        elif choice == "4":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig3(config_path, new_config)
            break

        elif choice == "0":
            wireguardedit_noconjuction_kharej1_5iran()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardedit_kharejconfig_4():
    config_path = "/etc/wireguard/wireserver4.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard Edit local\033[97m Kharej Server Config\033[92m [4]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is Kharej Server - \033[97mConfig [4]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[96m Change Tunnel Port\033[0m")
        print(
            "3.\033[93m Change \033[92mIRAN Client [4]\033[93m IP \033[96m(Endpoint IP)\033[0m"
        )
        print("4.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec4(opposite_ip)
            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "3":
            endpoint = update_endpoint_ip4(endpoint)

        elif choice == "4":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig4(config_path, new_config)
            break

        elif choice == "0":
            wireguardedit_noconjuction_kharej1_5iran()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardedit_kharejconfig_5():
    config_path = "/etc/wireguard/wireserver5.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard Edit local\033[97m Kharej Server Config\033[92m [5]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is Kharej Server - \033[97mConfig [5]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[96m Change Tunnel Port\033[0m")
        print(
            "3.\033[93m Change \033[92mIRAN Client [5]\033[93m IP \033[96m(Endpoint IP)\033[0m"
        )
        print("4.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec5(opposite_ip)
            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "3":
            endpoint = update_endpoint_ip5(endpoint)

        elif choice == "4":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig5(config_path, new_config)
            break

        elif choice == "0":
            wireguardedit_noconjuction_kharej1_5iran()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardudp_iran_client1():
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard Edit local\033[97m IRAN Client\033[92m [1]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is IRAN Client - \033[97m[1]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[96m Change Tunnel Port\033[0m")
        print(
            "3.\033[93m Change \033[92mKharej Server\033[93m IP \033[96m(Endpoint IP)\033[0m"
        )
        print("4.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "3":
            endpoint = update_endpoint_ip_server(endpoint)

        elif choice == "4":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_client(config_path, new_config)
            break

        elif choice == "0":
            wireguardedit_noconjuction_kharej1_5iran()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardudp_iran_client2():
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard Edit local\033[97m IRAN Client\033[92m [2]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is IRAN Client - \033[97m[2]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[96m Change Tunnel Port\033[0m")
        print(
            "3.\033[93m Change \033[92mKharej Server\033[93m IP \033[96m(Endpoint IP)\033[0m"
        )
        print("4.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "3":
            endpoint = update_endpoint_ip_server(endpoint)

        elif choice == "4":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_client(config_path, new_config)
            break

        elif choice == "0":
            wireguardedit_noconjuction_kharej1_5iran()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardudp_iran_client3():
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard Edit local\033[97m IRAN Client\033[92m [3]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is IRAN Client - \033[97m[3]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[96m Change Tunnel Port\033[0m")
        print(
            "3.\033[93m Change \033[92mKharej Server\033[93m IP \033[96m(Endpoint IP)\033[0m"
        )
        print("4.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "3":
            endpoint = update_endpoint_ip_server(endpoint)

        elif choice == "4":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_client(config_path, new_config)
            break

        elif choice == "0":
            wireguardedit_noconjuction_kharej1_5iran()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardudp_iran_client4():
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard Edit local\033[97m IRAN Client\033[92m [4]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is IRAN Client - \033[97m[4]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[96m Change Tunnel Port\033[0m")
        print(
            "3.\033[93m Change \033[92mKharej Server\033[93m IP \033[96m(Endpoint IP)\033[0m"
        )
        print("4.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "3":
            endpoint = update_endpoint_ip_server(endpoint)

        elif choice == "4":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_client(config_path, new_config)
            break

        elif choice == "0":
            wireguardedit_noconjuction_kharej1_5iran()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardudp_iran_client5():
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard Edit local\033[97m IRAN Client\033[92m [5]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is IRAN Client - \033[97m[5]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[96m Change Tunnel Port\033[0m")
        print(
            "3.\033[93m Change \033[92mKharej Server\033[93m IP \033[96m(Endpoint IP)\033[0m"
        )
        print("4.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "3":
            endpoint = update_endpoint_ip_server(endpoint)

        elif choice == "4":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_client(config_path, new_config)
            break

        elif choice == "0":
            wireguardedit_noconjuction_kharej1_5iran()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardedit_noconjuction_1iran_5kharej():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mWireguard \033[92m[1]IRAN Server\033[96m [5]Kharej Client\033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej Client [1] Config\033[0m")
    print("2. \033[92mKharej Client [2] Config\033[0m")
    print("3. \033[92mKharej Client [3] Config\033[0m")
    print("4. \033[93mKharej Client [4] Config\033[0m")
    print("5. \033[92mKharej Client [5] Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("6. \033[96mIRAN Server Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardudp_kharej_client1()
            break
        elif server_type == "2":
            wireguardudp_kharej_client2()
            break
        elif server_type == "3":
            wireguardudp_kharej_client3()
            break
        elif server_type == "4":
            wireguardudp_kharej_client4()
            break
        elif server_type == "5":
            wireguardudp_kharej_client5()
            break
        elif server_type == "6":
            wireguardudpedit_iran_server()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardeditserver_mnu()
            break
        else:
            print("Invalid choice.")


def wireguardudpedit_iran_server():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard \033[92mIRAN Server Menu\033[0m")
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mIRAN Server Config [1] \033[0m")
    print("2. \033[92mIRAN Server Config [2]\033[0m")
    print("3. \033[93mIRAN Server Config [3]\033[0m")
    print("4. \033[92mIRAN Server Config [4]\033[0m")
    print("5. \033[92mIRAN Server Config [5]\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardedit_iranconfig_1()
            break
        elif server_type == "2":
            wireguardedit_iranconfig_2()
            break
        elif server_type == "3":
            wireguardedit_iranconfig_3()
            break
        elif server_type == "4":
            wireguardedit_iranconfig_4()
            break
        elif server_type == "5":
            wireguardedit_iranconfig_5()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardedit_noconjuction_1iran_5kharej()
            break
        else:
            print("Invalid choice.")


def wireguardedit_iranconfig_1():
    config_path = "/etc/wireguard/wireserver1.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard Edit local\033[97m IRAN Server Config\033[92m [1]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is IRAN Server - \033[97mConfig [1]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[96m Change Tunnel Port\033[0m")
        print(
            "3.\033[93m Change \033[92mKharej Client [1]\033[93m IP \033[96m(Endpoint IP)\033[0m"
        )
        print("4.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec1(opposite_ip)
            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "3":
            endpoint = update_endpoint_ir_ip1(endpoint)

        elif choice == "4":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig1(config_path, new_config)
            break

        elif choice == "0":
            wireguardedit_noconjuction_1iran_5kharej()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardedit_iranconfig_2():
    config_path = "/etc/wireguard/wireserver2.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard Edit local\033[97m IRAN Server Config\033[92m [2]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is IRAN Server - \033[97mConfig [2]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[96m Change Tunnel Port\033[0m")
        print(
            "3.\033[93m Change \033[92mKharej Client [2]\033[93m IP \033[96m(Endpoint IP)\033[0m"
        )
        print("4.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec2(opposite_ip)
            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "3":
            endpoint = update_endpoint_ir_ip2(endpoint)

        elif choice == "4":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig2(config_path, new_config)
            break

        elif choice == "0":
            wireguardedit_noconjuction_1iran_5kharej()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardedit_iranconfig_3():
    config_path = "/etc/wireguard/wireserver3.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard Edit local\033[97m IRAN Server Config\033[92m [3]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is IRAN Server - \033[97mConfig [3]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[96m Change Tunnel Port\033[0m")
        print(
            "3.\033[93m Change \033[92mKharej Client [3]\033[93m IP \033[96m(Endpoint IP)\033[0m"
        )
        print("4.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec3(opposite_ip)
            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "3":
            endpoint = update_endpoint_ir_ip3(endpoint)

        elif choice == "4":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig3(config_path, new_config)
            break

        elif choice == "0":
            wireguardedit_noconjuction_1iran_5kharej()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardedit_iranconfig_4():
    config_path = "/etc/wireguard/wireserver4.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard Edit local\033[97m IRAN Server Config\033[92m [4]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is IRAN Server - \033[97mConfig [4]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[96m Change Tunnel Port\033[0m")
        print(
            "3.\033[93m Change \033[92mKharej Client [4]\033[93m IP \033[96m(Endpoint IP)\033[0m"
        )
        print("4.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec4(opposite_ip)
            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "3":
            endpoint = update_endpoint_ir_ip4(endpoint)

        elif choice == "4":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig4(config_path, new_config)
            break

        elif choice == "0":
            wireguardedit_noconjuction_1iran_5kharej()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardedit_iranconfig_5():
    config_path = "/etc/wireguard/wireserver5.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard Edit local\033[97m IRAN Server Config\033[92m [5]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is IRAN Server - \033[97mConfig [5]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[96m Change Tunnel Port\033[0m")
        print(
            "3.\033[93m Change \033[92mKharej Client [5]\033[93m IP \033[96m(Endpoint IP)\033[0m"
        )
        print("4.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec5(opposite_ip)
            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "3":
            endpoint = update_endpoint_ir_ip5(endpoint)

        elif choice == "4":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig5(config_path, new_config)
            break

        elif choice == "0":
            wireguardedit_noconjuction_1iran_5kharej()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardudp_kharej_client1():
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard Edit local\033[97m Kharej Client\033[92m [1]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is Kharej Client - \033[97m[1]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[96m Change Tunnel Port\033[0m")
        print(
            "3.\033[93m Change \033[92mIRAN Server\033[93m IP \033[96m(Endpoint IP)\033[0m"
        )
        print("4.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "3":
            endpoint = update_endpoint_ir_server(endpoint)

        elif choice == "4":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_client(config_path, new_config)
            break

        elif choice == "0":
            wireguardedit_noconjuction_1iran_5kharej()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardudp_kharej_client2():
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard Edit local\033[97m Kharej Client\033[92m [2]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is Kharej Client - \033[97m[2]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[96m Change Tunnel Port\033[0m")
        print(
            "3.\033[93m Change \033[92mIRAN Server\033[93m IP \033[96m(Endpoint IP)\033[0m"
        )
        print("4.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "3":
            endpoint = update_endpoint_ir_server(endpoint)

        elif choice == "4":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_client(config_path, new_config)
            break

        elif choice == "0":
            wireguardedit_noconjuction_1iran_5kharej()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardudp_kharej_client3():
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard Edit local\033[97m Kharej Client\033[92m [3]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is Kharej Client - \033[97m[3]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[96m Change Tunnel Port\033[0m")
        print(
            "3.\033[93m Change \033[92mIRAN Server\033[93m IP \033[96m(Endpoint IP)\033[0m"
        )
        print("4.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "3":
            endpoint = update_endpoint_ir_server(endpoint)

        elif choice == "4":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_client(config_path, new_config)
            break

        elif choice == "0":
            wireguardedit_noconjuction_1iran_5kharej()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardudp_kharej_client4():
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard Edit local\033[97m Kharej Client\033[92m [4]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is Kharej Client - \033[97m[4]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[96m Change Tunnel Port\033[0m")
        print(
            "3.\033[93m Change \033[92mIRAN Server\033[93m IP \033[96m(Endpoint IP)\033[0m"
        )
        print("4.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "3":
            endpoint = update_endpoint_ir_server(endpoint)

        elif choice == "4":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_client(config_path, new_config)
            break

        elif choice == "0":
            wireguardedit_noconjuction_1iran_5kharej()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardudp_kharej_client5():
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard Edit local\033[97m Kharej Client\033[92m [5]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is Kharej Client - \033[97m[5]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[96m Change Tunnel Port\033[0m")
        print(
            "3.\033[93m Change \033[92mIRAN Server\033[93m IP \033[96m(Endpoint IP)\033[0m"
        )
        print("4.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "3":
            endpoint = update_endpoint_ir_server(endpoint)

        elif choice == "4":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_client(config_path, new_config)
            break

        elif choice == "0":
            wireguardedit_noconjuction_1iran_5kharej()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


# wireguard ipsec


def wireguardeditserver_sec_mnu():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard + IPSEC \033[93m Edit Menu\033[0m")
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mWireguard - [1]Kharej Server [5]IRAN Clients\033[0m")
    print("2. \033[93mWireguard - [1]IRAN   Server [5]Kharej Clients\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardedit_noconjuction_kharej1_5iransec()
            break
        elif server_type == "2":
            wireguardedit_noconjuction_1iran_5kharejsec()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardeditserver_mnu()
            break
        else:
            print("Invalid choice.")


def wireguardedit_noconjuction_kharej1_5iransec():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mWireguard + IPSEC \033[92m[1]Kharej Server\033[96m [5]IRAN Client\033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mIRAN Client [1] Config\033[0m")
    print("2. \033[92mIRAN Client [2] Config\033[0m")
    print("3. \033[92mIRAN Client [3] Config\033[0m")
    print("4. \033[93mIRAN Client [4] Config\033[0m")
    print("5. \033[92mIRAN Client [5] Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("6. \033[96mKharej Server Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardudp_iran_client1sec()
            break
        elif server_type == "2":
            wireguardudp_iran_client2sec()
            break
        elif server_type == "3":
            wireguardudp_iran_client3sec()
            break
        elif server_type == "4":
            wireguardudp_iran_client4sec()
            break
        elif server_type == "5":
            wireguardudp_iran_client5sec()
            break
        elif server_type == "6":
            wireguardudpedit_kharej_serversec()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardeditserver_sec_mnu()
            break
        else:
            print("Invalid choice.")


def wireguardudpedit_kharej_serversec():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mWireguard + IPSEC \033[92m[1]Kharej Server\033[96m [5]IRAN Client\033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej Server Config [1] \033[0m")
    print("2. \033[92mKharej Server Config [2]\033[0m")
    print("3. \033[93mKharej Server Config [3]\033[0m")
    print("4. \033[92mKharej Server Config [4]\033[0m")
    print("5. \033[92mKharej Server Config [5]\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardedit_kharejconfig_1sec()
            break
        elif server_type == "2":
            wireguardedit_kharejconfig_2sec()
            break
        elif server_type == "3":
            wireguardedit_kharejconfig_3sec()
            break
        elif server_type == "4":
            wireguardedit_kharejconfig_4sec()
            break
        elif server_type == "5":
            wireguardedit_kharejconfig_5sec()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardedit_noconjuction_kharej1_5iransec()
            break
        else:
            print("Invalid choice.")


def wireguardedit_noconjuction_1iran_5kharejsec():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mWireguard + IPSEC \033[92m[1]IRAN Server\033[96m [5]Kharej Client\033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej Client [1] Config\033[0m")
    print("2. \033[92mKharej Client [2] Config\033[0m")
    print("3. \033[92mKharej Client [3] Config\033[0m")
    print("4. \033[93mKharej Client [4] Config\033[0m")
    print("5. \033[92mKharej Client [5] Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("6. \033[96mIRAN Server Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardudp_kharej_client1sec()
            break
        elif server_type == "2":
            wireguardudp_kharej_client2sec()
            break
        elif server_type == "3":
            wireguardudp_kharej_client3sec()
            break
        elif server_type == "4":
            wireguardudp_kharej_client4sec()
            break
        elif server_type == "5":
            wireguardudp_kharej_client5sec()
            break
        elif server_type == "6":
            wireguardudpedit_iran_serversec()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardeditserver_sec_mnu()
            break
        else:
            print("Invalid choice.")


def wireguardudpedit_iran_serversec():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard + IPSEC \033[92mIRAN Server Menu\033[0m")
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mIRAN Server Config [1] \033[0m")
    print("2. \033[92mIRAN Server Config [2]\033[0m")
    print("3. \033[93mIRAN Server Config [3]\033[0m")
    print("4. \033[92mIRAN Server Config [4]\033[0m")
    print("5. \033[92mIRAN Server Config [5]\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardedit_iranconfig_1sec()
            break
        elif server_type == "2":
            wireguardedit_iranconfig_2sec()
            break
        elif server_type == "3":
            wireguardedit_iranconfig_3sec()
            break
        elif server_type == "4":
            wireguardedit_iranconfig_4sec()
            break
        elif server_type == "5":
            wireguardedit_iranconfig_5sec()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardedit_noconjuction_1iran_5kharejsec()
            break
        else:
            print("Invalid choice.")


def wtb_opposite_ip_wireguardsec(ip):
    if ":" in ip:
        ip_parts = ip.split(":")
        if ip_parts[-1] == "1":
            ip_parts[-1] = "2"
        elif ip_parts[-1] == "2":
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        return ":".join(ip_parts)
    else:
        ip_parts = ip.split(".")
        ip_parts[-1] = "1" if ip_parts[-1] == "2" else "2"
        return ".".join(ip_parts)


def load_wireguardconfigsec(file_path):
    try:
        with open(file_path, "r") as file:
            content = file.read()

        address_match = re.search(r"Address = ([^\s]+)", content)
        listen_port_match = re.search(r"ListenPort = (\d+)", content)
        endpoint_match = re.search(r"Endpoint = ([^\s]+):\d+", content)
        allowed_ips_match = re.search(r"AllowedIPs = ([^\s]+)", content)

        address = address_match.group(1) if address_match else "N/A"
        listen_port = listen_port_match.group(1) if listen_port_match else "N/A"
        endpoint = endpoint_match.group(1) if endpoint_match else "N/A"
        allowed_ips = allowed_ips_match.group(1) if allowed_ips_match else "N/A"

        return address, address.split("/")[0], listen_port, endpoint, allowed_ips
    except FileNotFoundError:
        print("\033[91mWireguard configuration file not found\033[0m")
        return None, None, None, None, None
    except Exception as e:
        print(f"\033[91mAn error occurred: {e}\033[0m")
        return None, None, None, None, None


def save_wireguardconfigsec1(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+:\d+)?"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )

        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )

        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )

        existing_endpoint_match = re.search(endpoint_pattern, config)
        if existing_endpoint_match:
            existing_endpoint = existing_endpoint_match.group(1)
            if ":" not in new_config["Endpoint"]:

                new_config["Endpoint"] += f":{existing_endpoint.split(':')[1]}"

        new_config_content = re.sub(
            endpoint_pattern, f'Endpoint = {new_config["Endpoint"]}', new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)

        services_to_restart = [
            "strong-azumi1",
            "wireguardping_1.service",
        ]

        wg_quick_interface = "/etc/wireguard/wireserver1.conf"
        wg_quick_down = subprocess.run(
            ["wg-quick", "down", wg_quick_interface],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if wg_quick_down.returncode == 0:
            subprocess.run(["wg-quick", "up", wg_quick_interface], check=True)
            display_checkmark(
                f"\033[92mInterface {wg_quick_interface} brought down and up successfully!\033[0m"
            )
        else:
            print(
                f"\033[93mFailed to bring down interface {wg_quick_interface}.\033[0m"
            )

        for service_name in services_to_restart:
            service_status = subprocess.run(
                ["systemctl", "is-active", service_name],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
            )

            if service_status.returncode == 0:
                subprocess.run(["systemctl", "restart", service_name], check=True)
                display_checkmark(
                    f"\033[92mService {service_name} restarted successfully!\033[0m"
                )
            else:
                print(
                    f"\033[93mService {service_name} doesn't exist or is inactive.\033[0m"
                )

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in managing services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving the config: {e}\033[0m")


def save_wireguardconfigsec2(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+:\d+)?"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )

        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )

        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )

        existing_endpoint_match = re.search(endpoint_pattern, config)
        if existing_endpoint_match:
            existing_endpoint = existing_endpoint_match.group(1)
            if ":" not in new_config["Endpoint"]:

                new_config["Endpoint"] += f":{existing_endpoint.split(':')[1]}"

        new_config_content = re.sub(
            endpoint_pattern, f'Endpoint = {new_config["Endpoint"]}', new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)

        services_to_restart = [
            "strong-azumi1",
            "wireguardping_2.service",
        ]

        wg_quick_interface = "/etc/wireguard/wireserver2.conf"
        wg_quick_down = subprocess.run(
            ["wg-quick", "down", wg_quick_interface],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if wg_quick_down.returncode == 0:
            subprocess.run(["wg-quick", "up", wg_quick_interface], check=True)
            display_checkmark(
                f"\033[92mInterface {wg_quick_interface} brought down and up successfully!\033[0m"
            )
        else:
            print(
                f"\033[93mFailed to bring down interface {wg_quick_interface}.\033[0m"
            )

        for service_name in services_to_restart:
            service_status = subprocess.run(
                ["systemctl", "is-active", service_name],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
            )

            if service_status.returncode == 0:
                subprocess.run(["systemctl", "restart", service_name], check=True)
                display_checkmark(
                    f"\033[92mService {service_name} restarted successfully!\033[0m"
                )
            else:
                print(
                    f"\033[93mService {service_name} doesn't exist or is inactive.\033[0m"
                )

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in managing services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving the config: {e}\033[0m")


def save_wireguardconfigsec3(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+:\d+)?"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )

        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )

        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )

        existing_endpoint_match = re.search(endpoint_pattern, config)
        if existing_endpoint_match:
            existing_endpoint = existing_endpoint_match.group(1)
            if ":" not in new_config["Endpoint"]:

                new_config["Endpoint"] += f":{existing_endpoint.split(':')[1]}"

        new_config_content = re.sub(
            endpoint_pattern, f'Endpoint = {new_config["Endpoint"]}', new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)

        services_to_restart = [
            "strong-azumi1",
            "wireguardping_3.service",
        ]

        wg_quick_interface = "/etc/wireguard/wireserver3.conf"
        wg_quick_down = subprocess.run(
            ["wg-quick", "down", wg_quick_interface],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if wg_quick_down.returncode == 0:
            subprocess.run(["wg-quick", "up", wg_quick_interface], check=True)
            display_checkmark(
                f"\033[92mInterface {wg_quick_interface} brought down and up successfully!\033[0m"
            )
        else:
            print(
                f"\033[93mFailed to bring down interface {wg_quick_interface}.\033[0m"
            )

        for service_name in services_to_restart:
            service_status = subprocess.run(
                ["systemctl", "is-active", service_name],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
            )

            if service_status.returncode == 0:
                subprocess.run(["systemctl", "restart", service_name], check=True)
                display_checkmark(
                    f"\033[92mService {service_name} restarted successfully!\033[0m"
                )
            else:
                print(
                    f"\033[93mService {service_name} doesn't exist or is inactive.\033[0m"
                )

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in managing services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving the config: {e}\033[0m")


def save_wireguardconfigsec4(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+:\d+)?"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )

        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )

        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )

        existing_endpoint_match = re.search(endpoint_pattern, config)
        if existing_endpoint_match:
            existing_endpoint = existing_endpoint_match.group(1)
            if ":" not in new_config["Endpoint"]:

                new_config["Endpoint"] += f":{existing_endpoint.split(':')[1]}"

        new_config_content = re.sub(
            endpoint_pattern, f'Endpoint = {new_config["Endpoint"]}', new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)

        services_to_restart = [
            "strong-azumi1",
            "wireguardping_4.service",
        ]

        wg_quick_interface = "/etc/wireguard/wireserver4.conf"
        wg_quick_down = subprocess.run(
            ["wg-quick", "down", wg_quick_interface],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if wg_quick_down.returncode == 0:
            subprocess.run(["wg-quick", "up", wg_quick_interface], check=True)
            display_checkmark(
                f"\033[92mInterface {wg_quick_interface} brought down and up successfully!\033[0m"
            )
        else:
            print(
                f"\033[93mFailed to bring down interface {wg_quick_interface}.\033[0m"
            )

        for service_name in services_to_restart:
            service_status = subprocess.run(
                ["systemctl", "is-active", service_name],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
            )

            if service_status.returncode == 0:
                subprocess.run(["systemctl", "restart", service_name], check=True)
                display_checkmark(
                    f"\033[92mService {service_name} restarted successfully!\033[0m"
                )
            else:
                print(
                    f"\033[93mService {service_name} doesn't exist or is inactive.\033[0m"
                )

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in managing services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving the config: {e}\033[0m")


def save_wireguardconfigsec5(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+:\d+)?"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )

        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )

        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )

        existing_endpoint_match = re.search(endpoint_pattern, config)
        if existing_endpoint_match:
            existing_endpoint = existing_endpoint_match.group(1)
            if ":" not in new_config["Endpoint"]:

                new_config["Endpoint"] += f":{existing_endpoint.split(':')[1]}"

        new_config_content = re.sub(
            endpoint_pattern, f'Endpoint = {new_config["Endpoint"]}', new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)

        services_to_restart = [
            "strong-azumi1",
            "wireguardping_5.service",
        ]

        wg_quick_interface = "/etc/wireguard/wireserver5.conf"
        wg_quick_down = subprocess.run(
            ["wg-quick", "down", wg_quick_interface],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if wg_quick_down.returncode == 0:
            subprocess.run(["wg-quick", "up", wg_quick_interface], check=True)
            display_checkmark(
                f"\033[92mInterface {wg_quick_interface} brought down and up successfully!\033[0m"
            )
        else:
            print(
                f"\033[93mFailed to bring down interface {wg_quick_interface}.\033[0m"
            )

        for service_name in services_to_restart:
            service_status = subprocess.run(
                ["systemctl", "is-active", service_name],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
            )

            if service_status.returncode == 0:
                subprocess.run(["systemctl", "restart", service_name], check=True)
                display_checkmark(
                    f"\033[92mService {service_name} restarted successfully!\033[0m"
                )
            else:
                print(
                    f"\033[93mService {service_name} doesn't exist or is inactive.\033[0m"
                )

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in managing services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving the config: {e}\033[0m")


def save_wireguardconfigsec_client(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+:\d+)?"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )

        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )

        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )

        existing_endpoint_match = re.search(endpoint_pattern, config)
        if existing_endpoint_match:
            existing_endpoint = existing_endpoint_match.group(1)
            if ":" not in new_config["Endpoint"]:

                new_config["Endpoint"] += f":{existing_endpoint.split(':')[1]}"

        new_config_content = re.sub(
            endpoint_pattern, f'Endpoint = {new_config["Endpoint"]}', new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)

        services_to_restart = [
            "strong-azumi1",
            "wireguardping.service",
        ]

        wg_quick_interface = "/etc/wireguard/wireclient.conf"
        wg_quick_down = subprocess.run(
            ["wg-quick", "down", wg_quick_interface],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if wg_quick_down.returncode == 0:
            subprocess.run(["wg-quick", "up", wg_quick_interface], check=True)
            display_checkmark(
                f"\033[92mInterface {wg_quick_interface} brought down and up successfully!\033[0m"
            )
        else:
            print(
                f"\033[93mFailed to bring down interface {wg_quick_interface}.\033[0m"
            )

        for service_name in services_to_restart:
            service_status = subprocess.run(
                ["systemctl", "is-active", service_name],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
            )

            if service_status.returncode == 0:
                subprocess.run(["systemctl", "restart", service_name], check=True)
                display_checkmark(
                    f"\033[92mService {service_name} restarted successfully!\033[0m"
                )
            else:
                print(
                    f"\033[93mService {service_name} doesn't exist or is inactive.\033[0m"
                )

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in managing services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving the config: {e}\033[0m")


def update_ufw_ruleswireguardsec(old_ip, new_ip, old_port=None, new_port=None):
    if old_port:
        delete_ufw_rulessec(old_ip, old_port)
        delete_ufw_rulessec(wtb_opposite_ip_wireguardsec(old_ip), old_port)
    add_ufw_ruleswireguardsec(new_ip, new_port)
    add_ufw_ruleswireguardsec(wtb_opposite_ip_wireguardsec(new_ip), new_port)


def delete_ufw_rulessec(ip, port):
    try:
        subprocess.run(
            ["sudo", "ufw", "delete", "allow", "from", ip, "to", "any", "port", port],
            check=False,
        )
    except subprocess.CalledProcessError as e:
        print(f"\033[91mError deleting UFW rule for {ip} on port {port}: {e}\033[0m")


def add_ufw_ruleswireguardsec(ip, port):
    try:
        subprocess.run(
            ["sudo", "ufw", "allow", "from", ip, "to", "any", "port", port], check=True
        )
    except subprocess.CalledProcessError as e:
        print(f"\033[91mError adding UFW rule for {ip} on port {port}: {e}\033[0m")


def display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips):
    lines = [
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[93mTitle:         Wireguard Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mAddress:           \033[97m{address_no_subnet}\033[0m",
        f"\033[92mListenPort:        \033[97m{listen_port}\033[0m",
        f"\033[92mEndpoint:          \033[97m{endpoint}\033[0m",
        f"\033[92mAllowedIPs:        \033[97m{allowed_ips}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def update_ping_script_opposite_ip_wireguard1(new_opposite_ip):
    script_path = "/etc/ping_wireguard_1.sh"
    try:
        with open(script_path, "r") as f:
            script_content = f.read()

        updated_script_content = re.sub(
            r'ip_address="[^"]+"', f'ip_address="{new_opposite_ip}"', script_content
        )

        with open(script_path, "w") as f:
            f.write(updated_script_content)

        display_checkmark(
            "\033[92mPing script updated with new opposite IP address!\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mPing script {script_path} not found.\033[0m")
    except Exception as e:
        print(f"\033[91mError updating ping script: {e}\033[0m")


def update_ping_script_opposite_ip_wireguard_client(new_opposite_ip):
    script_path = "/etc/ping_wireguard.sh"
    try:
        with open(script_path, "r") as f:
            script_content = f.read()

        updated_script_content = re.sub(
            r'ip_address="[^"]+"', f'ip_address="{new_opposite_ip}"', script_content
        )

        with open(script_path, "w") as f:
            f.write(updated_script_content)

        display_checkmark(
            "\033[92mPing script updated with new opposite IP address!\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mPing script {script_path} not found.\033[0m")
    except Exception as e:
        print(f"\033[91mError updating ping script: {e}\033[0m")


def update_ping_script_opposite_ip_wireguard2(new_opposite_ip):
    script_path = "/etc/ping_wireguard_2.sh"
    try:
        with open(script_path, "r") as f:
            script_content = f.read()

        updated_script_content = re.sub(
            r'ip_address="[^"]+"', f'ip_address="{new_opposite_ip}"', script_content
        )

        with open(script_path, "w") as f:
            f.write(updated_script_content)

        display_checkmark(
            "\033[92mPing script updated with new opposite IP address!\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mPing script {script_path} not found.\033[0m")
    except Exception as e:
        print(f"\033[91mError updating ping script: {e}\033[0m")


def update_ping_script_opposite_ip_wireguard3(new_opposite_ip):
    script_path = "/etc/ping_wireguard_3.sh"
    try:
        with open(script_path, "r") as f:
            script_content = f.read()

        updated_script_content = re.sub(
            r'ip_address="[^"]+"', f'ip_address="{new_opposite_ip}"', script_content
        )

        with open(script_path, "w") as f:
            f.write(updated_script_content)

        display_checkmark(
            "\033[92mPing script updated with new opposite IP address!\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mPing script {script_path} not found.\033[0m")
    except Exception as e:
        print(f"\033[91mError updating ping script: {e}\033[0m")


def update_ping_script_opposite_ip_wireguard4(new_opposite_ip):
    script_path = "/etc/ping_wireguard_4.sh"
    try:
        with open(script_path, "r") as f:
            script_content = f.read()

        updated_script_content = re.sub(
            r'ip_address="[^"]+"', f'ip_address="{new_opposite_ip}"', script_content
        )

        with open(script_path, "w") as f:
            f.write(updated_script_content)

        display_checkmark(
            "\033[92mPing script updated with new opposite IP address!\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mPing script {script_path} not found.\033[0m")
    except Exception as e:
        print(f"\033[91mError updating ping script: {e}\033[0m")


def update_ping_script_opposite_ip_wireguard5(new_opposite_ip):
    script_path = "/etc/ping_wireguard_5.sh"
    try:
        with open(script_path, "r") as f:
            script_content = f.read()

        updated_script_content = re.sub(
            r'ip_address="[^"]+"', f'ip_address="{new_opposite_ip}"', script_content
        )

        with open(script_path, "w") as f:
            f.write(updated_script_content)

        display_checkmark(
            "\033[92mPing script updated with new opposite IP address!\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mPing script {script_path} not found.\033[0m")
    except Exception as e:
        print(f"\033[91mError updating ping script: {e}\033[0m")


def ipsecsecret_key_wire(name):
    try:
        with open(name, "r") as f:
            content = f.read()
        match = re.search(r'PSK "(\S+)"', content)
        if match:
            return match.group(1)
        else:
            print("\033[91mNo IPsec key found\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mOut of ordinary error: {e}\033[0m")
    return None


def update_ipsecsecret_wire(name, new_secret):
    try:
        with open(name, "r") as f:
            content = f.read()

        new_content = re.sub(r'PSK "\S+"', f'PSK "{new_secret}"', content)

        with open(name, "w") as f:
            f.write(new_content)

        display_checkmark("\033[92mIPsec secret key updated successfully!\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mOut of ordinary error: {e}\033[0m")


def update_ipsec_conf_wireguard_46(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.read()

        if ":" in new_private_ip:
            ip_parts = new_private_ip.split(":")
            ip_parts[-1] = "1" if ip_parts[-1].endswith("2") else "2"
            counterpart_ip = ":".join(ip_parts)
            subnet_suffix = "/64"
        else:
            ip_parts = new_private_ip.split(".")
            ip_parts[-1] = "1" if ip_parts[-1] == "2" else "2"
            counterpart_ip = ".".join(ip_parts)
            subnet_suffix = "/24"

        new_content = re.sub(
            r"leftsubnet=\S+", f"leftsubnet={new_private_ip}{subnet_suffix}", content
        )
        new_content = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", new_content)
        new_content = re.sub(r"right=\S+", f"right={counterpart_ip}", new_content)
        new_content = re.sub(
            r"rightsubnet=\S+",
            f"rightsubnet={counterpart_ip}{subnet_suffix}",
            new_content,
        )

        with open(name, "w") as f:
            f.write(new_content)

        display_checkmark("\033[92mIPsec configuration updated successfully!\033[0m")

    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mOut of ordinary error: {e}\033[0m")


def display_ipsecsecret_wire(secret_key):
    box_width = 50
    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")
    print(f"\033[93m Title:        \033[93m IPsec Secret Key\033[0m")
    print(f"\033[97m──────────────────────────────────────\033[0m")
    print(f"\033[93m IPsec Key:  \033[97m{secret_key}\033[0m")
    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def update_ipsec_ip_wire(new_vxlan_ip):
    def opposite_ip(ip):
        if ":" in ip:
            parts = ip.split(":")
            parts[-1] = "1" if parts[-1].endswith("2") else "2"
            return ":".join(parts)
        else:
            octets = ip.split(".")
            octets[-1] = "1" if octets[-1] == "2" else "2"
            return ".".join(octets)

    secrets_file = "/etc/ipsec.secrets"
    opposite_ip_addr = opposite_ip(new_vxlan_ip)

    try:
        with open(secrets_file, "r") as file:
            lines = file.readlines()

        new_lines = []
        for line in lines:
            if ": PSK" in line:
                parts = line.split()
                if len(parts) > 2:
                    new_line = (
                        f'{opposite_ip_addr} {new_vxlan_ip} : PSK "{parts[-1][1:-1]}"'
                    )
                    new_lines.append(new_line + "\n")
                else:
                    new_lines.append(line)
            else:
                new_lines.append(line)

        with open(secrets_file, "w") as file:
            file.writelines(new_lines)

        display_checkmark("\033[92mIPsec secrets updated successfully!\033[0m")

    except FileNotFoundError:
        print("\033[91mFile not found\033[0m")
    except Exception as e:
        print(f"\033[91mOut of ordinary error: {e}\033[0m")


def update_ipsec_conf_wireguard_server1(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.readlines()

        start_idx, end_idx = None, None
        for i, line in enumerate(content):
            if line.strip() == "conn wireguard_server1":
                start_idx = i
            elif start_idx is not None and line.strip().startswith("conn "):
                end_idx = i
                break

        if start_idx is None:
            print("\033[91m'conn wireguard_server1' section not found\033[0m")
            return

        if end_idx is None:
            end_idx = len(content)

        section = content[start_idx:end_idx]

        ip_type = (
            "ipv6"
            if isinstance(ipaddress.ip_address(new_private_ip), ipaddress.IPv6Address)
            else "ipv4"
        )

        if ip_type == "ipv6":
            subnet = "/64"
        else:
            subnet = "/32"

        ip_parts = (
            new_private_ip.split(".")
            if ip_type == "ipv4"
            else new_private_ip.split(":")
        )
        if new_private_ip.endswith(".2") or new_private_ip.endswith(":2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ".".join(ip_parts) if ip_type == "ipv4" else ":".join(ip_parts)

        new_section = []
        for line in section:
            line = re.sub(
                r"leftsubnet=\S+", f"leftsubnet={new_private_ip}{subnet}", line
            )
            line = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", line)
            line = re.sub(r"right=\S+", f"right={counterpart_ip}", line)
            line = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}{subnet}", line
            )
            new_section.append(line)

        new_content = content[:start_idx] + new_section + content[end_idx:]

        with open(name, "w") as f:
            f.writelines(new_content)

        print(f"\033[92m'conn wireguard_server1' section updated successfully\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def wireguardedit_kharejconfig_1sec():
    config_path = "/etc/wireguard/wireserver1.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfigsec(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)

        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard + IPSEC Edit local\033[97m Kharej Server Config\033[92m [1]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is Kharej Server - \033[97mConfig [1]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[94m Change Tunnel Port\033[0m")
        print("3.\033[93m Change \033[92mIRAN Client [1] \033[96m(Endpoint IP)\033[0m")
        print("4.\033[94m Change IPsec Secret Key\033[0m")
        print("5.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguardsec(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguardsec(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wireguard1(opposite_ip)
                update_ipsec_conf_wireguard_server1("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "3":
            endpoint = update_endpoint_ip1(endpoint)
        elif choice == "4":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec1(config_path, new_config)
            update_ipsec_ip_multi(address_no_subnet)
            return
        elif choice == "0":
            wireguardedit_noconjuction_kharej1_5iransec()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def update_ipsec_conf_wireguard_server2(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.readlines()

        start_idx, end_idx = None, None
        for i, line in enumerate(content):
            if line.strip() == "conn wireguard_server2":
                start_idx = i
            elif start_idx is not None and line.strip().startswith("conn "):
                end_idx = i
                break

        if start_idx is None:
            print("\033[91m'conn wireguard_server2' section not found\033[0m")
            return

        if end_idx is None:
            end_idx = len(content)

        section = content[start_idx:end_idx]

        ip_type = (
            "ipv6"
            if isinstance(ipaddress.ip_address(new_private_ip), ipaddress.IPv6Address)
            else "ipv4"
        )

        if ip_type == "ipv6":
            subnet = "/64"
        else:
            subnet = "/32"

        ip_parts = (
            new_private_ip.split(".")
            if ip_type == "ipv4"
            else new_private_ip.split(":")
        )
        if new_private_ip.endswith(".2") or new_private_ip.endswith(":2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ".".join(ip_parts) if ip_type == "ipv4" else ":".join(ip_parts)

        new_section = []
        for line in section:
            line = re.sub(
                r"leftsubnet=\S+", f"leftsubnet={new_private_ip}{subnet}", line
            )
            line = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", line)
            line = re.sub(r"right=\S+", f"right={counterpart_ip}", line)
            line = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}{subnet}", line
            )
            new_section.append(line)

        new_content = content[:start_idx] + new_section + content[end_idx:]

        with open(name, "w") as f:
            f.writelines(new_content)

        print(f"\033[92m'conn wireguard_server2' section updated successfully\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def wireguardedit_kharejconfig_2sec():
    config_path = "/etc/wireguard/wireserver2.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfigsec(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)

        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard + IPSEC Edit local\033[97m Kharej Server Config\033[92m [2]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is Kharej Server - \033[97mConfig [2]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[94m Change Tunnel Port\033[0m")
        print("3.\033[93m Change \033[92mIRAN Client [2] \033[96m(Endpoint IP)\033[0m")
        print("4.\033[94m Change IPsec Secret Key\033[0m")
        print("5.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguardsec(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguardsec(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wireguard2(opposite_ip)
                update_ipsec_conf_wireguard_server2("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "3":
            endpoint = update_endpoint_ip2(endpoint)
        elif choice == "4":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec2(config_path, new_config)
            update_ipsec_ip_multi2(new_ip)
            return
        elif choice == "0":
            wireguardedit_noconjuction_kharej1_5iransec()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def update_ipsec_conf_wireguard_server3(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.readlines()

        start_idx, end_idx = None, None
        for i, line in enumerate(content):
            if line.strip() == "conn wireguard_server3":
                start_idx = i
            elif start_idx is not None and line.strip().startswith("conn "):
                end_idx = i
                break

        if start_idx is None:
            print("\033[91m'conn wireguard_server3' section not found\033[0m")
            return

        if end_idx is None:
            end_idx = len(content)

        section = content[start_idx:end_idx]

        ip_type = (
            "ipv6"
            if isinstance(ipaddress.ip_address(new_private_ip), ipaddress.IPv6Address)
            else "ipv4"
        )

        if ip_type == "ipv6":
            subnet = "/64"
        else:
            subnet = "/32"

        ip_parts = (
            new_private_ip.split(".")
            if ip_type == "ipv4"
            else new_private_ip.split(":")
        )
        if new_private_ip.endswith(".2") or new_private_ip.endswith(":2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ".".join(ip_parts) if ip_type == "ipv4" else ":".join(ip_parts)

        new_section = []
        for line in section:
            line = re.sub(
                r"leftsubnet=\S+", f"leftsubnet={new_private_ip}{subnet}", line
            )
            line = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", line)
            line = re.sub(r"right=\S+", f"right={counterpart_ip}", line)
            line = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}{subnet}", line
            )
            new_section.append(line)

        new_content = content[:start_idx] + new_section + content[end_idx:]

        with open(name, "w") as f:
            f.writelines(new_content)

        print(f"\033[92m'conn wireguard_server3' section updated successfully\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def wireguardedit_kharejconfig_3sec():
    config_path = "/etc/wireguard/wireserver3.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfigsec(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)

        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard + IPSEC Edit local\033[97m Kharej Server Config\033[92m [3]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is Kharej Server - \033[97mConfig [3]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[94m Change Tunnel Port\033[0m")
        print("3.\033[93m Change IRAN Client [3] \033[96m(Endpoint IP)\033[0m")
        print("4.\033[94m Change IPsec Secret Key\033[0m")
        print("5.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguardsec(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguardsec(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wireguard3(opposite_ip)
                update_ipsec_conf_wireguard_server3("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "3":
            endpoint = update_endpoint_ip3(endpoint)
        elif choice == "4":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec3(config_path, new_config)
            update_ipsec_ip_multi3(new_ip)
            return
        elif choice == "0":
            wireguardedit_noconjuction_kharej1_5iransec()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def update_ipsec_conf_wireguard_server4(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.readlines()

        start_idx, end_idx = None, None
        for i, line in enumerate(content):
            if line.strip() == "conn wireguard_server4":
                start_idx = i
            elif start_idx is not None and line.strip().startswith("conn "):
                end_idx = i
                break

        if start_idx is None:
            print("\033[91m'conn wireguard_server4' section not found\033[0m")
            return

        if end_idx is None:
            end_idx = len(content)

        section = content[start_idx:end_idx]

        ip_type = (
            "ipv6"
            if isinstance(ipaddress.ip_address(new_private_ip), ipaddress.IPv6Address)
            else "ipv4"
        )

        if ip_type == "ipv6":
            subnet = "/64"
        else:
            subnet = "/32"

        ip_parts = (
            new_private_ip.split(".")
            if ip_type == "ipv4"
            else new_private_ip.split(":")
        )
        if new_private_ip.endswith(".2") or new_private_ip.endswith(":2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ".".join(ip_parts) if ip_type == "ipv4" else ":".join(ip_parts)

        new_section = []
        for line in section:
            line = re.sub(
                r"leftsubnet=\S+", f"leftsubnet={new_private_ip}{subnet}", line
            )
            line = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", line)
            line = re.sub(r"right=\S+", f"right={counterpart_ip}", line)
            line = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}{subnet}", line
            )
            new_section.append(line)

        new_content = content[:start_idx] + new_section + content[end_idx:]

        with open(name, "w") as f:
            f.writelines(new_content)

        print(f"\033[92m'conn wireguard_server4' section updated successfully\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def wireguardedit_kharejconfig_4sec():
    config_path = "/etc/wireguard/wireserver4.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfigsec(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)

        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard + IPSEC Edit local\033[97m Kharej Server Config\033[92m [4]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is Kharej Server - \033[97mConfig [4]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[94m Change Tunnel Port\033[0m")
        print("3.\033[93m Change IRAN Client [4] \033[96m(Endpoint IP)\033[0m")
        print("4.\033[94m Change IPsec Secret Key\033[0m")
        print("5.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguardsec(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguardsec(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wireguard4(opposite_ip)
                update_ipsec_conf_wireguard_server4("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "3":
            endpoint = update_endpoint_ip4(endpoint)
        elif choice == "4":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec4(config_path, new_config)
            update_ipsec_ip_multi4(new_ip)
            return
        elif choice == "0":
            wireguardedit_noconjuction_kharej1_5iransec()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def update_ipsec_conf_wireguard_server5(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.readlines()

        start_idx, end_idx = None, None
        for i, line in enumerate(content):
            if line.strip() == "conn wireguard_server5":
                start_idx = i
            elif start_idx is not None and line.strip().startswith("conn "):
                end_idx = i
                break

        if start_idx is None:
            print("\033[91m'conn wireguard_server5' section not found\033[0m")
            return

        if end_idx is None:
            end_idx = len(content)

        section = content[start_idx:end_idx]

        ip_type = (
            "ipv6"
            if isinstance(ipaddress.ip_address(new_private_ip), ipaddress.IPv6Address)
            else "ipv4"
        )

        if ip_type == "ipv6":
            subnet = "/64"
        else:
            subnet = "/32"

        ip_parts = (
            new_private_ip.split(".")
            if ip_type == "ipv4"
            else new_private_ip.split(":")
        )
        if new_private_ip.endswith(".2") or new_private_ip.endswith(":2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ".".join(ip_parts) if ip_type == "ipv4" else ":".join(ip_parts)

        new_section = []
        for line in section:
            line = re.sub(
                r"leftsubnet=\S+", f"leftsubnet={new_private_ip}{subnet}", line
            )
            line = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", line)
            line = re.sub(r"right=\S+", f"right={counterpart_ip}", line)
            line = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}{subnet}", line
            )
            new_section.append(line)

        new_content = content[:start_idx] + new_section + content[end_idx:]

        with open(name, "w") as f:
            f.writelines(new_content)

        print(f"\033[92m'conn wireguard_server5' section updated successfully\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def wireguardedit_kharejconfig_5sec():
    config_path = "/etc/wireguard/wireserver5.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfigsec(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)

        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard + IPSEC Edit local\033[97m Kharej Server Config\033[92m [5]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is Kharej Server - \033[97mConfig [5]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[94m Change Tunnel Port\033[0m")
        print("3.\033[93m Change IRAN Client [5] \033[96m(Endpoint IP)\033[0m")
        print("4.\033[94m Change IPsec Secret Key\033[0m")
        print("5.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguardsec(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguardsec(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wireguard5(opposite_ip)
                update_ipsec_conf_wireguard_server5("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "3":
            endpoint = update_endpoint_ip5(endpoint)
        elif choice == "4":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec5(config_path, new_config)
            update_ipsec_ip_multi5(new_ip)
            return
        elif choice == "0":
            wireguardedit_noconjuction_kharej1_5iransec()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def save_wireguardconfigsec_client(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+):\d+"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )
        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )
        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )

        def replace_endpoint_port(match):
            endpoint_ip = match.group(1)
            return f'Endpoint = {endpoint_ip}:{new_config["ListenPort"]}'

        new_config_content = re.sub(
            endpoint_pattern, replace_endpoint_port, new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)

        services_to_restart = [
            "strong-azumi1",
            "wireguardping.service",
        ]

        wg_quick_interface = "/etc/wireguard/wireclient.conf"
        wg_quick_down = subprocess.run(
            ["wg-quick", "down", wg_quick_interface],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if wg_quick_down.returncode == 0:
            subprocess.run(["wg-quick", "up", wg_quick_interface], check=True)
            display_checkmark(
                f"\033[92mInterface {wg_quick_interface} brought down and up successfully!\033[0m"
            )
        else:
            print(
                f"\033[93mFailed to bring down interface {wg_quick_interface}.\033[0m"
            )

        for service_name in services_to_restart:
            service_status = subprocess.run(
                ["systemctl", "is-active", service_name],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
            )

            if service_status.returncode == 0:
                subprocess.run(["systemctl", "restart", service_name], check=True)
                display_checkmark(
                    f"\033[92mService {service_name} restarted successfully!\033[0m"
                )
            else:
                print(
                    f"\033[93mService {service_name} doesn't exist or is inactive.\033[0m"
                )

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in managing services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving the config: {e}\033[0m")


def update_ipsec_conf_wireguard_46(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.read()

        ip_obj = ipaddress.ip_address(new_private_ip)
        if isinstance(ip_obj, ipaddress.IPv6Address):
            ip_parts = new_private_ip.split(":")
            subnet_suffix = "/64"
        else:
            ip_parts = new_private_ip.split(".")
            subnet_suffix = "/32"

        ip_parts[-1] = "1" if ip_parts[-1].endswith("2") else "2"
        counterpart_ip = (
            ":".join(ip_parts)
            if isinstance(ip_obj, ipaddress.IPv6Address)
            else ".".join(ip_parts)
        )

        new_content = re.sub(
            r"leftsubnet=\S+", f"leftsubnet={new_private_ip}{subnet_suffix}", content
        )
        new_content = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", new_content)
        new_content = re.sub(r"right=\S+", f"right={counterpart_ip}", new_content)
        new_content = re.sub(
            r"rightsubnet=\S+",
            f"rightsubnet={counterpart_ip}{subnet_suffix}",
            new_content,
        )

        with open(name, "w") as f:
            f.write(new_content)

        print("\033[92mIPsec configuration updated successfully!\033[0m")

    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mOut of ordinary error: {e}\033[0m")


def wireguardudp_iran_client1sec():
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfigsec(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)

        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard + IPSEC Edit local\033[97m IRAN Client\033[92m [1]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is IRAN Client - \033[97m[1]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[94m Change Tunnel Port\033[0m")
        print("3.\033[93m Change \033[92mKharej Server IP\033[96m (Endpoint IP)\033[0m")
        print("4.\033[94m Change IPsec Secret Key\033[0m")
        print("5.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguardsec(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguardsec(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wireguard_client(opposite_ip)
                update_ipsec_conf_wireguard_46("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "3":
            endpoint = update_endpoint_ip_server(endpoint)
        elif choice == "4":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec_client(config_path, new_config)
            update_ipsec_ip(new_ip)
            return
        elif choice == "0":
            wireguardedit_noconjuction_kharej1_5iran()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardudp_iran_client2sec():
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfigsec(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)

        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard + IPSEC Edit local\033[97m IRAN Client\033[92m [2]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is IRAN Client - \033[97m[2]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[94m Change Tunnel Port\033[0m")
        print("3.\033[93m Change \033[92mKharej Server IP\033[96m (Endpoint IP)\033[0m")
        print("4.\033[94m Change IPsec Secret Key\033[0m")
        print("5.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguardsec(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguardsec(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wireguard_client(opposite_ip)
                update_ipsec_conf_wireguard_46("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "3":
            endpoint = update_endpoint_ip_server(endpoint)
        elif choice == "4":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec_client(config_path, new_config)
            update_ipsec_ip(new_ip)
            return
        elif choice == "0":
            wireguardedit_noconjuction_kharej1_5iran()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardudp_iran_client3sec():
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfigsec(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)

        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard + IPSEC Edit local\033[97m IRAN Client\033[92m [3]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is IRAN Client - \033[97m[3]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[94m Change Tunnel Port\033[0m")
        print("3.\033[93m Change \033[92mKharej Server IP\033[96m (Endpoint IP)\033[0m")
        print("4.\033[94m Change IPsec Secret Key\033[0m")
        print("5.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguardsec(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguardsec(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wireguard_client(opposite_ip)
                update_ipsec_conf_wireguard_46("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "3":
            endpoint = update_endpoint_ip_server(endpoint)
        elif choice == "4":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec_client(config_path, new_config)
            update_ipsec_ip(new_ip)
            return
        elif choice == "0":
            wireguardedit_noconjuction_kharej1_5iran()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardudp_iran_client4sec():
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfigsec(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)

        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard + IPSEC Edit local\033[97m IRAN Client\033[92m [4]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is IRAN Client - \033[97m[4]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[94m Change Tunnel Port\033[0m")
        print("3.\033[93m Change \033[92mKharej Server IP\033[96m (Endpoint IP)\033[0m")
        print("4.\033[94m Change IPsec Secret Key\033[0m")
        print("5.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguardsec(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguardsec(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wireguard_client(opposite_ip)
                update_ipsec_conf_wireguard_46("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "3":
            endpoint = update_endpoint_ip_server(endpoint)
        elif choice == "4":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec_client(config_path, new_config)
            update_ipsec_ip(new_ip)
            return
        elif choice == "0":
            wireguardedit_noconjuction_kharej1_5iran()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardudp_iran_client5sec():
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfigsec(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)

        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard + IPSEC Edit local\033[97m IRAN Client\033[92m [5]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is IRAN Client - \033[97m[5]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[94m Change Tunnel Port\033[0m")
        print("3.\033[93m Change \033[92mKharej Server IP\033[96m (Endpoint IP)\033[0m")
        print("4.\033[94m Change IPsec Secret Key\033[0m")
        print("5.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguardsec(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguardsec(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wireguard_client(opposite_ip)
                update_ipsec_conf_wireguard_46("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "3":
            endpoint = update_endpoint_ip_server(endpoint)
        elif choice == "4":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec_client(config_path, new_config)
            update_ipsec_ip(new_ip)
            return
        elif choice == "0":
            wireguardedit_noconjuction_kharej1_5iran()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardedit_iranconfig_1sec():
    config_path = "/etc/wireguard/wireserver1.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfigsec(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)

        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard + IPSEC Edit local\033[97m IRAN Server Config\033[92m [1]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is IRAN Server - \033[97mConfig [1]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[94m Change Tunnel Port\033[0m")
        print(
            "3.\033[93m Change \033[92mKharej Client [1] \033[96m(Endpoint IP)\033[0m"
        )
        print("4.\033[94m Change IPsec Secret Key\033[0m")
        print("5.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguardsec(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguardsec(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wireguard1(opposite_ip)
                update_ipsec_conf_wireguard_server1("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "3":
            endpoint = update_endpoint_ir_ip1(endpoint)
        elif choice == "4":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec1(config_path, new_config)
            update_ipsec_ip_multi(address_no_subnet)
            return
        elif choice == "0":
            wireguardedit_noconjuction_1iran_5kharejsec()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardedit_iranconfig_2sec():
    config_path = "/etc/wireguard/wireserver2.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfigsec(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)

        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard + IPSEC Edit local\033[97m IRAN Server Config\033[92m [2]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is IRAN Server - \033[97mConfig [2]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[94m Change Tunnel Port\033[0m")
        print(
            "3.\033[93m Change \033[92mKharej Client [2] \033[96m(Endpoint IP)\033[0m"
        )
        print("4.\033[94m Change IPsec Secret Key\033[0m")
        print("5.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguardsec(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguardsec(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wireguard2(opposite_ip)
                update_ipsec_conf_wireguard_server2("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "3":
            endpoint = update_endpoint_ir_ip2(endpoint)
        elif choice == "4":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec2(config_path, new_config)
            update_ipsec_ip_multi2(new_ip)
            return
        elif choice == "0":
            wireguardedit_noconjuction_1iran_5kharejsec()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardedit_iranconfig_3sec():
    config_path = "/etc/wireguard/wireserver3.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfigsec(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)

        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard + IPSEC Edit local\033[97m IRAN Server Config\033[92m [3]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is IRAN Server - \033[97mConfig [3]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[94m Change Tunnel Port\033[0m")
        print(
            "3.\033[93m Change \033[92mKharej Client [3] \033[96m(Endpoint IP)\033[0m"
        )
        print("4.\033[94m Change IPsec Secret Key\033[0m")
        print("5.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguardsec(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguardsec(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wireguard3(opposite_ip)
                update_ipsec_conf_wireguard_server3("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "3":
            endpoint = update_endpoint_ir_ip3(endpoint)
        elif choice == "4":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec3(config_path, new_config)
            update_ipsec_ip_multi3(new_ip)
            return
        elif choice == "0":
            wireguardedit_noconjuction_1iran_5kharejsec()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardedit_iranconfig_4sec():
    config_path = "/etc/wireguard/wireserver4.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfigsec(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)

        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard + IPSEC Edit local\033[97m IRAN Server Config\033[92m [4]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is IRAN Server - \033[97mConfig [4]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[94m Change Tunnel Port\033[0m")
        print(
            "3.\033[93m Change \033[92mKharej Client [4] \033[96m(Endpoint IP)\033[0m"
        )
        print("4.\033[94m Change IPsec Secret Key\033[0m")
        print("5.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguardsec(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguardsec(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wireguard4(opposite_ip)
                update_ipsec_conf_wireguard_server4("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "3":
            endpoint = update_endpoint_ir_ip4(endpoint)
        elif choice == "4":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec4(config_path, new_config)
            update_ipsec_ip_multi4(new_ip)
            return
        elif choice == "0":
            wireguardedit_noconjuction_1iran_5kharejsec()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardedit_iranconfig_5sec():
    config_path = "/etc/wireguard/wireserver5.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfigsec(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)

        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard + IPSEC Edit local\033[97m IRAN Server Config\033[92m [5]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is IRAN Server - \033[97mConfig [5]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[94m Change Tunnel Port\033[0m")
        print(
            "3.\033[93m Change \033[92mKharej Client [5] \033[96m(Endpoint IP)\033[0m"
        )
        print("4.\033[94m Change IPsec Secret Key\033[0m")
        print("5.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguardsec(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguardsec(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wireguard5(opposite_ip)
                update_ipsec_conf_wireguard_server5("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "3":
            endpoint = update_endpoint_ir_ip5(endpoint)
        elif choice == "4":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec5(config_path, new_config)
            update_ipsec_ip_multi5(new_ip)
            return
        elif choice == "0":
            wireguardedit_noconjuction_1iran_5kharejsec()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardudp_kharej_client1sec():
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfigsec(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)

        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard + IPSEC Edit local\033[97m Kharej Client\033[92m [1]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is Kharej Client - \033[97m[1]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[94m Change Tunnel Port\033[0m")
        print("3.\033[93m Change \033[92mIRAN Server IP \033[96m(Endpoint IP)\033[0m")
        print("4.\033[94m Change IPsec Secret Key\033[0m")
        print("5.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguardsec(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguardsec(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wireguard_client(opposite_ip)
                update_ipsec_conf_wireguard_46("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "3":
            endpoint = update_endpoint_ir_server(endpoint)
        elif choice == "4":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec_client(config_path, new_config)
            update_ipsec_ip(new_ip)
            return
        elif choice == "0":
            wireguardedit_noconjuction_1iran_5kharej()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardudp_kharej_client2sec():
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfigsec(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)

        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard + IPSEC Edit local\033[97m Kharej Client\033[92m [2]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is Kharej Client - \033[97m[2]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[94m Change Tunnel Port\033[0m")
        print("3.\033[93m Change \033[92mIRAN Server IP \033[96m(Endpoint IP)\033[0m")
        print("4.\033[94m Change IPsec Secret Key\033[0m")
        print("5.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguardsec(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguardsec(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wireguard_client(opposite_ip)
                update_ipsec_conf_wireguard_46("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "3":
            endpoint = update_endpoint_ir_server(endpoint)
        elif choice == "4":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec_client(config_path, new_config)
            update_ipsec_ip(new_ip)
            return
        elif choice == "0":
            wireguardedit_noconjuction_1iran_5kharej()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardudp_kharej_client3sec():
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfigsec(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)

        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard + IPSEC Edit local\033[97m Kharej Client\033[92m [3]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is Kharej Client - \033[97m[3]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[94m Change Tunnel Port\033[0m")
        print("3.\033[93m Change \033[92mIRAN Server IP \033[96m(Endpoint IP)\033[0m")
        print("4.\033[94m Change IPsec Secret Key\033[0m")
        print("5.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguardsec(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguardsec(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wireguard_client(opposite_ip)
                update_ipsec_conf_wireguard_46("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "3":
            endpoint = update_endpoint_ir_server(endpoint)
        elif choice == "4":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec_client(config_path, new_config)
            update_ipsec_ip(new_ip)
            return
        elif choice == "0":
            wireguardedit_noconjuction_1iran_5kharej()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardudp_kharej_client4sec():
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfigsec(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)

        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard + IPSEC Edit local\033[97m Kharej Client\033[92m [4]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is Kharej Client - \033[97m[4]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[94m Change Tunnel Port\033[0m")
        print("3.\033[93m Change \033[92mIRAN Server IP \033[96m(Endpoint IP)\033[0m")
        print("4.\033[94m Change IPsec Secret Key\033[0m")
        print("5.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguardsec(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguardsec(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wireguard_client(opposite_ip)
                update_ipsec_conf_wireguard_46("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "3":
            endpoint = update_endpoint_ir_server(endpoint)
        elif choice == "4":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec_client(config_path, new_config)
            update_ipsec_ip(new_ip)
            return
        elif choice == "0":
            wireguardedit_noconjuction_1iran_5kharej()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardudp_kharej_client5sec():
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfigsec(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)

        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard + IPSEC Edit local\033[97m Kharej Client\033[92m [5]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is Kharej Client - \033[97m[5]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[94m Change Tunnel Port\033[0m")
        print("3.\033[93m Change \033[92mIRAN Server IP \033[96m(Endpoint IP)\033[0m")
        print("4.\033[94m Change IPsec Secret Key\033[0m")
        print("5.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguardsec(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguardsec(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wireguard_client(opposite_ip)
                update_ipsec_conf_wireguard_46("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "3":
            endpoint = update_endpoint_ir_server(endpoint)
        elif choice == "4":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec_client(config_path, new_config)
            update_ipsec_ip(new_ip)
            return
        elif choice == "0":
            wireguardedit_noconjuction_1iran_5kharej()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


# wire + gre6tap


def private_native(name):
    try:
        with open(name, "r") as f:
            content = f.read()
        match = re.search(r"ip -6 addr add (\S+)/64 dev azumi?", content)
        if match:
            return match.group(1)
        else:
            print("\033[91mno private IP found\033[0m")
    except FileNotFoundError:
        print("\033[91mPrivate file not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    return None


def get_current_native_ipsgretap61():
    private_ip_gre6 = private_gre61("/etc/gre61.sh")
    return {
        "gre6": private_ip_gre6,
    }


def get_current_native_ipsgretap62():
    private_ip_gre6 = private_gre61("/etc/gre62.sh")
    return {
        "gre6": private_ip_gre6,
    }


def get_current_native_ipsgretap63():
    private_ip_gre6 = private_gre6tap("/etc/gre63.sh")
    return {
        "gre6": private_ip_gre6,
    }


def get_current_native_ipsgretap64():
    private_ip_gre6 = private_gre6tap("/etc/gre64.sh")
    return {
        "gre6": private_ip_gre6,
    }


def get_current_native_ipsgretap65():
    private_ip_gre6 = private_gre6tap("/etc/gre65.sh")
    return {
        "gre6": private_ip_gre6,
    }


def update_pingfile_sit(name, new_ip):
    try:
        with open(name, "r") as f:
            content = f.read()

        new_content = re.sub(r'ip_address="[^"]+"', f'ip_address="{new_ip}"', content)

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipfile_gre6_wire1(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi?",
                f"ip -6 addr add {new_ip}/64 dev azumi",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi?",
                f"ip -6 route add {counterpart_ip}/64 dev azumi",
                new_content,
            )
            update_ipfile_gre6_wire1("/etc/gre61.sh", new_ip, update_type="gre6_local")
            update_ipfile_gre6_wire1(
                "/etc/gre61.sh", counterpart_ip, update_type="gre6_remote"
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "gre6_local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "gre6_remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "ipsec":
            new_content = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_ip}/64", content)
            new_content = re.sub(r"leftid=\S+", f"leftid={new_ip}", new_content)

            ip_parts = new_ip.split(":")
            if new_ip.endswith(":1"):
                ip_parts[-1] = "2"
            else:
                ip_parts[-1] = "1"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(r"right=\S+", f"right={counterpart_ip}", new_content)
            new_content = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}/64", new_content
            )

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipfile_gre6_wire2(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi?",
                f"ip -6 addr add {new_ip}/64 dev azumi",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi?",
                f"ip -6 route add {counterpart_ip}/64 dev azumi",
                new_content,
            )
            update_ipfile_gre6_wire2("/etc/gre62.sh", new_ip, update_type="gre6_local")
            update_ipfile_gre6_wire2(
                "/etc/gre62.sh", counterpart_ip, update_type="gre6_remote"
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "gre6_local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "gre6_remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "ipsec":
            new_content = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_ip}/64", content)
            new_content = re.sub(r"leftid=\S+", f"leftid={new_ip}", new_content)

            ip_parts = new_ip.split(":")
            if new_ip.endswith(":1"):
                ip_parts[-1] = "2"
            else:
                ip_parts[-1] = "1"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(r"right=\S+", f"right={counterpart_ip}", new_content)
            new_content = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}/64", new_content
            )

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipfile_gre6_wire3(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi?",
                f"ip -6 addr add {new_ip}/64 dev azumi",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi?",
                f"ip -6 route add {counterpart_ip}/64 dev azumi",
                new_content,
            )
            update_ipfile_gre6_wire3("/etc/gre63.sh", new_ip, update_type="gre6_local")
            update_ipfile_gre6_wire3(
                "/etc/gre63.sh", counterpart_ip, update_type="gre6_remote"
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "gre6_local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "gre6_remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "ipsec":
            new_content = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_ip}/64", content)
            new_content = re.sub(r"leftid=\S+", f"leftid={new_ip}", new_content)

            ip_parts = new_ip.split(":")
            if new_ip.endswith(":1"):
                ip_parts[-1] = "2"
            else:
                ip_parts[-1] = "1"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(r"right=\S+", f"right={counterpart_ip}", new_content)
            new_content = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}/64", new_content
            )

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipfile_gre6_wire4(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi?",
                f"ip -6 addr add {new_ip}/64 dev azumi",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi?",
                f"ip -6 route add {counterpart_ip}/64 dev azumi",
                new_content,
            )
            update_ipfile_gre6_wire4("/etc/gre64.sh", new_ip, update_type="gre6_local")
            update_ipfile_gre6_wire4(
                "/etc/gre64.sh", counterpart_ip, update_type="gre6_remote"
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "gre6_local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "gre6_remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "ipsec":
            new_content = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_ip}/64", content)
            new_content = re.sub(r"leftid=\S+", f"leftid={new_ip}", new_content)

            ip_parts = new_ip.split(":")
            if new_ip.endswith(":1"):
                ip_parts[-1] = "2"
            else:
                ip_parts[-1] = "1"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(r"right=\S+", f"right={counterpart_ip}", new_content)
            new_content = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}/64", new_content
            )

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipfile_gre6_wire5(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi?",
                f"ip -6 addr add {new_ip}/64 dev azumi",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi?",
                f"ip -6 route add {counterpart_ip}/64 dev azumi",
                new_content,
            )
            update_ipfile_gre6_wire5("/etc/gre65.sh", new_ip, update_type="gre6_local")
            update_ipfile_gre6_wire5(
                "/etc/gre65.sh", counterpart_ip, update_type="gre6_remote"
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "gre6_local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "gre6_remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "ipsec":
            new_content = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_ip}/64", content)
            new_content = re.sub(r"leftid=\S+", f"leftid={new_ip}", new_content)

            ip_parts = new_ip.split(":")
            if new_ip.endswith(":1"):
                ip_parts[-1] = "2"
            else:
                ip_parts[-1] = "1"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(r"right=\S+", f"right={counterpart_ip}", new_content)
            new_content = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}/64", new_content
            )

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def add_ufw_rules(ip, port=None):
    counterpart_ip = wtb_opposite_ip_sitwire(ip)
    try:
        if port:
            subprocess.run(
                ["sudo", "ufw", "allow", "from", ip, "to", "any", "port", port],
                check=True,
            )
            subprocess.run(
                [
                    "sudo",
                    "ufw",
                    "allow",
                    "from",
                    counterpart_ip,
                    "to",
                    "any",
                    "port",
                    port,
                ],
                check=True,
            )
        else:
            subprocess.run(["sudo", "ufw", "allow", "from", ip], check=True)
            subprocess.run(["sudo", "ufw", "allow", "from", counterpart_ip], check=True)
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror adding UFW rules: {e}\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def wtb_opposite_ip_sitwire(ip):
    if ":" in ip:  # IPv6
        ip_parts = ip.split(":")
        ip_parts[-1] = "1" if ip_parts[-1] == "2" else "2"
        return ":".join(ip_parts)
    else:  # IPv4
        ip_parts = ip.split(".")
        ip_parts[-1] = "1" if ip_parts[-1] == "2" else "2"
        return ".".join(ip_parts)


def save_stuff_gretap61(private_ip, local_ip, remote_ip, is_gre6):
    current_ips = get_current_native_ipsgretap61()
    current_ip = current_ips["gre6"] if is_gre6 else current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip_sitwire(private_ip)
    try:
        if is_gre6:
            update_pingfile_sit("/etc/ping_ip1.sh", counterpart_ip)
            update_ipfile_gre6_wire1("/etc/gre61.sh", private_ip, update_type="private")
            update_ipfile_gre6_wire1("/etc/gre61.sh", remote_ip, update_type="remote")
        else:
            update_pingfile_sit("/etc/ping_v61.sh", counterpart_ip)
            update_ipfile_gre6_wire1(
                "/etc/private1.sh", private_ip, update_type="private"
            )
            update_ipfile_gre6_wire1("/etc/private1.sh", local_ip, update_type="local")
            update_ipfile_gre6_wire1(
                "/etc/private1.sh", remote_ip, update_type="remote"
            )

        interface = "azumig61" if is_gre6 else "azumi1"
        subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
        subprocess.run(["ip", "link", "delete", interface], check=True)
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror bringing interface down or deleting it: {e}\033[0m")

    try:
        script = "/etc/gre61.sh" if is_gre6 else "/etc/private1.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_ip1"], check=True)

        # display_checkmark("\033[92mSystem services reloaded and restarted successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print(
            f"\033[91merror applying network changes: {e.stderr.strip() if e.stderr else str(e)}\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_gretap62(private_ip, local_ip, remote_ip, is_gre6):
    current_ips = get_current_native_ipsgretap62()
    current_ip = current_ips["gre6"] if is_gre6 else current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip_sitwire(private_ip)
    try:
        if is_gre6:
            update_pingfile_sit("/etc/ping_ip2.sh", counterpart_ip)
            update_ipfile_gre6_wire2("/etc/gre62.sh", private_ip, update_type="private")
            update_ipfile_gre6_wire2("/etc/gre62.sh", remote_ip, update_type="remote")
        else:
            update_pingfile_sit("/etc/ping_v62.sh", counterpart_ip)
            update_ipfile_gre6_wire2(
                "/etc/private2.sh", private_ip, update_type="private"
            )
            update_ipfile_gre6_wire2("/etc/private2.sh", local_ip, update_type="local")
            update_ipfile_gre6_wire2(
                "/etc/private2.sh", remote_ip, update_type="remote"
            )

        interface = "azumig62" if is_gre6 else "azumi2"
        subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
        subprocess.run(["ip", "link", "delete", interface], check=True)
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror bringing interface down or deleting it: {e}\033[0m")

    try:
        script = "/etc/gre62.sh" if is_gre6 else "/etc/private2.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_ip2"], check=True)

        # display_checkmark("\033[92mSystem services reloaded and restarted successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print(
            f"\033[91merror applying network changes: {e.stderr.strip() if e.stderr else str(e)}\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_gretap63(private_ip, local_ip, remote_ip, is_gre6):
    current_ips = get_current_native_ipsgretap63()
    current_ip = current_ips["gre6"] if is_gre6 else current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip_sitwire(private_ip)
    try:
        if is_gre6:
            update_pingfile_sit("/etc/ping_ip3.sh", counterpart_ip)
            update_ipfile_gre6_wire3("/etc/gre63.sh", private_ip, update_type="private")
            update_ipfile_gre6_wire3("/etc/gre63.sh", remote_ip, update_type="remote")
        else:
            update_pingfile_sit("/etc/ping_v63.sh", counterpart_ip)
            update_ipfile_gre6_wire3(
                "/etc/private3.sh", private_ip, update_type="private"
            )
            update_ipfile_gre6_wire3("/etc/private3.sh", local_ip, update_type="local")
            update_ipfile_gre6_wire3(
                "/etc/private3.sh", remote_ip, update_type="remote"
            )

        interface = "azumig63" if is_gre6 else "azumi3"
        subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
        subprocess.run(["ip", "link", "delete", interface], check=True)
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror bringing interface down or deleting it: {e}\033[0m")

    try:
        script = "/etc/gre63.sh" if is_gre6 else "/etc/private3.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_ip3"], check=True)

        # display_checkmark("\033[92mSystem services reloaded and restarted successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print(
            f"\033[91merror applying network changes: {e.stderr.strip() if e.stderr else str(e)}\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_gretap64(private_ip, local_ip, remote_ip, is_gre6):
    current_ips = get_current_native_ipsgretap64()
    current_ip = current_ips["gre6"] if is_gre6 else current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip_sitwire(private_ip)
    try:
        if is_gre6:
            update_pingfile_sit("/etc/ping_ip4.sh", counterpart_ip)
            update_ipfile_gre6_wire4("/etc/gre64.sh", private_ip, update_type="private")
            update_ipfile_gre6_wire4("/etc/gre64.sh", remote_ip, update_type="remote")
        else:
            update_pingfile_sit("/etc/ping_v64.sh", counterpart_ip)
            update_ipfile_gre6_wire4(
                "/etc/private4.sh", private_ip, update_type="private"
            )
            update_ipfile_gre6_wire4("/etc/private4.sh", local_ip, update_type="local")
            update_ipfile_gre6_wire4(
                "/etc/private4.sh", remote_ip, update_type="remote"
            )

        interface = "azumig64" if is_gre6 else "azumi4"
        subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
        subprocess.run(["ip", "link", "delete", interface], check=True)
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror bringing interface down or deleting it: {e}\033[0m")

    try:
        script = "/etc/gre64.sh" if is_gre6 else "/etc/private4.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_ip4"], check=True)

        # display_checkmark("\033[92mSystem services reloaded and restarted successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print(
            f"\033[91merror applying network changes: {e.stderr.strip() if e.stderr else str(e)}\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_gretap65(private_ip, local_ip, remote_ip, is_gre6):
    current_ips = get_current_native_ipsgretap65()
    current_ip = current_ips["gre6"] if is_gre6 else current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip_sitwire(private_ip)
    try:
        if is_gre6:
            update_pingfile_sit("/etc/ping_ip5.sh", counterpart_ip)
            update_ipfile_gre6_wire5("/etc/gre65.sh", private_ip, update_type="private")
            update_ipfile_gre6_wire5("/etc/gre65.sh", remote_ip, update_type="remote")
        else:
            update_pingfile_sit("/etc/ping_v65.sh", counterpart_ip)
            update_ipfile_gre6_wire5(
                "/etc/private5.sh", private_ip, update_type="private"
            )
            update_ipfile_gre6_wire5("/etc/private5.sh", local_ip, update_type="local")
            update_ipfile_gre6_wire5(
                "/etc/private5.sh", remote_ip, update_type="remote"
            )

        interface = "azumig65" if is_gre6 else "azumi5"
        subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
        subprocess.run(["ip", "link", "delete", interface], check=True)
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror bringing interface down or deleting it: {e}\033[0m")

    try:
        script = "/etc/gre65.sh" if is_gre6 else "/etc/private5.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_ip5"], check=True)

        # display_checkmark("\033[92mSystem services reloaded and restarted successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print(
            f"\033[91merror applying network changes: {e.stderr.strip() if e.stderr else str(e)}\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def private_gre6tap(name):
    try:
        with open(name, "r") as f:
            content = f.read()
        match = re.search(r"ip -6 addr add (\S+)/64 dev azumig6?", content)
        if match:
            return match.group(1)
        else:
            print("\033[91mNo private IP found\033[0m")
    except FileNotFoundError:
        print("\033[91mPrivate file not found\033[0m")
    except Exception as e:
        print(f"\033[91mOut of ordinary error: {e}\033[0m")
    return None


def display_stuff_gre6tapn(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         GRE6TAP Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mLocal IP:        \033[97m{local_ip}\033[0m",
        f"\033[92mKharej IPV6:     \033[97m{remote_ip}\033[0m",
        f"\033[93mPrivate IP:      \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def local_ip(name):
    try:
        with open(name, "r") as f:
            content = f.read()
        match = re.search(r"local (\S+)", content)
        if match:
            return match.group(1)
        else:
            print(f"\033[91mno local IP found\033[0m")
    except FileNotFoundError:
        print(f"file {name} doesn't exist")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    return None


def remote_ip(name):
    try:
        with open(name, "r") as f:
            content = f.read()
        match = re.search(r"remote (\S+)", content)
        if match:
            return match.group(1)
        else:
            print("\033[91mno remote IP found \033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    return None


def wireguardgre6tapeditserver_mnu():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mEdit local\033[93m Wireguard + GRE6TAP Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mNo IPSEC\033[0m")
    print("2. \033[93mWith IPSEC\033[0m")
    print("3. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        choice = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if choice == "1":
            wireguardgre6tap_nosec_edit_local()
            break
        elif choice == "2":
            wireguardgre6tap_sec_edit_local()
            break
        elif choice == "3":
            clear()
            wireguard_edit_server()
            break
        else:
            print("Invalid choice.")


def wireguardgre6tap_nosec_edit_local():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard + GRE6TAP\033[93m Edit Menu\033[0m")
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mWireguard + GRE6TAP - [1]Kharej Server [5]IRAN Clients\033[0m")
    print("2. \033[93mWireguard + GRE6TAP - [1]IRAN   Server [5]Kharej Clients\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguard_gre6tap_noconjuction_kharej1_5iran()
            break
        elif server_type == "2":
            wireguard_gre6tap_noconjuction_1iran_5kharej()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardgre6tapeditserver_mnu()
            break
        else:
            print("Invalid choice.")


def wireguard_gre6tap_noconjuction_1iran_5kharej():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mWireguard + GRE6TAP \033[92m[1]IRAN Server\033[96m [5]Kharej Client\033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej Client [1] Config\033[0m")
    print("2. \033[92mKharej Client [2] Config\033[0m")
    print("3. \033[92mKharej Client [3] Config\033[0m")
    print("4. \033[93mKharej Client [4] Config\033[0m")
    print("5. \033[92mKharej Client [5] Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("6. \033[96mIRAN Server Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardafter_gre6tapn_kharej_client1()
            break
        elif server_type == "2":
            wireguardafter_gre6tapn_kharej_client2()
            break
        elif server_type == "3":
            wireguardafter_gre6tapn_kharej_client3()
            break
        elif server_type == "4":
            wireguardafter_gre6tapn_kharej_client4()
            break
        elif server_type == "5":
            wireguardafter_gre6tapn_kharej_client5()
            break
        elif server_type == "6":
            wireguardafter_gre6tapn_iran_server()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardgre6tap_nosec_edit_local()
            break
        else:
            print("Invalid choice.")


def wireguardafter_gre6tapn_iran_server():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mWireguard + GRE6TAP \033[92m[1]IRAN Server\033[96m [5]Kharej Client\033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mIRAN Server Config [1] \033[0m")
    print("2. \033[92mIRAN Server Config [2]\033[0m")
    print("3. \033[93mIRAN Server Config [3]\033[0m")
    print("4. \033[92mIRAN Server Config [4]\033[0m")
    print("5. \033[92mIRAN Server Config [5]\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardafter_gre6tapn_iranconfig_1()
            break
        elif server_type == "2":
            wireguardafter_gre6tapn_iranconfig_2()
            break
        elif server_type == "3":
            wireguardafter_gre6tapn_iranconfig_3()
            break
        elif server_type == "4":
            wireguardafter_gre6tapn_iranconfig_4()
            break
        elif server_type == "5":
            wireguardafter_gre6tapn_iranconfig_5()
            break
        elif server_type == "0":
            os.system("clear")
            wireguard_gre6tap_noconjuction_1iran_5kharej()
            break
        else:
            print("Invalid choice.")


def wireguard_gre6tap_noconjuction_kharej1_5iran():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mWireguard + GRE6TAP \033[92m[1]Kharej Server\033[96m [5]IRAN Client\033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mIRAN Client [1] Config\033[0m")
    print("2. \033[92mIRAN Client [2] Config\033[0m")
    print("3. \033[92mIRAN Client [3] Config\033[0m")
    print("4. \033[93mIRAN Client [4] Config\033[0m")
    print("5. \033[92mIRAN Client [5] Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("6. \033[96mKharej Server Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardafter_gre6tapn_iran_client1()
            break
        elif server_type == "2":
            wireguardafter_gre6tapn_iran_client2()
            break
        elif server_type == "3":
            wireguardafter_gre6tapn_iran_client3()
            break
        elif server_type == "4":
            wireguardafter_gre6tapn_iran_client4()
            break
        elif server_type == "5":
            wireguardafter_gre6tapn_iran_client5()
            break
        elif server_type == "6":
            wireguardafter_gre6tapn_kharej_server()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardgre6tap_nosec_edit_local()
            break
        else:
            print("Invalid choice.")


def wireguardafter_gre6tapn_kharej_server():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mWireguard + GRE6TAP IPSEC \033[92m[1]Kharej Server\033[96m [5]IRAN Client\033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej Server Config [1] \033[0m")
    print("2. \033[92mKharej Server Config [2]\033[0m")
    print("3. \033[93mKharej Server Config [3]\033[0m")
    print("4. \033[92mKharej Server Config [4]\033[0m")
    print("5. \033[92mKharej Server Config [5]\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardafter_gre6tapn_kharejconfig_1()
            break
        elif server_type == "2":
            wireguardafter_gre6tapn_kharejconfig_2()
            break
        elif server_type == "3":
            wireguardafter_gre6tapn_kharejconfig_3()
            break
        elif server_type == "4":
            wireguardafter_gre6tapn_kharejconfig_4()
            break
        elif server_type == "5":
            wireguardafter_gre6tapn_kharejconfig_5()
            break
        elif server_type == "0":
            os.system("clear")
            wireguard_gre6tap_noconjuction_kharej1_5iran()
            break
        else:
            print("Invalid choice.")


# gre6tap ipsec menu


def wireguardgre6tap_sec_edit_local():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard + GRE6TAP + IPSEC\033[93m Edit Menu\033[0m")
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mWireguard + GRE6TAP - [1]Kharej Server [5]IRAN Clients\033[0m")
    print("2. \033[93mWireguard + GRE6TAP - [1]IRAN   Server [5]Kharej Clients\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguard_gre6tapsec_noconjuction_kharej1_5iran()
            break
        elif server_type == "2":
            wireguard_gre6tapsec_noconjuction_1iran_5kharej()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardgre6tapeditserver_mnu()
            break
        else:
            print("Invalid choice.")


def wireguard_gre6tapsec_noconjuction_1iran_5kharej():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mWireguard + GRE6TAP IPSEC \033[92m[1]IRAN Server\033[96m [5]Kharej Client\033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej Client [1] Config\033[0m")
    print("2. \033[92mKharej Client [2] Config\033[0m")
    print("3. \033[92mKharej Client [3] Config\033[0m")
    print("4. \033[93mKharej Client [4] Config\033[0m")
    print("5. \033[92mKharej Client [5] Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("6. \033[96mIRAN Server Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardafter_gre6tapnsec_kharej_client1()
            break
        elif server_type == "2":
            wireguardafter_gre6tapnsec_kharej_client2()
            break
        elif server_type == "3":
            wireguardafter_gre6tapnsec_kharej_client3()
            break
        elif server_type == "4":
            wireguardafter_gre6tapnsec_kharej_client4()
            break
        elif server_type == "5":
            wireguardafter_gre6tapnsec_kharej_client5()
            break
        elif server_type == "6":
            wireguardafter_gre6tapnsec_iran_server()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardgre6tap_sec_edit_local()
            break
        else:
            print("Invalid choice.")


def wireguardafter_gre6tapnsec_iran_server():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mWireguard + GRE6TAP IPSEC \033[92m[1]IRAN Server\033[96m [5]Kharej Client\033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mIRAN Server Config [1] \033[0m")
    print("2. \033[92mIRAN Server Config [2]\033[0m")
    print("3. \033[93mIRAN Server Config [3]\033[0m")
    print("4. \033[92mIRAN Server Config [4]\033[0m")
    print("5. \033[92mIRAN Server Config [5]\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardafter_gre6tapnsec_iranconfig_1()
            break
        elif server_type == "2":
            wireguardafter_gre6tapnsec_iranconfig_2()
            break
        elif server_type == "3":
            wireguardafter_gre6tapnsec_iranconfig_3()
            break
        elif server_type == "4":
            wireguardafter_gre6tapnsec_iranconfig_4()
            break
        elif server_type == "5":
            wireguardafter_gre6tapnsec_iranconfig_5()
            break
        elif server_type == "0":
            os.system("clear")
            wireguard_gre6tapsec_noconjuction_1iran_5kharej()
            break
        else:
            print("Invalid choice.")


def wireguard_gre6tapsec_noconjuction_kharej1_5iran():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mWireguard + GRE6TAP IPSEC \033[92m[1]Kharej Server\033[96m [5]IRAN Client\033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mIRAN Client [1] Config\033[0m")
    print("2. \033[92mIRAN Client [2] Config\033[0m")
    print("3. \033[92mIRAN Client [3] Config\033[0m")
    print("4. \033[93mIRAN Client [4] Config\033[0m")
    print("5. \033[92mIRAN Client [5] Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("6. \033[96mKharej Server Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardafter_gre6tapnsec_iran_client1()
            break
        elif server_type == "2":
            wireguardafter_gre6tapnsec_iran_client2()
            break
        elif server_type == "3":
            wireguardafter_gre6tapnsec_iran_client3()
            break
        elif server_type == "4":
            wireguardafter_gre6tapnsec_iran_client4()
            break
        elif server_type == "5":
            wireguardafter_gre6tapnsec_iran_client5()
            break
        elif server_type == "6":
            wireguardafter_gre6tapnsec_kharej_server()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardgre6tap_sec_edit_local()
            break
        else:
            print("Invalid choice.")


def wireguardafter_gre6tapnsec_kharej_server():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mWireguard + GRE6TAP IPSEC \033[92m[1]Kharej Server\033[96m [5]IRAN Client\033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej Server Config [1] \033[0m")
    print("2. \033[92mKharej Server Config [2]\033[0m")
    print("3. \033[93mKharej Server Config [3]\033[0m")
    print("4. \033[92mKharej Server Config [4]\033[0m")
    print("5. \033[92mKharej Server Config [5]\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardafter_gre6tapnsec_kharejconfig_1()
            break
        elif server_type == "2":
            wireguardafter_gre6tapnsec_kharejconfig_2()
            break
        elif server_type == "3":
            wireguardafter_gre6tapnsec_kharejconfig_3()
            break
        elif server_type == "4":
            wireguardafter_gre6tapnsec_kharejconfig_4()
            break
        elif server_type == "5":
            wireguardafter_gre6tapnsec_kharejconfig_5()
            break
        elif server_type == "0":
            os.system("clear")
            wireguard_gre6tapsec_noconjuction_kharej1_5iran()
            break
        else:
            print("Invalid choice.")


def wireguardafter_gre6tapn_kharejconfig_1():
    wireguard_config_path = "/etc/wireguard/wireserver1.conf"
    gre6_path = "/etc/gre61.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP\033[97m Kharej Server Config\033[92m [1]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is Kharej Server \033[97mConfig [1]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print(
            "4.\033[93m Change \033[92mIRAN Client [1] IP \033[96m(Endpoint IP)\033[0m"
        )
        print("5. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec1(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "4":
            endpoint = update_endpoint_ip1(endpoint)

        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig1(wireguard_config_path, new_config)

            save_stuff_gretap61(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break

        elif choice == "0":
            wireguard_gre6tap_noconjuction_kharej1_5iran()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapn_kharejconfig_2():
    wireguard_config_path = "/etc/wireguard/wireserver2.conf"
    gre6_path = "/etc/gre62.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP\033[97m Kharej Server Config\033[92m [2]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is Kharej Server \033[97mConfig [2]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print(
            "4.\033[93m Change \033[92mIRAN Client [2] IP \033[96m(Endpoint IP)\033[0m"
        )
        print("5. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec2(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "4":
            endpoint = update_endpoint_ip2(endpoint)

        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig2(wireguard_config_path, new_config)

            save_stuff_gretap62(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break

        elif choice == "0":
            wireguard_gre6tap_noconjuction_kharej1_5iran()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapn_kharejconfig_3():
    wireguard_config_path = "/etc/wireguard/wireserver3.conf"
    gre6_path = "/etc/gre63.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP\033[97m Kharej Server Config\033[92m [3]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is Kharej Server \033[97mConfig [3]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print(
            "4.\033[93m Change \033[92mIRAN Client [3] IP \033[96m(Endpoint IP)\033[0m"
        )
        print("5. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec3(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "4":
            endpoint = update_endpoint_ip3(endpoint)

        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig3(wireguard_config_path, new_config)

            save_stuff_gretap63(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break

        elif choice == "0":
            wireguard_gre6tap_noconjuction_kharej1_5iran()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapn_kharejconfig_4():
    wireguard_config_path = "/etc/wireguard/wireserver4.conf"
    gre6_path = "/etc/gre64.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP\033[97m Kharej Server Config\033[92m [4]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is Kharej Server \033[97mConfig [4]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print(
            "4.\033[93m Change \033[92mIRAN Client [4] IP \033[96m(Endpoint IP)\033[0m"
        )
        print("5. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec4(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "4":
            endpoint = update_endpoint_ip4(endpoint)

        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig4(wireguard_config_path, new_config)

            save_stuff_gretap64(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break

        elif choice == "0":
            wireguard_gre6tap_noconjuction_kharej1_5iran()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapn_kharejconfig_5():
    wireguard_config_path = "/etc/wireguard/wireserver5.conf"
    gre6_path = "/etc/gre65.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP\033[97m Kharej Server Config\033[92m [5]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is Kharej Server \033[97mConfig [5]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print(
            "4.\033[93m Change \033[92mIRAN Client [5] IP \033[96m(Endpoint IP)\033[0m"
        )
        print("5. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec5(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "4":
            endpoint = update_endpoint_ip5(endpoint)

        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig5(wireguard_config_path, new_config)

            save_stuff_gretap65(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break

        elif choice == "0":
            wireguard_gre6tap_noconjuction_kharej1_5iran()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapn_iran_client1():
    wireguard_config_path = "/etc/wireguard/wireclient.conf"
    gre6_path = "/etc/gre61.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP\033[97m IRAN Client\033[92m [1]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is IRAN Client \033[97m[1]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print("4.\033[93m Change \033[92mKharej Server IP \033[96m(Endpoint IP)\033[0m")
        print("5. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "4":
            endpoint = update_endpoint_ip_server(endpoint)

        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_client(wireguard_config_path, new_config)

            save_stuff_gretap61(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break

        elif choice == "0":
            wireguard_gre6tap_noconjuction_kharej1_5iran()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapn_iran_client2():
    wireguard_config_path = "/etc/wireguard/wireclient.conf"
    gre6_path = "/etc/gre62.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP\033[97m IRAN Client\033[92m [2]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is IRAN Client \033[97m[2]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print("4.\033[93m Change \033[92mKharej Server IP \033[96m(Endpoint IP)\033[0m")
        print("5. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "4":
            endpoint = update_endpoint_ip_server(endpoint)

        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_client(wireguard_config_path, new_config)

            save_stuff_gretap62(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break

        elif choice == "0":
            wireguard_gre6tap_noconjuction_kharej1_5iran()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapn_iran_client3():
    wireguard_config_path = "/etc/wireguard/wireclient.conf"
    gre6_path = "/etc/gre63.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP\033[97m IRAN Client\033[92m [3]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is IRAN Client \033[97m[3]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print("4.\033[93m Change \033[92mKharej Server IP \033[96m(Endpoint IP)\033[0m")
        print("5. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "4":
            endpoint = update_endpoint_ip_server(endpoint)

        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_client(wireguard_config_path, new_config)

            save_stuff_gretap63(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break

        elif choice == "0":
            wireguard_gre6tap_noconjuction_kharej1_5iran()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapn_iran_client4():
    wireguard_config_path = "/etc/wireguard/wireclient.conf"
    gre6_path = "/etc/gre64.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP\033[97m IRAN Client\033[92m [4]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is IRAN Client \033[97m[4]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print("4.\033[93m Change \033[92mKharej Server IP \033[96m(Endpoint IP)\033[0m")
        print("5. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "4":
            endpoint = update_endpoint_ip_server(endpoint)

        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_client(wireguard_config_path, new_config)

            save_stuff_gretap64(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break

        elif choice == "0":
            wireguard_gre6tap_noconjuction_kharej1_5iran()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapn_iran_client5():
    wireguard_config_path = "/etc/wireguard/wireclient.conf"
    gre6_path = "/etc/gre65.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP\033[97m IRAN Client\033[92m [5]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is IRAN Client \033[97m[5]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print("4.\033[93m Change \033[92mKharej Server IP \033[96m(Endpoint IP)\033[0m")
        print("5. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "4":
            endpoint = update_endpoint_ip_server(endpoint)

        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_client(wireguard_config_path, new_config)

            save_stuff_gretap65(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break

        elif choice == "0":
            wireguard_gre6tap_noconjuction_kharej1_5iran()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


# 1 iran 5 kharej client


def wireguardafter_gre6tapn_iranconfig_1():
    wireguard_config_path = "/etc/wireguard/wireserver1.conf"
    gre6_path = "/etc/gre61.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP\033[97m IRAN Server Config\033[92m [1]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is IRAN Server \033[97mConfig [1]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print(
            "4.\033[93m Change \033[92mKharej Client [1] IP \033[96m(Endpoint IP)\033[0m"
        )
        print("5. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec1(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "4":
            endpoint = update_endpoint_ir_ip1(endpoint)

        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig1(wireguard_config_path, new_config)

            save_stuff_gretap61(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break

        elif choice == "0":
            wireguard_gre6tap_noconjuction_kharej1_5iran()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapn_iranconfig_2():
    wireguard_config_path = "/etc/wireguard/wireserver2.conf"
    gre6_path = "/etc/gre62.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP\033[97m IRAN Server Config\033[92m [2]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is IRAN Server \033[97mConfig [2]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print(
            "4.\033[93m Change \033[92mKharej Client [2] IP \033[96m(Endpoint IP)\033[0m"
        )
        print("5. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec2(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "4":
            endpoint = update_endpoint_ir_ip2(endpoint)

        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig2(wireguard_config_path, new_config)

            save_stuff_gretap62(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break

        elif choice == "0":
            wireguard_gre6tap_noconjuction_kharej1_5iran()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapn_iranconfig_3():
    wireguard_config_path = "/etc/wireguard/wireserver3.conf"
    gre6_path = "/etc/gre63.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP\033[97m IRAN Server Config\033[92m [3]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is IRAN Server \033[97mConfig [3]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print(
            "4.\033[93m Change \033[92mKharej Client [3] IP \033[96m(Endpoint IP)\033[0m"
        )
        print("5. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec3(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "4":
            endpoint = update_endpoint_ir_ip3(endpoint)

        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig3(wireguard_config_path, new_config)

            save_stuff_gretap63(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break

        elif choice == "0":
            wireguard_gre6tap_noconjuction_kharej1_5iran()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapn_iranconfig_4():
    wireguard_config_path = "/etc/wireguard/wireserver4.conf"
    gre6_path = "/etc/gre64.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP\033[97m IRAN Server Config\033[92m [4]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is IRAN Server \033[97mConfig [4]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print(
            "4.\033[93m Change \033[92mKharej Client [4] IP \033[96m(Endpoint IP)\033[0m"
        )
        print("5. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec4(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "4":
            endpoint = update_endpoint_ir_ip4(endpoint)

        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig4(wireguard_config_path, new_config)

            save_stuff_gretap64(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break

        elif choice == "0":
            wireguard_gre6tap_noconjuction_kharej1_5iran()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapn_iranconfig_5():
    wireguard_config_path = "/etc/wireguard/wireserver5.conf"
    gre6_path = "/etc/gre65.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP\033[97m IRAN Server Config\033[92m [5]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is IRAN Server \033[97mConfig [5]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print(
            "4.\033[93m Change \033[92mKharej Client [5] IP \033[96m(Endpoint IP)\033[0m"
        )
        print("5. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec5(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "4":
            endpoint = update_endpoint_ir_ip5(endpoint)

        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig5(wireguard_config_path, new_config)

            save_stuff_gretap65(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break

        elif choice == "0":
            wireguard_gre6tap_noconjuction_kharej1_5iran()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapn_kharej_client1():
    wireguard_config_path = "/etc/wireguard/wireclient.conf"
    gre6_path = "/etc/gre61.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP\033[97m Kharej Client\033[92m [1]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is Kharej Client \033[97m[1]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print("4.\033[93m Change \033[92mIRAN Server IP \033[96m(Endpoint IP)\033[0m")
        print("5. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "4":
            endpoint = update_endpoint_ir_server(endpoint)

        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_client(wireguard_config_path, new_config)

            save_stuff_gretap61(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break

        elif choice == "0":
            wireguard_gre6tap_noconjuction_kharej1_5iran()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapn_kharej_client2():
    wireguard_config_path = "/etc/wireguard/wireclient.conf"
    gre6_path = "/etc/gre62.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP\033[97m Kharej Client\033[92m [2]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is Kharej Client \033[97m[2]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print("4.\033[93m Change \033[92mIRAN Server IP \033[96m(Endpoint IP)\033[0m")
        print("5. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "4":
            endpoint = update_endpoint_ir_server(endpoint)

        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_client(wireguard_config_path, new_config)

            save_stuff_gretap62(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break

        elif choice == "0":
            wireguard_gre6tap_noconjuction_kharej1_5iran()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapn_kharej_client3():
    wireguard_config_path = "/etc/wireguard/wireclient.conf"
    gre6_path = "/etc/gre63.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP\033[97m Kharej Client\033[92m [3]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is Kharej Client \033[97m[3]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print("4.\033[93m Change \033[92mIRAN Server IP \033[96m(Endpoint IP)\033[0m")
        print("5. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "4":
            endpoint = update_endpoint_ir_server(endpoint)

        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_client(wireguard_config_path, new_config)

            save_stuff_gretap63(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break

        elif choice == "0":
            wireguard_gre6tap_noconjuction_kharej1_5iran()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapn_kharej_client4():
    wireguard_config_path = "/etc/wireguard/wireclient.conf"
    gre6_path = "/etc/gre64.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP\033[97m Kharej Client\033[92m [4]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is Kharej Client \033[97m[4]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print("4.\033[93m Change \033[92mIRAN Server IP \033[96m(Endpoint IP)\033[0m")
        print("5. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "4":
            endpoint = update_endpoint_ir_server(endpoint)

        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_client(wireguard_config_path, new_config)

            save_stuff_gretap64(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break

        elif choice == "0":
            wireguard_gre6tap_noconjuction_kharej1_5iran()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapn_kharej_client5():
    wireguard_config_path = "/etc/wireguard/wireclient.conf"
    gre6_path = "/etc/gre65.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP\033[97m Kharej Client\033[92m [5]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is Kharej Client \033[97m[5]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print("4.\033[93m Change \033[92mIRAN Server IP \033[96m(Endpoint IP)\033[0m")
        print("5. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "4":
            endpoint = update_endpoint_ir_server(endpoint)

        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_client(wireguard_config_path, new_config)

            save_stuff_gretap65(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break

        elif choice == "0":
            wireguard_gre6tap_noconjuction_kharej1_5iran()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


# gre6tap ipsec
def update_ipsec_conf_wireguard_gre6tapserver1(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.readlines()

        start_idx, end_idx = None, None
        for i, line in enumerate(content):
            if line.strip() == "conn GRE61":
                start_idx = i
            elif start_idx is not None and line.strip().startswith("conn "):
                end_idx = i
                break

        if start_idx is None:
            print("\033[91m'conn GRE61' section not found\033[0m")
            return

        if end_idx is None:
            end_idx = len(content)

        section = content[start_idx:end_idx]

        ip_type = (
            "ipv6"
            if isinstance(ipaddress.ip_address(new_private_ip), ipaddress.IPv6Address)
            else "ipv4"
        )

        if ip_type == "ipv6":
            subnet = "/64"
        else:
            subnet = "/32"

        ip_parts = (
            new_private_ip.split(".")
            if ip_type == "ipv4"
            else new_private_ip.split(":")
        )
        if new_private_ip.endswith(".2") or new_private_ip.endswith(":2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ".".join(ip_parts) if ip_type == "ipv4" else ":".join(ip_parts)

        new_section = []
        for line in section:
            line = re.sub(
                r"leftsubnet=\S+", f"leftsubnet={new_private_ip}{subnet}", line
            )
            line = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", line)
            line = re.sub(r"right=\S+", f"right={counterpart_ip}", line)
            line = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}{subnet}", line
            )
            new_section.append(line)

        new_content = content[:start_idx] + new_section + content[end_idx:]

        with open(name, "w") as f:
            f.writelines(new_content)

        print(f"\033[92m'conn GRE61' section updated successfully\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipsec_conf_wireguard_gre6tapserver2(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.readlines()

        start_idx, end_idx = None, None
        for i, line in enumerate(content):
            if line.strip() == "conn GRE62":
                start_idx = i
            elif start_idx is not None and line.strip().startswith("conn "):
                end_idx = i
                break

        if start_idx is None:
            print("\033[91m'conn GRE62' section not found\033[0m")
            return

        if end_idx is None:
            end_idx = len(content)

        section = content[start_idx:end_idx]

        ip_type = (
            "ipv6"
            if isinstance(ipaddress.ip_address(new_private_ip), ipaddress.IPv6Address)
            else "ipv4"
        )

        if ip_type == "ipv6":
            subnet = "/64"
        else:
            subnet = "/32"

        ip_parts = (
            new_private_ip.split(".")
            if ip_type == "ipv4"
            else new_private_ip.split(":")
        )
        if new_private_ip.endswith(".2") or new_private_ip.endswith(":2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ".".join(ip_parts) if ip_type == "ipv4" else ":".join(ip_parts)

        new_section = []
        for line in section:
            line = re.sub(
                r"leftsubnet=\S+", f"leftsubnet={new_private_ip}{subnet}", line
            )
            line = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", line)
            line = re.sub(r"right=\S+", f"right={counterpart_ip}", line)
            line = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}{subnet}", line
            )
            new_section.append(line)

        new_content = content[:start_idx] + new_section + content[end_idx:]

        with open(name, "w") as f:
            f.writelines(new_content)

        print(f"\033[92m'conn GRE62' section updated successfully\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipsec_conf_wireguard_gre6tapserver3(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.readlines()

        start_idx, end_idx = None, None
        for i, line in enumerate(content):
            if line.strip() == "conn GRE63":
                start_idx = i
            elif start_idx is not None and line.strip().startswith("conn "):
                end_idx = i
                break

        if start_idx is None:
            print("\033[91m'conn GRE63' section not found\033[0m")
            return

        if end_idx is None:
            end_idx = len(content)

        section = content[start_idx:end_idx]

        ip_type = (
            "ipv6"
            if isinstance(ipaddress.ip_address(new_private_ip), ipaddress.IPv6Address)
            else "ipv4"
        )

        if ip_type == "ipv6":
            subnet = "/64"
        else:
            subnet = "/32"

        ip_parts = (
            new_private_ip.split(".")
            if ip_type == "ipv4"
            else new_private_ip.split(":")
        )
        if new_private_ip.endswith(".2") or new_private_ip.endswith(":2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ".".join(ip_parts) if ip_type == "ipv4" else ":".join(ip_parts)

        new_section = []
        for line in section:
            line = re.sub(
                r"leftsubnet=\S+", f"leftsubnet={new_private_ip}{subnet}", line
            )
            line = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", line)
            line = re.sub(r"right=\S+", f"right={counterpart_ip}", line)
            line = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}{subnet}", line
            )
            new_section.append(line)

        new_content = content[:start_idx] + new_section + content[end_idx:]

        with open(name, "w") as f:
            f.writelines(new_content)

        print(f"\033[92m'conn GRE63' section updated successfully\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipsec_conf_wireguard_gre6tapserver4(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.readlines()

        start_idx, end_idx = None, None
        for i, line in enumerate(content):
            if line.strip() == "conn GRE64":
                start_idx = i
            elif start_idx is not None and line.strip().startswith("conn "):
                end_idx = i
                break

        if start_idx is None:
            print("\033[91m'conn GRE64' section not found\033[0m")
            return

        if end_idx is None:
            end_idx = len(content)

        section = content[start_idx:end_idx]

        ip_type = (
            "ipv6"
            if isinstance(ipaddress.ip_address(new_private_ip), ipaddress.IPv6Address)
            else "ipv4"
        )

        if ip_type == "ipv6":
            subnet = "/64"
        else:
            subnet = "/32"

        ip_parts = (
            new_private_ip.split(".")
            if ip_type == "ipv4"
            else new_private_ip.split(":")
        )
        if new_private_ip.endswith(".2") or new_private_ip.endswith(":2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ".".join(ip_parts) if ip_type == "ipv4" else ":".join(ip_parts)

        new_section = []
        for line in section:
            line = re.sub(
                r"leftsubnet=\S+", f"leftsubnet={new_private_ip}{subnet}", line
            )
            line = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", line)
            line = re.sub(r"right=\S+", f"right={counterpart_ip}", line)
            line = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}{subnet}", line
            )
            new_section.append(line)

        new_content = content[:start_idx] + new_section + content[end_idx:]

        with open(name, "w") as f:
            f.writelines(new_content)

        print(f"\033[92m'conn GRE64' section updated successfully\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipsec_conf_wireguard_gre6tapserver5(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.readlines()

        start_idx, end_idx = None, None
        for i, line in enumerate(content):
            if line.strip() == "conn GRE65":
                start_idx = i
            elif start_idx is not None and line.strip().startswith("conn "):
                end_idx = i
                break

        if start_idx is None:
            print("\033[91m'conn GRE65' section not found\033[0m")
            return

        if end_idx is None:
            end_idx = len(content)

        section = content[start_idx:end_idx]

        ip_type = (
            "ipv6"
            if isinstance(ipaddress.ip_address(new_private_ip), ipaddress.IPv6Address)
            else "ipv4"
        )

        if ip_type == "ipv6":
            subnet = "/64"
        else:
            subnet = "/32"

        ip_parts = (
            new_private_ip.split(".")
            if ip_type == "ipv4"
            else new_private_ip.split(":")
        )
        if new_private_ip.endswith(".2") or new_private_ip.endswith(":2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ".".join(ip_parts) if ip_type == "ipv4" else ":".join(ip_parts)

        new_section = []
        for line in section:
            line = re.sub(
                r"leftsubnet=\S+", f"leftsubnet={new_private_ip}{subnet}", line
            )
            line = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", line)
            line = re.sub(r"right=\S+", f"right={counterpart_ip}", line)
            line = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}{subnet}", line
            )
            new_section.append(line)

        new_content = content[:start_idx] + new_section + content[end_idx:]

        with open(name, "w") as f:
            f.writelines(new_content)

        print(f"\033[92m'conn GRE65' section updated successfully\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipsec_conf_wireguard_gre6tap(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.read()

        if ":" in new_private_ip:
            ip_parts = new_private_ip.split(":")
            ip_parts[-1] = "1" if ip_parts[-1].endswith("2") else "2"
            counterpart_ip = ":".join(ip_parts)
            subnet_suffix = "/64"
        else:
            ip_parts = new_private_ip.split(".")
            ip_parts[-1] = "1" if ip_parts[-1] == "2" else "2"
            counterpart_ip = ".".join(ip_parts)
            subnet_suffix = "/24"

        new_content = re.sub(
            r"leftsubnet=\S+", f"leftsubnet={new_private_ip}{subnet_suffix}", content
        )
        new_content = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", new_content)
        new_content = re.sub(r"right=\S+", f"right={counterpart_ip}", new_content)
        new_content = re.sub(
            r"rightsubnet=\S+",
            f"rightsubnet={counterpart_ip}{subnet_suffix}",
            new_content,
        )

        with open(name, "w") as f:
            f.write(new_content)

        display_checkmark("\033[92mIPsec configuration updated successfully!\033[0m")

    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mOut of ordinary error: {e}\033[0m")

def wireguardafter_gre6tapnsec_kharejconfig_1():
    wireguard_config_path = "/etc/wireguard/wireserver1.conf"
    gre6_path = "/etc/gre61.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP IPSEC\033[97m Kharej Server Config\033[92m [1]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is Kharej Server \033[97mConfig [1]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print(
            "4.\033[93m Change \033[92mIRAN Client [1] IP \033[96m(Endpoint IP)\033[0m"
        )
        print("5.\033[94m Change IPsec Secret Key\033[0m")
        print("6. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec1(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
                update_ipsec_conf_wireguard_gre6tapserver1(
                    "/etc/ipsec1.conf", new_gre6_private_ip
                )
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "4":
            endpoint = update_endpoint_ip1(endpoint)

        elif choice == "5":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")

        elif choice == "6":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec1(wireguard_config_path, new_config)

            save_stuff_gretap61(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            if new_gre6_private_ip:
                update_ipsec_ip_multi(new_gre6_private_ip)
            break

        elif choice == "0":
            wireguard_gre6tapsec_noconjuction_kharej1_5iran()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapnsec_kharejconfig_2():
    wireguard_config_path = "/etc/wireguard/wireserver2.conf"
    gre6_path = "/etc/gre62.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP IPSEC\033[97m Kharej Server Config\033[92m [2]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is Kharej Server \033[97mConfig [2]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print(
            "4.\033[93m Change \033[92mIRAN Client [2] IP \033[96m(Endpoint IP)\033[0m"
        )
        print("5.\033[94m Change IPsec Secret Key\033[0m")
        print("6. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec2(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
                update_ipsec_conf_wireguard_gre6tapserver2(
                    "/etc/ipsec1.conf", new_gre6_private_ip
                )
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "4":
            endpoint = update_endpoint_ip2(endpoint)

        elif choice == "5":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")

        elif choice == "6":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec2(wireguard_config_path, new_config)

            save_stuff_gretap62(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            if new_gre6_private_ip:
                update_ipsec_ip_multi2(new_gre6_private_ip)
            break

        elif choice == "0":
            wireguard_gre6tapsec_noconjuction_kharej1_5iran()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapnsec_kharejconfig_3():
    wireguard_config_path = "/etc/wireguard/wireserver3.conf"
    gre6_path = "/etc/gre63.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP IPSEC\033[97m Kharej Server Config\033[92m [3]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is Kharej Server \033[97mConfig [3]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print(
            "4.\033[93m Change \033[92mIRAN Client [3] IP \033[96m(Endpoint IP)\033[0m"
        )
        print("5.\033[94m Change IPsec Secret Key\033[0m")
        print("6. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec3(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
                update_ipsec_conf_wireguard_gre6tapserver3(
                    "/etc/ipsec1.conf", new_gre6_private_ip
                )
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "4":
            endpoint = update_endpoint_ip3(endpoint)

        elif choice == "5":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")

        elif choice == "6":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec3(wireguard_config_path, new_config)

            save_stuff_gretap63(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            if new_gre6_private_ip:
                update_ipsec_ip_multi3(new_gre6_private_ip)
            break

        elif choice == "0":
            wireguard_gre6tapsec_noconjuction_kharej1_5iran()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapnsec_kharejconfig_4():
    wireguard_config_path = "/etc/wireguard/wireserver4.conf"
    gre6_path = "/etc/gre64.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP IPSEC\033[97m Kharej Server Config\033[92m [4]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is Kharej Server \033[97mConfig [4]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print(
            "4.\033[93m Change \033[92mIRAN Client [4] IP \033[96m(Endpoint IP)\033[0m"
        )
        print("5.\033[94m Change IPsec Secret Key\033[0m")
        print("6. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec4(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
                update_ipsec_conf_wireguard_gre6tapserver4(
                    "/etc/ipsec1.conf", new_gre6_private_ip
                )
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "4":
            endpoint = update_endpoint_ip4(endpoint)

        elif choice == "5":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")

        elif choice == "6":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec4(wireguard_config_path, new_config)

            save_stuff_gretap64(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            if new_gre6_private_ip:
                update_ipsec_ip_multi4(new_gre6_private_ip)
            break

        elif choice == "0":
            wireguard_gre6tapsec_noconjuction_kharej1_5iran()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapnsec_kharejconfig_5():
    wireguard_config_path = "/etc/wireguard/wireserver5.conf"
    gre6_path = "/etc/gre65.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP IPSEC\033[97m Kharej Server Config\033[92m [5]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is Kharej Server \033[97mConfig [5]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print(
            "4.\033[93m Change \033[92mIRAN Client [5] IP \033[96m(Endpoint IP)\033[0m"
        )
        print("5.\033[94m Change IPsec Secret Key\033[0m")
        print("6. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec5(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
                update_ipsec_conf_wireguard_gre6tapserver5(
                    "/etc/ipsec1.conf", new_gre6_private_ip
                )
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "4":
            endpoint = update_endpoint_ip5(endpoint)

        elif choice == "5":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")

        elif choice == "6":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec5(wireguard_config_path, new_config)

            save_stuff_gretap65(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            if new_gre6_private_ip:
                update_ipsec_ip_multi5(new_gre6_private_ip)
            break

        elif choice == "0":
            wireguard_gre6tapsec_noconjuction_kharej1_5iran()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapnsec_iran_client1():
    wireguard_config_path = "/etc/wireguard/wireclient.conf"
    gre6_path = "/etc/gre61.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP IPSEC\033[97m IRAN Client\033[92m [1]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is IRAN Client \033[97m[1]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print("4.\033[93m Change \033[92mKharej Server IP \033[96m(Endpoint IP)\033[0m")
        print("5.\033[94m Change IPsec Secret Key\033[0m")
        print("6. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
                update_ipsec_conf_wireguard_gre6tap(
                    "/etc/ipsec1.conf", new_gre6_private_ip
                )
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "4":
            endpoint = update_endpoint_ip_server(endpoint)

        elif choice == "5":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")

        elif choice == "6":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec_client(wireguard_config_path, new_config)

            save_stuff_gretap61(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            if new_gre6_private_ip:
                update_ipsec_ip(new_gre6_private_ip)
            break

        elif choice == "0":
            wireguard_gre6tapsec_noconjuction_kharej1_5iran()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapnsec_iran_client2():
    wireguard_config_path = "/etc/wireguard/wireclient.conf"
    gre6_path = "/etc/gre62.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP IPSEC\033[97m IRAN Client\033[92m [2]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is IRAN Client \033[97m[2]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print("4.\033[93m Change \033[92mKharej Server IP \033[96m(Endpoint IP)\033[0m")
        print("5.\033[94m Change IPsec Secret Key\033[0m")
        print("6. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
                update_ipsec_conf_wireguard_gre6tap(
                    "/etc/ipsec1.conf", new_gre6_private_ip
                )
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "4":
            endpoint = update_endpoint_ip_server(endpoint)

        elif choice == "5":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")

        elif choice == "6":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec_client(wireguard_config_path, new_config)

            save_stuff_gretap62(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            if new_gre6_private_ip:
                update_ipsec_ip(new_gre6_private_ip)
            break

        elif choice == "0":
            wireguard_gre6tapsec_noconjuction_kharej1_5iran()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapnsec_iran_client3():
    wireguard_config_path = "/etc/wireguard/wireclient.conf"
    gre6_path = "/etc/gre63.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP IPSEC\033[97m IRAN Client\033[92m [3]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is IRAN Client \033[97m[3]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print("4.\033[93m Change \033[92mKharej Server IP \033[96m(Endpoint IP)\033[0m")
        print("5.\033[94m Change IPsec Secret Key\033[0m")
        print("6. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
                update_ipsec_conf_wireguard_gre6tap(
                    "/etc/ipsec1.conf", new_gre6_private_ip
                )
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "4":
            endpoint = update_endpoint_ip_server(endpoint)

        elif choice == "5":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")

        elif choice == "6":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec_client(wireguard_config_path, new_config)

            save_stuff_gretap63(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            if new_gre6_private_ip:
                update_ipsec_ip(new_gre6_private_ip)
            break

        elif choice == "0":
            wireguard_gre6tapsec_noconjuction_kharej1_5iran()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapnsec_iran_client4():
    wireguard_config_path = "/etc/wireguard/wireclient.conf"
    gre6_path = "/etc/gre64.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP IPSEC\033[97m IRAN Client\033[92m [4]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is IRAN Client \033[97m[4]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print("4.\033[93m Change \033[92mKharej Server IP \033[96m(Endpoint IP)\033[0m")
        print("5.\033[94m Change IPsec Secret Key\033[0m")
        print("6. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
                update_ipsec_conf_wireguard_gre6tap(
                    "/etc/ipsec1.conf", new_gre6_private_ip
                )
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "4":
            endpoint = update_endpoint_ip_server(endpoint)

        elif choice == "5":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")

        elif choice == "6":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec_client(wireguard_config_path, new_config)

            save_stuff_gretap64(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            if new_gre6_private_ip:
                update_ipsec_ip(new_gre6_private_ip)
            break

        elif choice == "0":
            wireguard_gre6tapsec_noconjuction_kharej1_5iran()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapnsec_iran_client5():
    wireguard_config_path = "/etc/wireguard/wireclient.conf"
    gre6_path = "/etc/gre65.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP IPSEC\033[97m IRAN Client\033[92m [5]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is IRAN Client \033[97m[5]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print("4.\033[93m Change \033[92mKharej Server IP \033[96m(Endpoint IP)\033[0m")
        print("5.\033[94m Change IPsec Secret Key\033[0m")
        print("6. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
                update_ipsec_conf_wireguard_gre6tap(
                    "/etc/ipsec1.conf", new_gre6_private_ip
                )
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "4":
            endpoint = update_endpoint_ip_server(endpoint)

        elif choice == "5":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")

        elif choice == "6":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec_client(wireguard_config_path, new_config)

            save_stuff_gretap65(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            if new_gre6_private_ip:
                update_ipsec_ip(new_gre6_private_ip)
            break

        elif choice == "0":
            wireguard_gre6tapsec_noconjuction_kharej1_5iran()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


# 1 iran 5 kharej client


def update_gre6tap_ips(
    gre6_path, new_local_ip=None, new_remote_ip=None, new_private_ip=None
):
    try:
        with open(gre6_path, "r") as f:
            content = f.read()

        if new_local_ip:
            content = re.sub(r"local (\S+)", f"local {new_local_ip}", content)
        if new_remote_ip:
            content = re.sub(r"remote (\S+)", f"remote {new_remote_ip}", content)
        if new_private_ip:
            content = re.sub(
                r"ip -6 addr add \S+/64 dev azumig6?",
                f"ip -6 addr add {new_private_ip}/64 dev azumig6",
                content,
            )

        with open(gre6_path, "w") as f:
            f.write(content)

    except FileNotFoundError:
        print(f"\033[91mFile {gre6_path} doesn't exist\033[0m")
    except Exception as e:
        print(f"\033[91mOut of ordinary error: {e}\033[0m")


def wireguardafter_gre6tapnsec_iranconfig_1():
    wireguard_config_path = "/etc/wireguard/wireserver1.conf"
    gre6_path = "/etc/gre61.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP IPSEC\033[97m IRAN Server Config\033[92m [1]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is IRAN Server \033[97mConfig [1]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print(
            "4.\033[93m Change \033[92mKharej Client [1] IP \033[96m(Endpoint IP)\033[0m"
        )
        print("5.\033[94m Change IPsec Secret Key\033[0m")
        print("6. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec1(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
                update_ipsec_conf_wireguard_gre6tapserver1(
                    "/etc/ipsec1.conf", new_gre6_private_ip
                )
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "4":
            endpoint = update_endpoint_ir_ip1(endpoint)

        elif choice == "5":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")

        elif choice == "6":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec1(wireguard_config_path, new_config)

            save_stuff_gretap61(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            if new_gre6_private_ip:
                update_ipsec_ip_multi(new_gre6_private_ip)
            break

        elif choice == "0":
            wireguard_gre6tapsec_noconjuction_1iran_5kharej()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapnsec_iranconfig_2():
    wireguard_config_path = "/etc/wireguard/wireserver2.conf"
    gre6_path = "/etc/gre62.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP IPSEC\033[97m IRAN Server Config\033[92m [2]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is IRAN Server \033[97mConfig [2]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print(
            "4.\033[93m Change \033[92mKharej Client [2] IP \033[96m(Endpoint IP)\033[0m"
        )
        print("5.\033[94m Change IPsec Secret Key\033[0m")
        print("6. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec2(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
                update_ipsec_conf_wireguard_gre6tapserver2(
                    "/etc/ipsec1.conf", new_gre6_private_ip
                )
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "4":
            endpoint = update_endpoint_ir_ip2(endpoint)

        elif choice == "5":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")

        elif choice == "6":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec2(wireguard_config_path, new_config)

            save_stuff_gretap62(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            if new_gre6_private_ip:
                update_ipsec_ip_multi2(new_gre6_private_ip)
            break

        elif choice == "0":
            wireguard_gre6tapsec_noconjuction_1iran_5kharej()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapnsec_iranconfig_3():
    wireguard_config_path = "/etc/wireguard/wireserver3.conf"
    gre6_path = "/etc/gre63.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP IPSEC\033[97m IRAN Server Config\033[92m [3]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is IRAN Server \033[97mConfig [3]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print(
            "4.\033[93m Change \033[92mKharej Client [3] IP \033[96m(Endpoint IP)\033[0m"
        )
        print("5.\033[94m Change IPsec Secret Key\033[0m")
        print("6. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec3(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
                update_ipsec_conf_wireguard_gre6tapserver3(
                    "/etc/ipsec1.conf", new_gre6_private_ip
                )
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "4":
            endpoint = update_endpoint_ir_ip3(endpoint)

        elif choice == "5":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")

        elif choice == "6":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec3(wireguard_config_path, new_config)

            save_stuff_gretap63(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            if new_gre6_private_ip:
                update_ipsec_ip_multi3(new_gre6_private_ip)
            break

        elif choice == "0":
            wireguard_gre6tapsec_noconjuction_1iran_5kharej()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapnsec_iranconfig_4():
    wireguard_config_path = "/etc/wireguard/wireserver4.conf"
    gre6_path = "/etc/gre64.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP IPSEC\033[97m IRAN Server Config\033[92m [4]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is IRAN Server \033[97mConfig [4]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print(
            "4.\033[93m Change \033[92mKharej Client [4] IP \033[96m(Endpoint IP)\033[0m"
        )
        print("5.\033[94m Change IPsec Secret Key\033[0m")
        print("6. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec4(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
                update_ipsec_conf_wireguard_gre6tapserver4(
                    "/etc/ipsec1.conf", new_gre6_private_ip
                )
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "4":
            endpoint = update_endpoint_ir_ip4(endpoint)

        elif choice == "5":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secrett Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")

        elif choice == "6":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec4(wireguard_config_path, new_config)

            save_stuff_gretap64(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            if new_gre6_private_ip:
                update_ipsec_ip_multi4(new_gre6_private_ip)
            break

        elif choice == "0":
            wireguard_gre6tapsec_noconjuction_1iran_5kharej()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapnsec_iranconfig_5():
    wireguard_config_path = "/etc/wireguard/wireserver5.conf"
    gre6_path = "/etc/gre65.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP IPSEC\033[97m IRAN Server Config\033[92m [5]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is IRAN Server \033[97mConfig [5]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print(
            "4.\033[93m Change \033[92mKharej Client [5] IP \033[96m(Endpoint IP)\033[0m"
        )
        print("5.\033[94m Change IPsec Secret Key\033[0m")
        print("6. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec5(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
                update_ipsec_conf_wireguard_gre6tapserver5(
                    "/etc/ipsec1.conf", new_gre6_private_ip
                )
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "4":
            endpoint = update_endpoint_ir_ip5(endpoint)

        elif choice == "5":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")

        elif choice == "6":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec5(wireguard_config_path, new_config)

            save_stuff_gretap65(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            if new_gre6_private_ip:
                update_ipsec_ip_multi5(new_gre6_private_ip)
            break

        elif choice == "0":
            wireguard_gre6tapsec_noconjuction_1iran_5kharej()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapnsec_kharej_client1():
    wireguard_config_path = "/etc/wireguard/wireclient.conf"
    gre6_path = "/etc/gre61.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP IPSEC\033[97m Kharej Client\033[92m [1]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is Kharej Client \033[97m[1]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print("4.\033[93m Change \033[92mIRAN Server IP \033[96m(Endpoint IP)\033[0m")
        print("5.\033[94m Change IPsec Secret Key\033[0m")
        print("6. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
                update_ipsec_conf_wireguard_gre6tap(
                    "/etc/ipsec1.conf", new_gre6_private_ip
                )
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "4":
            endpoint = update_endpoint_ir_server(endpoint)

        elif choice == "5":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")

        elif choice == "6":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec_client(wireguard_config_path, new_config)

            save_stuff_gretap61(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            if new_gre6_private_ip:
                update_ipsec_ip(new_gre6_private_ip)
            break

        elif choice == "0":
            wireguard_gre6tapsec_noconjuction_1iran_5kharej()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapnsec_kharej_client2():
    wireguard_config_path = "/etc/wireguard/wireclient.conf"
    gre6_path = "/etc/gre62.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP IPSEC\033[97m Kharej Client\033[92m [2]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is Kharej Client \033[97m[2]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print("4.\033[93m Change \033[92mIRAN Server IP \033[96m(Endpoint IP)\033[0m")
        print("5.\033[94m Change IPsec Secret Key\033[0m")
        print("6. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
                update_ipsec_conf_wireguard_gre6tap(
                    "/etc/ipsec1.conf", new_gre6_private_ip
                )
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "4":
            endpoint = update_endpoint_ir_server(endpoint)

        elif choice == "5":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")

        elif choice == "6":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec_client(wireguard_config_path, new_config)

            save_stuff_gretap62(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            if new_gre6_private_ip:
                update_ipsec_ip(new_gre6_private_ip)
            break

        elif choice == "0":
            wireguard_gre6tapsec_noconjuction_1iran_5kharej()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapnsec_kharej_client3():
    wireguard_config_path = "/etc/wireguard/wireclient.conf"
    gre6_path = "/etc/gre63.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP IPSEC\033[97m Kharej Client\033[92m [3]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is Kharej Client \033[97m[3]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print("4.\033[93m Change \033[92mIRAN Server IP \033[96m(Endpoint IP)\033[0m")
        print("5.\033[94m Change IPsec Secret Key\033[0m")
        print("6. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
                update_ipsec_conf_wireguard_gre6tap(
                    "/etc/ipsec1.conf", new_gre6_private_ip
                )
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "4":
            endpoint = update_endpoint_ir_server(endpoint)

        elif choice == "5":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")

        elif choice == "6":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec_client(wireguard_config_path, new_config)

            save_stuff_gretap63(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            if new_gre6_private_ip:
                update_ipsec_ip(new_gre6_private_ip)
            break

        elif choice == "0":
            wireguard_gre6tapsec_noconjuction_1iran_5kharej()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapnsec_kharej_client4():
    wireguard_config_path = "/etc/wireguard/wireclient.conf"
    gre6_path = "/etc/gre64.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP IPSEC\033[97m Kharej Client\033[92m [4]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is Kharej Client \033[97m[4]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print("4.\033[93m Change \033[92mIRAN Server IP \033[96m(Endpoint IP)\033[0m")
        print("5.\033[94m Change IPsec Secret Key\033[0m")
        print("6. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
                update_ipsec_conf_wireguard_gre6tap(
                    "/etc/ipsec1.conf", new_gre6_private_ip
                )
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "4":
            endpoint = update_endpoint_ir_server(endpoint)

        elif choice == "5":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")

        elif choice == "6":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec_client(wireguard_config_path, new_config)

            save_stuff_gretap64(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            if new_gre6_private_ip:
                update_ipsec_ip(new_gre6_private_ip)
            break

        elif choice == "0":
            wireguard_gre6tapsec_noconjuction_1iran_5kharej()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapnsec_kharej_client5():
    wireguard_config_path = "/etc/wireguard/wireclient.conf"
    gre6_path = "/etc/gre65.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP IPSEC\033[97m Kharej Client\033[92m [5]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is Kharej Client \033[97m[5]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print("4.\033[93m Change \033[92mIRAN Server IP \033[96m(Endpoint IP)\033[0m")
        print("5.\033[94m Change IPsec Secret Key\033[0m")
        print("6. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
                update_ipsec_conf_wireguard_gre6tap(
                    "/etc/ipsec1.conf", new_gre6_private_ip
                )
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "4":
            endpoint = update_endpoint_ir_server(endpoint)

        elif choice == "5":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")

        elif choice == "6":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec_client(wireguard_config_path, new_config)

            save_stuff_gretap65(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            if new_gre6_private_ip:
                update_ipsec_ip(new_gre6_private_ip)
            break

        elif choice == "0":
            wireguard_gre6tapsec_noconjuction_1iran_5kharej()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def gre6tapwireguardeditserver_mnu():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[92mEdit local\033[93m GRE6TAP Native + Wireguard Menu\033[0m"
    )
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mNo IPSEC\033[0m")
    print("2. \033[93mWith IPSEC\033[0m")
    print("3. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        choice = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if choice == "1":
            gre6tap_wireguard_nosec_edit_local()
            break
        elif choice == "2":
            gre6tap_wireguard_sec_edit_local()
            break
        elif choice == "3":
            clear()
            wireguard_edit_server()
            break
        else:
            print("Invalid choice.")


def gre6tap_wireguard_nosec_edit_local():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mGre6tap[Native] + Wireguard \033[93m Edit Menu\033[0m")
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print(
        "1. \033[92mGre6tap[native] + Wireguard - [1]Kharej Server [5]IRAN Clients\033[0m"
    )
    print(
        "2. \033[93mGre6tap[native] + Wireguard - [1]IRAN   Server [5]Kharej Clients\033[0m"
    )
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardedit_gre6tap_noconjuction_kharej1_5iran()
            break
        elif server_type == "2":
            wireguardedit_gre6tap_noconjuction_1iran_5kharej()
            break
        elif server_type == "0":
            os.system("clear")
            gre6tapwireguardeditserver_mnu()
            break
        else:
            print("Invalid choice.")


def wireguardedit_gre6tap_noconjuction_1iran_5kharej():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mGre6tap[native] + Wireguard \033[92m[1]IRAN Server\033[96m [5]Kharej Client\033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej Client [1] Config\033[0m")
    print("2. \033[92mKharej Client [2] Config\033[0m")
    print("3. \033[92mKharej Client [3] Config\033[0m")
    print("4. \033[93mKharej Client [4] Config\033[0m")
    print("5. \033[92mKharej Client [5] Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("6. \033[96mIRAN Server Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguard_gre6tapn_kharej_client1()
            break
        elif server_type == "2":
            wireguard_gre6tapn_kharej_client2()
            break
        elif server_type == "3":
            wireguard_gre6tapn_kharej_client3()
            break
        elif server_type == "4":
            wireguard_gre6tapn_kharej_client4()
            break
        elif server_type == "5":
            wireguard_gre6tapn_kharej_client5()
            break
        elif server_type == "6":
            wireguard_gre6tapn_iran_server()
            break
        elif server_type == "0":
            os.system("clear")
            gre6tap_wireguard_nosec_edit_local()
            break
        else:
            print("Invalid choice.")


def wireguard_gre6tapn_iran_server():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mGre6tap[native] + Wireguard \033[92m[1]IRAN Server\033[96m [5]Kharej Client\033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mIRAN Server Config [1] \033[0m")
    print("2. \033[92mIRAN Server Config [2]\033[0m")
    print("3. \033[93mIRAN Server Config [3]\033[0m")
    print("4. \033[92mIRAN Server Config [4]\033[0m")
    print("5. \033[92mIRAN Server Config [5]\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguard_gre6tapn_iranconfig_1()
            break
        elif server_type == "2":
            wireguard_gre6tapn_iranconfig_2()
            break
        elif server_type == "3":
            wireguard_gre6tapn_iranconfig_3()
            break
        elif server_type == "4":
            wireguard_gre6tapn_iranconfig_4()
            break
        elif server_type == "5":
            wireguard_gre6tapn_iranconfig_5()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardedit_gre6tap_noconjuction_1iran_5kharej()
            break
        else:
            print("Invalid choice.")


def wireguardedit_gre6tap_noconjuction_kharej1_5iran():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mGre6tap[native] + Wireguard \033[92m[1]Kharej Server\033[96m [5]IRAN Client\033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mIRAN Client [1] Config\033[0m")
    print("2. \033[92mIRAN Client [2] Config\033[0m")
    print("3. \033[92mIRAN Client [3] Config\033[0m")
    print("4. \033[93mIRAN Client [4] Config\033[0m")
    print("5. \033[92mIRAN Client [5] Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("6. \033[96mKharej Server Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguard_gre6tapn_iran_client1()
            break
        elif server_type == "2":
            wireguard_gre6tapn_iran_client2()
            break
        elif server_type == "3":
            wireguard_gre6tapn_iran_client3()
            break
        elif server_type == "4":
            wireguard_gre6tapn_iran_client4()
            break
        elif server_type == "5":
            wireguard_gre6tapn_iran_client5()
            break
        elif server_type == "6":
            wireguard_gre6tapn_kharej_server()
            break
        elif server_type == "0":
            os.system("clear")
            gre6tap_wireguard_nosec_edit_local()
            break
        else:
            print("Invalid choice.")


def wireguard_gre6tapn_kharej_server():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mGre6tap[native] + Wireguard \033[92m[1]Kharej Server\033[96m [5]IRAN Client\033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej Server Config [1] \033[0m")
    print("2. \033[92mKharej Server Config [2]\033[0m")
    print("3. \033[93mKharej Server Config [3]\033[0m")
    print("4. \033[92mKharej Server Config [4]\033[0m")
    print("5. \033[92mKharej Server Config [5]\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguard_gre6tapn_kharejconfig_1()
            break
        elif server_type == "2":
            wireguard_gre6tapn_kharejconfig_2()
            break
        elif server_type == "3":
            wireguard_gre6tapn_kharejconfig_3()
            break
        elif server_type == "4":
            wireguard_gre6tapn_kharejconfig_4()
            break
        elif server_type == "5":
            wireguard_gre6tapn_kharejconfig_5()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardedit_gre6tap_noconjuction_kharej1_5iran()
            break
        else:
            print("Invalid choice.")


###


def display_stuff_gre6tapn_wire_iran1(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         GRE6TAP Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mIRAN IPV6:       \033[97m{local_ip}\033[0m",
        f"\033[92mKharej [1] IPV6: \033[97m{remote_ip}\033[0m",
        f"\033[93mPrivate IP:      \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_gre6tapn_wire_iran2(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         GRE6TAP Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mIRAN IPV6:       \033[97m{local_ip}\033[0m",
        f"\033[92mKharej [2] IPV6: \033[97m{remote_ip}\033[0m",
        f"\033[93mPrivate IP:      \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_gre6tapn_wire_iran3(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         GRE6TAP Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mIRAN IPV6:       \033[97m{local_ip}\033[0m",
        f"\033[92mKharej [3] IPV6: \033[97m{remote_ip}\033[0m",
        f"\033[93mPrivate IP:      \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_gre6tapn_wire_iran4(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         GRE6TAP Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mIRAN IPV6:       \033[97m{local_ip}\033[0m",
        f"\033[92mKharej [4] IPV6: \033[97m{remote_ip}\033[0m",
        f"\033[93mPrivate IP:      \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_gre6tapn_wire_iran5(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         GRE6TAP Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mIRAN IPV6:       \033[97m{local_ip}\033[0m",
        f"\033[92mKharej [5] IPV6: \033[97m{remote_ip}\033[0m",
        f"\033[93mPrivate IP:      \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_gre6tapn_wire_iran_client1(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         GRE6TAP Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mIRAN [1] IPV6:   \033[97m{local_ip}\033[0m",
        f"\033[92mKharej IPV6:     \033[97m{remote_ip}\033[0m",
        f"\033[93mPrivate IP:      \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_gre6tapn_wire_iran_client2(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         GRE6TAP Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mIRAN [2] IPV6:   \033[97m{local_ip}\033[0m",
        f"\033[92mKharej IPV6:     \033[97m{remote_ip}\033[0m",
        f"\033[93mPrivate IP:      \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_gre6tapn_wire_iran_client3(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         GRE6TAP Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mIRAN [3] IPV6:   \033[97m{local_ip}\033[0m",
        f"\033[92mKharej IPV6:     \033[97m{remote_ip}\033[0m",
        f"\033[93mPrivate IP:      \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_gre6tapn_wire_iran_client4(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         GRE6TAP Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mIRAN [4] IPV6:   \033[97m{local_ip}\033[0m",
        f"\033[92mKharej IPV6:     \033[97m{remote_ip}\033[0m",
        f"\033[93mPrivate IP:      \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_gre6tapn_wire_iran_client5(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         GRE6TAP Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mIRAN [5] IPV6:   \033[97m{local_ip}\033[0m",
        f"\033[92mKharej IPV6:     \033[97m{remote_ip}\033[0m",
        f"\033[93mPrivate IP:      \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_gre6tapn_wire_kharej1(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         GRE6TAP Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej [1] IPV6:   \033[97m{local_ip}\033[0m",
        f"\033[92mIRAN IPV6:         \033[97m{remote_ip}\033[0m",
        f"\033[93mPrivate IP:        \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_gre6tapn_wire_kharej2(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         GRE6TAP Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej [2] IPV6:   \033[97m{local_ip}\033[0m",
        f"\033[92mIRAN IPV6:         \033[97m{remote_ip}\033[0m",
        f"\033[93mPrivate IP:        \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_gre6tapn_wire_kharej3(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         GRE6TAP Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej [3] IPV6:   \033[97m{local_ip}\033[0m",
        f"\033[92mIRAN IPV6:         \033[97m{remote_ip}\033[0m",
        f"\033[93mPrivate IP:        \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_gre6tapn_wire_kharej4(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         GRE6TAP Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej [4] IPV6:   \033[97m{local_ip}\033[0m",
        f"\033[92mIRAN IPV6:         \033[97m{remote_ip}\033[0m",
        f"\033[93mPrivate IP:        \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_gre6tapn_wire_kharej5(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         GRE6TAP Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej [5] IPV6:   \033[97m{local_ip}\033[0m",
        f"\033[92mIRAN IPV6:         \033[97m{remote_ip}\033[0m",
        f"\033[93mPrivate IP:        \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_gre6tapn_wire_kharej_server1(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         GRE6TAP Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej IPV6:       \033[97m{local_ip}\033[0m",
        f"\033[92mIRAN [1] IPV6:     \033[97m{remote_ip}\033[0m",
        f"\033[93mPrivate IP:        \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_gre6tapn_wire_kharej_server2(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         GRE6TAP Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej IPV6:       \033[97m{local_ip}\033[0m",
        f"\033[92mIRAN [2] IPV6:     \033[97m{remote_ip}\033[0m",
        f"\033[93mPrivate IP:        \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_gre6tapn_wire_kharej_server3(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         GRE6TAP Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej IPV6:       \033[97m{local_ip}\033[0m",
        f"\033[92mIRAN [3] IPV6:     \033[97m{remote_ip}\033[0m",
        f"\033[93mPrivate IP:        \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_gre6tapn_wire_kharej_server4(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         GRE6TAP Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej IPV6:       \033[97m{local_ip}\033[0m",
        f"\033[92mIRAN [4] IPV6:     \033[97m{remote_ip}\033[0m",
        f"\033[93mPrivate IP:        \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_gre6tapn_wire_kharej_server5(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         GRE6TAP Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej IPV6:       \033[97m{local_ip}\033[0m",
        f"\033[92mIRAN [5] IPV6:     \033[97m{remote_ip}\033[0m",
        f"\033[93mPrivate IP:        \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


# az inja


def update_pingfile_sit(name, new_ip):
    try:
        with open(name, "r") as f:
            content = f.read()

        new_content = re.sub(r'ip_address="[^"]+"', f'ip_address="{new_ip}"', content)

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def wtb_opposite_ip_sitwire(ip):
    if ":" in ip:  # IPv6
        ip_parts = ip.split(":")
        ip_parts[-1] = "1" if ip_parts[-1] == "2" else "2"
        return ":".join(ip_parts)
    else:  # IPv4
        ip_parts = ip.split(".")
        ip_parts[-1] = "1" if ip_parts[-1] == "2" else "2"
        return ".".join(ip_parts)


def delete_ufw_rules(ip, port=None):
    counterpart_ip = wtb_opposite_ip_sitwire(ip)
    try:
        if port:
            subprocess.run(
                [
                    "sudo",
                    "ufw",
                    "delete",
                    "allow",
                    "from",
                    ip,
                    "to",
                    "any",
                    "port",
                    port,
                ],
                check=False,
            )
            subprocess.run(
                [
                    "sudo",
                    "ufw",
                    "delete",
                    "allow",
                    "from",
                    counterpart_ip,
                    "to",
                    "any",
                    "port",
                    port,
                ],
                check=False,
            )
        else:
            subprocess.run(["sudo", "ufw", "delete", "allow", "from", ip], check=False)
            subprocess.run(
                ["sudo", "ufw", "delete", "allow", "from", counterpart_ip], check=False
            )
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror deleting UFW rules: {e}\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def add_ufw_rules(ip, port=None):
    counterpart_ip = wtb_opposite_ip_sitwire(ip)
    try:
        if port:
            subprocess.run(
                ["sudo", "ufw", "allow", "from", ip, "to", "any", "port", port],
                check=True,
            )
            subprocess.run(
                [
                    "sudo",
                    "ufw",
                    "allow",
                    "from",
                    counterpart_ip,
                    "to",
                    "any",
                    "port",
                    port,
                ],
                check=True,
            )
        else:
            subprocess.run(["sudo", "ufw", "allow", "from", ip], check=True)
            subprocess.run(["sudo", "ufw", "allow", "from", counterpart_ip], check=True)
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror adding UFW rules: {e}\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def display_checkmark(message):
    print("\u2714 " + message)


def private_native(name):
    try:
        with open(name, "r") as f:
            content = f.read()
        match = re.search(r"ip -6 addr add (\S+)/64 dev azumi?", content)
        if match:
            return match.group(1)
        else:
            print("\033[91mno private IP found\033[0m")
    except FileNotFoundError:
        print("\033[91mPrivate file not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    return None


def get_current_native_ipsgre61():
    private_ip_private = private_native("/etc/private1.sh")
    private_ip_gre6 = private_gre61("/etc/gre61.sh")
    return {
        "private": private_ip_private,
        "gre6": private_ip_gre6,
    }


def get_current_native_ipsgre62():
    private_ip_private = private_native("/etc/private2.sh")
    private_ip_gre6 = private_gre61("/etc/gre62.sh")
    return {
        "private": private_ip_private,
        "gre6": private_ip_gre6,
    }


def get_current_native_ipsgre63():
    private_ip_private = private_native("/etc/private3.sh")
    private_ip_gre6 = private_gre61("/etc/gre63.sh")
    return {
        "private": private_ip_private,
        "gre6": private_ip_gre6,
    }


def get_current_native_ipsgre64():
    private_ip_private = private_native("/etc/private4.sh")
    private_ip_gre6 = private_gre61("/etc/gre64.sh")
    return {
        "private": private_ip_private,
        "gre6": private_ip_gre6,
    }


def get_current_native_ipsgre65():
    private_ip_private = private_native("/etc/private5.sh")
    private_ip_gre6 = private_gre61("/etc/gre65.sh")
    return {
        "private": private_ip_private,
        "gre6": private_ip_gre6,
    }


def wtb_opposite_ip(ip):
    if ":" in ip:  # IPv6
        ip_parts = ip.split(":")
        ip_parts[-1] = "1" if ip_parts[-1] == "2" else "2"
        return ":".join(ip_parts)
    else:  # IPv4
        ip_parts = ip.split(".")
        ip_parts[-1] = "1" if ip_parts[-1] == "2" else "2"
        return ".".join(ip_parts)


def update_ipfile_gre6_wire1(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi?",
                f"ip -6 addr add {new_ip}/64 dev azumi",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi?",
                f"ip -6 route add {counterpart_ip}/64 dev azumi",
                new_content,
            )
            update_ipfile_gre6_wire1("/etc/gre61.sh", new_ip, update_type="gre6_local")
            update_ipfile_gre6_wire1(
                "/etc/gre61.sh", counterpart_ip, update_type="gre6_remote"
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "gre6_local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "gre6_remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "ipsec":
            new_content = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_ip}/64", content)
            new_content = re.sub(r"leftid=\S+", f"leftid={new_ip}", new_content)

            ip_parts = new_ip.split(":")
            if new_ip.endswith(":1"):
                ip_parts[-1] = "2"
            else:
                ip_parts[-1] = "1"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(r"right=\S+", f"right={counterpart_ip}", new_content)
            new_content = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}/64", new_content
            )

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipfile_gre6_wire2(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi?",
                f"ip -6 addr add {new_ip}/64 dev azumi",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi?",
                f"ip -6 route add {counterpart_ip}/64 dev azumi",
                new_content,
            )
            update_ipfile_gre6_wire2("/etc/gre62.sh", new_ip, update_type="gre6_local")
            update_ipfile_gre6_wire2(
                "/etc/gre62.sh", counterpart_ip, update_type="gre6_remote"
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "gre6_local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "gre6_remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "ipsec":
            new_content = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_ip}/64", content)
            new_content = re.sub(r"leftid=\S+", f"leftid={new_ip}", new_content)

            ip_parts = new_ip.split(":")
            if new_ip.endswith(":1"):
                ip_parts[-1] = "2"
            else:
                ip_parts[-1] = "1"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(r"right=\S+", f"right={counterpart_ip}", new_content)
            new_content = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}/64", new_content
            )

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipfile_gre6_wire3(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi?",
                f"ip -6 addr add {new_ip}/64 dev azumi",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi?",
                f"ip -6 route add {counterpart_ip}/64 dev azumi",
                new_content,
            )
            update_ipfile_gre6_wire3("/etc/gre63.sh", new_ip, update_type="gre6_local")
            update_ipfile_gre6_wire3(
                "/etc/gre63.sh", counterpart_ip, update_type="gre6_remote"
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "gre6_local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "gre6_remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "ipsec":
            new_content = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_ip}/64", content)
            new_content = re.sub(r"leftid=\S+", f"leftid={new_ip}", new_content)

            ip_parts = new_ip.split(":")
            if new_ip.endswith(":1"):
                ip_parts[-1] = "2"
            else:
                ip_parts[-1] = "1"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(r"right=\S+", f"right={counterpart_ip}", new_content)
            new_content = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}/64", new_content
            )

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipfile_gre6_wire4(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi?",
                f"ip -6 addr add {new_ip}/64 dev azumi",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi?",
                f"ip -6 route add {counterpart_ip}/64 dev azumi",
                new_content,
            )
            update_ipfile_gre6_wire4("/etc/gre64.sh", new_ip, update_type="gre6_local")
            update_ipfile_gre6_wire4(
                "/etc/gre64.sh", counterpart_ip, update_type="gre6_remote"
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "gre6_local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "gre6_remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "ipsec":
            new_content = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_ip}/64", content)
            new_content = re.sub(r"leftid=\S+", f"leftid={new_ip}", new_content)

            ip_parts = new_ip.split(":")
            if new_ip.endswith(":1"):
                ip_parts[-1] = "2"
            else:
                ip_parts[-1] = "1"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(r"right=\S+", f"right={counterpart_ip}", new_content)
            new_content = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}/64", new_content
            )

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipfile_gre6_wire5(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi?",
                f"ip -6 addr add {new_ip}/64 dev azumi",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi?",
                f"ip -6 route add {counterpart_ip}/64 dev azumi",
                new_content,
            )
            update_ipfile_gre6_wire5("/etc/gre65.sh", new_ip, update_type="gre6_local")
            update_ipfile_gre6_wire5(
                "/etc/gre65.sh", counterpart_ip, update_type="gre6_remote"
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "gre6_local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "gre6_remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "ipsec":
            new_content = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_ip}/64", content)
            new_content = re.sub(r"leftid=\S+", f"leftid={new_ip}", new_content)

            ip_parts = new_ip.split(":")
            if new_ip.endswith(":1"):
                ip_parts[-1] = "2"
            else:
                ip_parts[-1] = "1"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(r"right=\S+", f"right={counterpart_ip}", new_content)
            new_content = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}/64", new_content
            )

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_gre61(private_ip, local_ip, remote_ip, is_gre6):
    current_ips = get_current_native_ipsgre61()
    current_ip = current_ips["gre6"] if is_gre6 else current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip(private_ip)
    try:
        if is_gre6:
            update_pingfile_sit("/etc/ping_ip1.sh", counterpart_ip)
            update_ipfile_gre6_wire1("/etc/gre61.sh", private_ip, update_type="private")
            update_ipfile_gre6_wire1("/etc/gre61.sh", local_ip, update_type="local")
            update_ipfile_gre6_wire1("/etc/gre61.sh", remote_ip, update_type="remote")
        else:
            update_pingfile_sit("/etc/ping_v61.sh", counterpart_ip)
            update_ipfile_gre6_wire1(
                "/etc/private1.sh", private_ip, update_type="private"
            )
            update_ipfile_gre6_wire1("/etc/private1.sh", local_ip, update_type="local")
            update_ipfile_gre6_wire1(
                "/etc/private1.sh", remote_ip, update_type="remote"
            )

        interface = "azumig61" if is_gre6 else "azumi1"
        subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
        subprocess.run(["ip", "link", "delete", interface], check=True)
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror bringing interface down or deleting it: {e}\033[0m")

    try:
        script = "/etc/gre61.sh" if is_gre6 else "/etc/private1.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_ip1"], check=True)

        # display_checkmark("\033[92mSystem services reloaded and restarted successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print(
            f"\033[91merror applying network changes: {e.stderr.strip() if e.stderr else str(e)}\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_gre62(private_ip, local_ip, remote_ip, is_gre6):
    current_ips = get_current_native_ipsgre62()
    current_ip = current_ips["gre6"] if is_gre6 else current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip(private_ip)
    try:
        if is_gre6:
            update_pingfile_sit("/etc/ping_ip2.sh", counterpart_ip)
            update_ipfile_gre6_wire2("/etc/gre62.sh", private_ip, update_type="private")
            update_ipfile_gre6_wire2("/etc/gre62.sh", local_ip, update_type="local")
            update_ipfile_gre6_wire2("/etc/gre62.sh", remote_ip, update_type="remote")
        else:
            update_pingfile_sit("/etc/ping_v62.sh", counterpart_ip)
            update_ipfile_gre6_wire2(
                "/etc/private2.sh", private_ip, update_type="private"
            )
            update_ipfile_gre6_wire2("/etc/private2.sh", local_ip, update_type="local")
            update_ipfile_gre6_wire2(
                "/etc/private2.sh", remote_ip, update_type="remote"
            )

        interface = "azumig62" if is_gre6 else "azumi2"
        subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
        subprocess.run(["ip", "link", "delete", interface], check=True)
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror bringing interface down or deleting it: {e}\033[0m")

    try:
        script = "/etc/gre62.sh" if is_gre6 else "/etc/private2.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_ip2"], check=True)

        # display_checkmark("\033[92mSystem services reloaded and restarted successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print(
            f"\033[91merror applying network changes: {e.stderr.strip() if e.stderr else str(e)}\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_gre63(private_ip, local_ip, remote_ip, is_gre6):
    current_ips = get_current_native_ipsgre63()
    current_ip = current_ips["gre6"] if is_gre6 else current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip(private_ip)
    try:
        if is_gre6:
            update_pingfile_sit("/etc/ping_ip3.sh", counterpart_ip)
            update_ipfile_gre6_wire3("/etc/gre63.sh", private_ip, update_type="private")
            update_ipfile_gre6_wire3("/etc/gre63.sh", local_ip, update_type="local")
            update_ipfile_gre6_wire3("/etc/gre63.sh", remote_ip, update_type="remote")
        else:
            update_pingfile_sit("/etc/ping_v63.sh", counterpart_ip)
            update_ipfile_gre6_wire3(
                "/etc/private3.sh", private_ip, update_type="private"
            )
            update_ipfile_gre6_wire3("/etc/private3.sh", local_ip, update_type="local")
            update_ipfile_gre6_wire3(
                "/etc/private3.sh", remote_ip, update_type="remote"
            )

        interface = "azumig63" if is_gre6 else "azumi3"
        subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
        subprocess.run(["ip", "link", "delete", interface], check=True)
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror bringing interface down or deleting it: {e}\033[0m")

    try:
        script = "/etc/gre63.sh" if is_gre6 else "/etc/private3.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_ip3"], check=True)

        # display_checkmark("\033[92mSystem services reloaded and restarted successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print(
            f"\033[91merror applying network changes: {e.stderr.strip() if e.stderr else str(e)}\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_gre64(private_ip, local_ip, remote_ip, is_gre6):
    current_ips = get_current_native_ipsgre64()
    current_ip = current_ips["gre6"] if is_gre6 else current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip(private_ip)
    try:
        if is_gre6:
            update_pingfile_sit("/etc/ping_ip4.sh", counterpart_ip)
            update_ipfile_gre6_wire4("/etc/gre64.sh", private_ip, update_type="private")
            update_ipfile_gre6_wire4("/etc/gre64.sh", local_ip, update_type="local")
            update_ipfile_gre6_wire4("/etc/gre64.sh", remote_ip, update_type="remote")
        else:
            update_pingfile_sit("/etc/ping_v64.sh", counterpart_ip)
            update_ipfile_gre6_wire4(
                "/etc/private4.sh", private_ip, update_type="private"
            )
            update_ipfile_gre6_wire4("/etc/private4.sh", local_ip, update_type="local")
            update_ipfile_gre6_wire4(
                "/etc/private4.sh", remote_ip, update_type="remote"
            )

        interface = "azumig64" if is_gre6 else "azumi4"
        subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
        subprocess.run(["ip", "link", "delete", interface], check=True)
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror bringing interface down or deleting it: {e}\033[0m")

    try:
        script = "/etc/gre64.sh" if is_gre6 else "/etc/private4.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_ip4"], check=True)

        # display_checkmark("\033[92mSystem services reloaded and restarted successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print(
            f"\033[91merror applying network changes: {e.stderr.strip() if e.stderr else str(e)}\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_gre65(private_ip, local_ip, remote_ip, is_gre6):
    current_ips = get_current_native_ipsgre65()
    current_ip = current_ips["gre6"] if is_gre6 else current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip(private_ip)
    try:
        if is_gre6:
            update_pingfile_sit("/etc/ping_ip5.sh", counterpart_ip)
            update_ipfile_gre6_wire5("/etc/gre65.sh", private_ip, update_type="private")
            update_ipfile_gre6_wire5("/etc/gre65.sh", local_ip, update_type="local")
            update_ipfile_gre6_wire5("/etc/gre65.sh", remote_ip, update_type="remote")
        else:
            update_pingfile_sit("/etc/ping_v65.sh", counterpart_ip)
            update_ipfile_gre6_wire5(
                "/etc/private5.sh", private_ip, update_type="private"
            )
            update_ipfile_gre6_wire5("/etc/private5.sh", local_ip, update_type="local")
            update_ipfile_gre6_wire5(
                "/etc/private5.sh", remote_ip, update_type="remote"
            )

        interface = "azumig65" if is_gre6 else "azumi5"
        subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
        subprocess.run(["ip", "link", "delete", interface], check=True)
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror bringing interface down or deleting it: {e}\033[0m")

    try:
        script = "/etc/gre65.sh" if is_gre6 else "/etc/private5.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_ip5"], check=True)

        # display_checkmark("\033[92mSystem services reloaded and restarted successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print(
            f"\033[91merror applying network changes: {e.stderr.strip() if e.stderr else str(e)}\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def local_ip(name):
    try:
        with open(name, "r") as f:
            content = f.read()
        match = re.search(r"local (\S+)", content)
        if match:
            return match.group(1)
        else:
            print(f"\033[91mno local IP found\033[0m")
    except FileNotFoundError:
        print(f"file {name} doesn't exist")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    return None


def remote_ip(name):
    try:
        with open(name, "r") as f:
            content = f.read()
        match = re.search(r"remote (\S+)", content)
        if match:
            return match.group(1)
        else:
            print("\033[91mno remote IP found \033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    return None


def private_gre61(name):
    try:
        with open(name, "r") as f:
            content = f.read()
        match = re.search(r"ip -6 addr add (\S+)/64 dev azumig6?", content)
        if match:
            return match.group(1)
        else:
            print(f"\033[91mno private IP found\033[0m")
    except FileNotFoundError:
        print("\033[91mPrivate file not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    return None


def wtb_opposite_ip_wireguard(ip):
    return wtb_opposite_ip_sitwire(ip)


def load_wireguardconfig_sitwire(file_path):
    try:
        with open(file_path, "r") as file:
            content = file.read()

        address_match = re.search(r"Address = ([^\s]+)", content)
        listen_port_match = re.search(r"ListenPort = (\d+)", content)
        endpoint_match = re.search(r"Endpoint = ([^\s]+):\d+", content)
        allowed_ips_match = re.search(r"AllowedIPs = ([^\s]+)", content)

        address = address_match.group(1) if address_match else "N/A"
        listen_port = listen_port_match.group(1) if listen_port_match else "N/A"
        endpoint = endpoint_match.group(1) if endpoint_match else "N/A"
        allowed_ips = allowed_ips_match.group(1) if allowed_ips_match else "N/A"

        return address, address.split("/")[0], listen_port, endpoint, allowed_ips
    except FileNotFoundError:
        print("\033[91mWireguard configuration file not found.\033[0m")
        return None, None, None, None, None
    except Exception as e:
        print(f"\033[91mAn error occurred: {e}\033[0m")
        return None, None, None, None, None


def save_wireguardconfig_sitwire1sec(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+):\d+"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )
        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )
        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )

        def replace_endpoint(match):
            endpoint_ip = new_config["EndpointIP"]
            return f'Endpoint = {endpoint_ip}:{new_config["ListenPort"]}'

        new_config_content = re.sub(
            endpoint_pattern, replace_endpoint, new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)

        services_to_restart = [
            "strong-azumi1",
            "wireguardping_1.service",
        ]

        wg_quick_interface = "/etc/wireguard/wireserver1.conf"
        wg_quick_down = subprocess.run(
            ["wg-quick", "down", wg_quick_interface],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if wg_quick_down.returncode == 0:
            subprocess.run(["wg-quick", "up", wg_quick_interface], check=True)
            display_checkmark(
                f"\033[92mInterface {wg_quick_interface} brought down and up successfully!\033[0m"
            )
        else:
            print(
                f"\033[93mFailed to bring down interface {wg_quick_interface}.\033[0m"
            )

        for service_name in services_to_restart:
            service_status = subprocess.run(
                ["systemctl", "is-active", service_name],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
            )

            if service_status.returncode == 0:
                subprocess.run(["systemctl", "restart", service_name], check=True)
                display_checkmark(
                    f"\033[92mService {service_name} restarted successfully!\033[0m"
                )
            else:
                print(
                    f"\033[93mService {service_name} doesn't exist or is inactive.\033[0m"
                )

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in managing services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving the config: {e}\033[0m")


def save_wireguardconfig_sitwire2sec(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+):\d+"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )
        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )
        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )

        def replace_endpoint(match):
            endpoint_ip = new_config["EndpointIP"]
            return f'Endpoint = {endpoint_ip}:{new_config["ListenPort"]}'

        new_config_content = re.sub(
            endpoint_pattern, replace_endpoint, new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)

        services_to_restart = [
            "strong-azumi1",
            "wireguardping_2.service",
        ]

        wg_quick_interface = "/etc/wireguard/wireserver2.conf"
        wg_quick_down = subprocess.run(
            ["wg-quick", "down", wg_quick_interface],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if wg_quick_down.returncode == 0:
            subprocess.run(["wg-quick", "up", wg_quick_interface], check=True)
            display_checkmark(
                f"\033[92mInterface {wg_quick_interface} brought down and up successfully!\033[0m"
            )
        else:
            print(
                f"\033[93mFailed to bring down interface {wg_quick_interface}.\033[0m"
            )

        for service_name in services_to_restart:
            service_status = subprocess.run(
                ["systemctl", "is-active", service_name],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
            )

            if service_status.returncode == 0:
                subprocess.run(["systemctl", "restart", service_name], check=True)
                display_checkmark(
                    f"\033[92mService {service_name} restarted successfully!\033[0m"
                )
            else:
                print(
                    f"\033[93mService {service_name} doesn't exist or is inactive.\033[0m"
                )

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in managing services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving the config: {e}\033[0m")


def save_wireguardconfig_sitwire3sec(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+):\d+"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )
        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )
        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )

        def replace_endpoint(match):
            endpoint_ip = new_config["EndpointIP"]
            return f'Endpoint = {endpoint_ip}:{new_config["ListenPort"]}'

        new_config_content = re.sub(
            endpoint_pattern, replace_endpoint, new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)

        services_to_restart = [
            "strong-azumi1",
            "wireguardping_3.service",
        ]

        wg_quick_interface = "/etc/wireguard/wireserver3.conf"
        wg_quick_down = subprocess.run(
            ["wg-quick", "down", wg_quick_interface],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if wg_quick_down.returncode == 0:
            subprocess.run(["wg-quick", "up", wg_quick_interface], check=True)
            display_checkmark(
                f"\033[92mInterface {wg_quick_interface} brought down and up successfully!\033[0m"
            )
        else:
            print(
                f"\033[93mFailed to bring down interface {wg_quick_interface}.\033[0m"
            )

        for service_name in services_to_restart:
            service_status = subprocess.run(
                ["systemctl", "is-active", service_name],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
            )

            if service_status.returncode == 0:
                subprocess.run(["systemctl", "restart", service_name], check=True)
                display_checkmark(
                    f"\033[92mService {service_name} restarted successfully!\033[0m"
                )
            else:
                print(
                    f"\033[93mService {service_name} doesn't exist or is inactive.\033[0m"
                )

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in managing services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving the config: {e}\033[0m")


def save_wireguardconfig_sitwire4sec(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+):\d+"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )
        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )
        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )

        def replace_endpoint(match):
            endpoint_ip = new_config["EndpointIP"]
            return f'Endpoint = {endpoint_ip}:{new_config["ListenPort"]}'

        new_config_content = re.sub(
            endpoint_pattern, replace_endpoint, new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)

        services_to_restart = [
            "strong-azumi1",
            "wireguardping_4.service",
        ]

        wg_quick_interface = "/etc/wireguard/wireserver4.conf"
        wg_quick_down = subprocess.run(
            ["wg-quick", "down", wg_quick_interface],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if wg_quick_down.returncode == 0:
            subprocess.run(["wg-quick", "up", wg_quick_interface], check=True)
            display_checkmark(
                f"\033[92mInterface {wg_quick_interface} brought down and up successfully!\033[0m"
            )
        else:
            print(
                f"\033[93mFailed to bring down interface {wg_quick_interface}.\033[0m"
            )

        for service_name in services_to_restart:
            service_status = subprocess.run(
                ["systemctl", "is-active", service_name],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
            )

            if service_status.returncode == 0:
                subprocess.run(["systemctl", "restart", service_name], check=True)
                display_checkmark(
                    f"\033[92mService {service_name} restarted successfully!\033[0m"
                )
            else:
                print(
                    f"\033[93mService {service_name} doesn't exist or is inactive.\033[0m"
                )

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in managing services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving the config: {e}\033[0m")


def save_wireguardconfig_sitwire5sec(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+):\d+"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )
        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )
        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )

        def replace_endpoint(match):
            endpoint_ip = new_config["EndpointIP"]
            return f'Endpoint = {endpoint_ip}:{new_config["ListenPort"]}'

        new_config_content = re.sub(
            endpoint_pattern, replace_endpoint, new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)

        services_to_restart = [
            "strong-azumi1",
            "wireguardping_5.service",
        ]

        wg_quick_interface = "/etc/wireguard/wireserver5.conf"
        wg_quick_down = subprocess.run(
            ["wg-quick", "down", wg_quick_interface],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if wg_quick_down.returncode == 0:
            subprocess.run(["wg-quick", "up", wg_quick_interface], check=True)
            display_checkmark(
                f"\033[92mInterface {wg_quick_interface} brought down and up successfully!\033[0m"
            )
        else:
            print(
                f"\033[93mFailed to bring down interface {wg_quick_interface}.\033[0m"
            )

        for service_name in services_to_restart:
            service_status = subprocess.run(
                ["systemctl", "is-active", service_name],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
            )

            if service_status.returncode == 0:
                subprocess.run(["systemctl", "restart", service_name], check=True)
                display_checkmark(
                    f"\033[92mService {service_name} restarted successfully!\033[0m"
                )
            else:
                print(
                    f"\033[93mService {service_name} doesn't exist or is inactive.\033[0m"
                )

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in managing services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving the config: {e}\033[0m")


def save_wireguardconfig_sitwiresec_client(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+):\d+"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )
        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )
        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )

        def replace_endpoint(match):
            endpoint_ip = new_config["EndpointIP"]
            return f'Endpoint = {endpoint_ip}:{new_config["ListenPort"]}'

        new_config_content = re.sub(
            endpoint_pattern, replace_endpoint, new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)

        services_to_restart = [
            "strong-azumi1",
            "wireguardping.service",
        ]

        wg_quick_interface = "/etc/wireguard/wireclient.conf"
        wg_quick_down = subprocess.run(
            ["wg-quick", "down", wg_quick_interface],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if wg_quick_down.returncode == 0:
            subprocess.run(["wg-quick", "up", wg_quick_interface], check=True)
            display_checkmark(
                f"\033[92mInterface {wg_quick_interface} brought down and up successfully!\033[0m"
            )
        else:
            print(
                f"\033[93mFailed to bring down interface {wg_quick_interface}.\033[0m"
            )

        for service_name in services_to_restart:
            service_status = subprocess.run(
                ["systemctl", "is-active", service_name],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
            )

            if service_status.returncode == 0:
                subprocess.run(["systemctl", "restart", service_name], check=True)
                display_checkmark(
                    f"\033[92mService {service_name} restarted successfully!\033[0m"
                )
            else:
                print(
                    f"\033[93mService {service_name} doesn't exist or is inactive.\033[0m"
                )

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in managing services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving the config: {e}\033[0m")


def update_ufw_ruleswireguard(old_ip, new_ip, old_port=None, new_port=None):
    if old_port:
        delete_ufw_rules(old_ip, old_port)
        delete_ufw_rules(wtb_opposite_ip_wireguard(old_ip), old_port)
    add_ufw_rules(new_ip, new_port)
    add_ufw_rules(wtb_opposite_ip_wireguard(new_ip), new_port)


def update_ping_script_opposite_ip_wirenosec_client(new_opposite_ip):
    script_path = "/etc/ping_wireguard.sh"
    try:
        with open(script_path, "r") as f:
            script_content = f.read()

        updated_script_content = re.sub(
            r'ip_address="[^"]+"', f'ip_address="{new_opposite_ip}"', script_content
        )

        with open(script_path, "w") as f:
            f.write(updated_script_content)

        display_checkmark(
            "\033[92mPing script updated with new opposite IP address!\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mPing script {script_path} not found.\033[0m")
    except Exception as e:
        print(f"\033[91mError updating ping script: {e}\033[0m")


def update_ping_script_opposite_ip_wirenosec1(new_opposite_ip):
    script_path = "/etc/ping_wireguard_1.sh"
    try:
        with open(script_path, "r") as f:
            script_content = f.read()

        updated_script_content = re.sub(
            r'ip_address="[^"]+"', f'ip_address="{new_opposite_ip}"', script_content
        )

        with open(script_path, "w") as f:
            f.write(updated_script_content)

        display_checkmark(
            "\033[92mPing script updated with new opposite IP address!\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mPing script {script_path} not found.\033[0m")
    except Exception as e:
        print(f"\033[91mError updating ping script: {e}\033[0m")


def update_ping_script_opposite_ip_wirenosec2(new_opposite_ip):
    script_path = "/etc/ping_wireguard_2.sh"
    try:
        with open(script_path, "r") as f:
            script_content = f.read()

        updated_script_content = re.sub(
            r'ip_address="[^"]+"', f'ip_address="{new_opposite_ip}"', script_content
        )

        with open(script_path, "w") as f:
            f.write(updated_script_content)

        display_checkmark(
            "\033[92mPing script updated with new opposite IP address!\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mPing script {script_path} not found.\033[0m")
    except Exception as e:
        print(f"\033[91mError updating ping script: {e}\033[0m")


def update_ping_script_opposite_ip_wirenosec3(new_opposite_ip):
    script_path = "/etc/ping_wireguard_3.sh"
    try:
        with open(script_path, "r") as f:
            script_content = f.read()

        updated_script_content = re.sub(
            r'ip_address="[^"]+"', f'ip_address="{new_opposite_ip}"', script_content
        )

        with open(script_path, "w") as f:
            f.write(updated_script_content)

        display_checkmark(
            "\033[92mPing script updated with new opposite IP address!\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mPing script {script_path} not found.\033[0m")
    except Exception as e:
        print(f"\033[91mError updating ping script: {e}\033[0m")


def update_ping_script_opposite_ip_wirenosec4(new_opposite_ip):
    script_path = "/etc/ping_wireguard_4.sh"
    try:
        with open(script_path, "r") as f:
            script_content = f.read()

        updated_script_content = re.sub(
            r'ip_address="[^"]+"', f'ip_address="{new_opposite_ip}"', script_content
        )

        with open(script_path, "w") as f:
            f.write(updated_script_content)

        display_checkmark(
            "\033[92mPing script updated with new opposite IP address!\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mPing script {script_path} not found.\033[0m")
    except Exception as e:
        print(f"\033[91mError updating ping script: {e}\033[0m")


def update_ping_script_opposite_ip_wirenosec5(new_opposite_ip):
    script_path = "/etc/ping_wireguard_5.sh"
    try:
        with open(script_path, "r") as f:
            script_content = f.read()

        updated_script_content = re.sub(
            r'ip_address="[^"]+"', f'ip_address="{new_opposite_ip}"', script_content
        )

        with open(script_path, "w") as f:
            f.write(updated_script_content)

        display_checkmark(
            "\033[92mPing script updated with new opposite IP address!\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mPing script {script_path} not found.\033[0m")
    except Exception as e:
        print(f"\033[91mError updating ping script: {e}\033[0m")


def update_ping_script_opposite_ip_wirenosec_client(new_opposite_ip):
    script_path = "/etc/ping_wireguard.sh"
    try:
        with open(script_path, "r") as f:
            script_content = f.read()

        updated_script_content = re.sub(
            r'ip_address="[^"]+"', f'ip_address="{new_opposite_ip}"', script_content
        )

        with open(script_path, "w") as f:
            f.write(updated_script_content)

        display_checkmark(
            "\033[92mPing script updated with new opposite IP address!\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mPing script {script_path} not found.\033[0m")
    except Exception as e:
        print(f"\033[91mError updating ping script: {e}\033[0m")


def display_wireguard_config_sitwire(
    address_no_subnet, listen_port, endpoint, allowed_ips
):
    lines = [
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[93mTitle:         Wireguard Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mAddress:           \033[97m{address_no_subnet}\033[0m",
        f"\033[92mListenPort:        \033[97m{listen_port}\033[0m",
        f"\033[92mEndpoint:          \033[97m{endpoint}\033[0m",
        f"\033[92mAllowedIPs:        \033[97m{allowed_ips}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def wireguard_gre6tapn_iranconfig_1():
    local_ip_private = local_ip("/etc/gre61.sh")
    remote_ip_private = remote_ip("/etc/gre61.sh")
    private_ip_private = private_gre61("/etc/gre61.sh")
    config_path = "/etc/wireguard/wireserver1.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_iran1(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m IRAN Server \033[96mConfig [1]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Client [1] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [1]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec1(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            save_stuff_gre61(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire1sec(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tap_noconjuction_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapn_iranconfig_2():
    local_ip_private = local_ip("/etc/gre62.sh")
    remote_ip_private = remote_ip("/etc/gre62.sh")
    private_ip_private = private_gre61("/etc/gre62.sh")
    config_path = "/etc/wireguard/wireserver2.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_iran2(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m IRAN Server \033[96mConfig [2]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Client [2] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [2]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec2(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            save_stuff_gre62(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire2sec(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tap_noconjuction_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapn_iranconfig_3():
    local_ip_private = local_ip("/etc/gre63.sh")
    remote_ip_private = remote_ip("/etc/gre63.sh")
    private_ip_private = private_gre61("/etc/gre63.sh")
    config_path = "/etc/wireguard/wireserver3.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_iran3(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m IRAN Server \033[96mConfig [3]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Client [3] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [3]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec3(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            save_stuff_gre63(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire3sec(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tap_noconjuction_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapn_iranconfig_4():
    local_ip_private = local_ip("/etc/gre64.sh")
    remote_ip_private = remote_ip("/etc/gre64.sh")
    private_ip_private = private_gre61("/etc/gre64.sh")
    config_path = "/etc/wireguard/wireserver4.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_iran4(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m IRAN Server \033[96mConfig [4]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Client [4] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [4]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec4(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            save_stuff_gre64(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire4sec(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tap_noconjuction_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapn_iranconfig_5():
    local_ip_private = local_ip("/etc/gre65.sh")
    remote_ip_private = remote_ip("/etc/gre65.sh")
    private_ip_private = private_gre61("/etc/gre65.sh")
    config_path = "/etc/wireguard/wireserver5.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_iran5(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m IRAN Server \033[96mConfig [5]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Client [5] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [5]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec5(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            save_stuff_gre65(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire5sec(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tap_noconjuction_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapn_kharej_client1():
    local_ip_private = local_ip("/etc/gre61.sh")
    remote_ip_private = remote_ip("/etc/gre61.sh")
    private_ip_private = private_gre61("/etc/gre61.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_kharej1(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m Kharej Client \033[96m[1]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Client [1]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [1]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            save_stuff_gre61(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tap_noconjuction_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapn_kharej_client2():
    local_ip_private = local_ip("/etc/gre62.sh")
    remote_ip_private = remote_ip("/etc/gre62.sh")
    private_ip_private = private_gre61("/etc/gre62.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_kharej2(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m Kharej Client \033[96m[2]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Client [2]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [2]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            save_stuff_gre62(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tap_noconjuction_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapn_kharej_client3():
    local_ip_private = local_ip("/etc/gre63.sh")
    remote_ip_private = remote_ip("/etc/gre63.sh")
    private_ip_private = private_gre61("/etc/gre63.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_kharej3(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m Kharej Client \033[96m[3]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Client [3]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [3]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            save_stuff_gre63(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tap_noconjuction_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapn_kharej_client4():
    local_ip_private = local_ip("/etc/gre64.sh")
    remote_ip_private = remote_ip("/etc/gre64.sh")
    private_ip_private = private_gre61("/etc/gre64.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_kharej4(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m Kharej Client \033[96m[4]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Client [4]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [4]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            save_stuff_gre64(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tap_noconjuction_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapn_kharej_client5():
    local_ip_private = local_ip("/etc/gre65.sh")
    remote_ip_private = remote_ip("/etc/gre65.sh")
    private_ip_private = private_gre61("/etc/gre65.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_kharej5(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m Kharej Client \033[96m[5]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Client [5]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [5]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            save_stuff_gre65(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tap_noconjuction_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")
# 1 kharej server 5 iran client


def wireguard_gre6tapn_kharejconfig_1():
    local_ip_private = local_ip("/etc/gre61.sh")
    remote_ip_private = remote_ip("/etc/gre61.sh")
    private_ip_private = private_gre61("/etc/gre61.sh")
    config_path = "/etc/wireguard/wireserver1.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_kharej_server1(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m Kharej Server \033[96mConfig [1]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Client [1] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [1]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec1(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            save_stuff_gre61(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire1sec(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tap_noconjuction_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapn_kharejconfig_2():
    local_ip_private = local_ip("/etc/gre62.sh")
    remote_ip_private = remote_ip("/etc/gre62.sh")
    private_ip_private = private_gre61("/etc/gre62.sh")
    config_path = "/etc/wireguard/wireserver2.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_kharej_server2(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m Kharej Server \033[96mConfig [2]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Client [2] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [2]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec2(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            save_stuff_gre62(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire2sec(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tap_noconjuction_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapn_kharejconfig_3():
    local_ip_private = local_ip("/etc/gre63.sh")
    remote_ip_private = remote_ip("/etc/gre63.sh")
    private_ip_private = private_gre61("/etc/gre63.sh")
    config_path = "/etc/wireguard/wireserver3.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_kharej_server3(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m Kharej Server \033[96mConfig [3]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Client [3] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [3]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec3(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            save_stuff_gre63(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire3sec(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tap_noconjuction_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapn_kharejconfig_4():
    local_ip_private = local_ip("/etc/gre64.sh")
    remote_ip_private = remote_ip("/etc/gre64.sh")
    private_ip_private = private_gre61("/etc/gre64.sh")
    config_path = "/etc/wireguard/wireserver4.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_kharej_server4(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m Kharej Server \033[96mConfig [4]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Client [4] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [4]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec4(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            save_stuff_gre64(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire4sec(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tap_noconjuction_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapn_kharejconfig_5():
    local_ip_private = local_ip("/etc/gre65.sh")
    remote_ip_private = remote_ip("/etc/gre65.sh")
    private_ip_private = private_gre61("/etc/gre65.sh")
    config_path = "/etc/wireguard/wireserver5.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_kharej_server5(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m Kharej Server \033[96mConfig [5]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Client [5] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [5]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec5(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            save_stuff_gre65(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire5sec(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tap_noconjuction_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapn_iran_client1():
    local_ip_private = local_ip("/etc/gre61.sh")
    remote_ip_private = remote_ip("/etc/gre61.sh")
    private_ip_private = private_gre61("/etc/gre61.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_iran_client1(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m IRAN Client \033[96m[1]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Client [1]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [1]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            save_stuff_gre61(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tap_noconjuction_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapn_iran_client2():
    local_ip_private = local_ip("/etc/gre62.sh")
    remote_ip_private = remote_ip("/etc/gre62.sh")
    private_ip_private = private_gre61("/etc/gre62.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_iran_client2(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m IRAN Client \033[96m[2]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Client [2]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [2]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            save_stuff_gre62(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tap_noconjuction_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapn_iran_client3():
    local_ip_private = local_ip("/etc/gre63.sh")
    remote_ip_private = remote_ip("/etc/gre63.sh")
    private_ip_private = private_gre61("/etc/gre63.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_iran_client3(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m IRAN Client \033[96m[3]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Client [3]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [3]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            save_stuff_gre63(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tap_noconjuction_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapn_iran_client4():
    local_ip_private = local_ip("/etc/gre64.sh")
    remote_ip_private = remote_ip("/etc/gre64.sh")
    private_ip_private = private_gre61("/etc/gre64.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_iran_client4(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m IRAN Client \033[96m[4]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Client [4]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [4]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            save_stuff_gre64(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tap_noconjuction_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapn_iran_client5():
    local_ip_private = local_ip("/etc/gre65.sh")
    remote_ip_private = remote_ip("/etc/gre65.sh")
    private_ip_private = private_gre61("/etc/gre65.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_iran_client5(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m IRAN Client \033[96m[5]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Client [5]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [5]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            save_stuff_gre65(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tap_noconjuction_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


# ipsec
def gre6tap_wireguard_sec_edit_local():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mGre6tap[Native] + Wireguard + IPSEC \033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print(
        "1. \033[92mGre6tap[native] + Wireguard - [1]Kharej Server [5]IRAN Clients\033[0m"
    )
    print(
        "2. \033[93mGre6tap[native] + Wireguard - [1]IRAN   Server [5]Kharej Clients\033[0m"
    )
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardedit_gre6tapsec_noconjuction_kharej1_5iran()
            break
        elif server_type == "2":
            wireguardedit_gre6tapsec_noconjuction_1iran_5kharej()
            break
        elif server_type == "0":
            os.system("clear")
            gre6tapwireguardeditserver_mnu()
            break
        else:
            print("Invalid choice.")


def wireguardedit_gre6tapsec_noconjuction_1iran_5kharej():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mGre6tap[native] + Wireguard + IPSEC \033[92m[1]IRAN Server\033[96m [5]Kharej Client\033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej Client [1] Config\033[0m")
    print("2. \033[92mKharej Client [2] Config\033[0m")
    print("3. \033[92mKharej Client [3] Config\033[0m")
    print("4. \033[93mKharej Client [4] Config\033[0m")
    print("5. \033[92mKharej Client [5] Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("6. \033[96mIRAN Server Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguard_gre6tapnsec_kharej_client1()
            break
        elif server_type == "2":
            wireguard_gre6tapnsec_kharej_client2()
            break
        elif server_type == "3":
            wireguard_gre6tapnsec_kharej_client3()
            break
        elif server_type == "4":
            wireguard_gre6tapnsec_kharej_client4()
            break
        elif server_type == "5":
            wireguard_gre6tapnsec_kharej_client5()
            break
        elif server_type == "6":
            wireguard_gre6tapnsec_iran_server()
            break
        elif server_type == "0":
            os.system("clear")
            gre6tap_wireguard_sec_edit_local()
            break
        else:
            print("Invalid choice.")


def wireguard_gre6tapnsec_iran_server():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mGre6tap[native] + Wireguard + IPSEC \033[92m[1]IRAN Server\033[96m [5]Kharej Client\033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mIRAN Server Config [1] \033[0m")
    print("2. \033[92mIRAN Server Config [2]\033[0m")
    print("3. \033[93mIRAN Server Config [3]\033[0m")
    print("4. \033[92mIRAN Server Config [4]\033[0m")
    print("5. \033[92mIRAN Server Config [5]\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguard_gre6tapnsec_iranconfig_1()
            break
        elif server_type == "2":
            wireguard_gre6tapnsec_iranconfig_2()
            break
        elif server_type == "3":
            wireguard_gre6tapnsec_iranconfig_3()
            break
        elif server_type == "4":
            wireguard_gre6tapnsec_iranconfig_4()
            break
        elif server_type == "5":
            wireguard_gre6tapnsec_iranconfig_5()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardedit_gre6tapsec_noconjuction_1iran_5kharej()
            break
        else:
            print("Invalid choice.")


def wireguardedit_gre6tapsec_noconjuction_kharej1_5iran():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mGre6tap[native] + Wireguard + IPSEC \033[92m[1]Kharej Server\033[96m [5]IRAN Client\033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mIRAN Client [1] Config\033[0m")
    print("2. \033[92mIRAN Client [2] Config\033[0m")
    print("3. \033[92mIRAN Client [3] Config\033[0m")
    print("4. \033[93mIRAN Client [4] Config\033[0m")
    print("5. \033[92mIRAN Client [5] Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("6. \033[96mKharej Server Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguard_gre6tapnsec_iran_client1()
            break
        elif server_type == "2":
            wireguard_gre6tapnsec_iran_client2()
            break
        elif server_type == "3":
            wireguard_gre6tapnsec_iran_client3()
            break
        elif server_type == "4":
            wireguard_gre6tapnsec_iran_client4()
            break
        elif server_type == "5":
            wireguard_gre6tapnsec_iran_client5()
            break
        elif server_type == "6":
            wireguard_gre6tapnsec_kharej_server()
            break
        elif server_type == "0":
            os.system("clear")
            gre6tap_wireguard_sec_edit_local()
            break
        else:
            print("Invalid choice.")


def wireguard_gre6tapnsec_kharej_server():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mGre6tap[native] + Wireguard + IPSEC \033[92m[1]Kharej Server\033[96m [5]IRAN Client\033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej Server Config [1] \033[0m")
    print("2. \033[92mKharej Server Config [2]\033[0m")
    print("3. \033[93mKharej Server Config [3]\033[0m")
    print("4. \033[92mKharej Server Config [4]\033[0m")
    print("5. \033[92mKharej Server Config [5]\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguard_gre6tapnsec_kharejconfig_1()
            break
        elif server_type == "2":
            wireguard_gre6tapnsec_kharejconfig_2()
            break
        elif server_type == "3":
            wireguard_gre6tapnsec_kharejconfig_3()
            break
        elif server_type == "4":
            wireguard_gre6tapnsec_kharejconfig_4()
            break
        elif server_type == "5":
            wireguard_gre6tapnsec_kharejconfig_5()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardedit_gre6tapsec_noconjuction_kharej1_5iran()
            break
        else:
            print("Invalid choice.")


# can be removed#
def update_ipsec_conf_wireguard_server1(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.readlines()

        start_idx, end_idx = None, None
        for i, line in enumerate(content):
            if line.strip() == "conn wireguard_server1":
                start_idx = i
            elif start_idx is not None and line.strip().startswith("conn "):
                end_idx = i
                break

        if start_idx is None:
            print("\033[91m'conn wireguard_server1' section not found\033[0m")
            return

        if end_idx is None:
            end_idx = len(content)

        section = content[start_idx:end_idx]

        ip_type = (
            "ipv6"
            if isinstance(ipaddress.ip_address(new_private_ip), ipaddress.IPv6Address)
            else "ipv4"
        )

        if ip_type == "ipv6":
            subnet = "/64"
        else:
            subnet = "/32"

        ip_parts = (
            new_private_ip.split(".")
            if ip_type == "ipv4"
            else new_private_ip.split(":")
        )
        if new_private_ip.endswith(".2") or new_private_ip.endswith(":2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ".".join(ip_parts) if ip_type == "ipv4" else ":".join(ip_parts)

        new_section = []
        for line in section:
            line = re.sub(
                r"leftsubnet=\S+", f"leftsubnet={new_private_ip}{subnet}", line
            )
            line = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", line)
            line = re.sub(r"right=\S+", f"right={counterpart_ip}", line)
            line = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}{subnet}", line
            )
            new_section.append(line)

        new_content = content[:start_idx] + new_section + content[end_idx:]

        with open(name, "w") as f:
            f.writelines(new_content)

        print(f"\033[92m'conn wireguard_server1' section updated successfully\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipsec_conf_wireguard_server2(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.readlines()

        start_idx, end_idx = None, None
        for i, line in enumerate(content):
            if line.strip() == "conn wireguard_server2":
                start_idx = i
            elif start_idx is not None and line.strip().startswith("conn "):
                end_idx = i
                break

        if start_idx is None:
            print("\033[91m'conn wireguard_server2' section not found\033[0m")
            return

        if end_idx is None:
            end_idx = len(content)

        section = content[start_idx:end_idx]

        ip_type = (
            "ipv6"
            if isinstance(ipaddress.ip_address(new_private_ip), ipaddress.IPv6Address)
            else "ipv4"
        )

        if ip_type == "ipv6":
            subnet = "/64"
        else:
            subnet = "/32"

        ip_parts = (
            new_private_ip.split(".")
            if ip_type == "ipv4"
            else new_private_ip.split(":")
        )
        if new_private_ip.endswith(".2") or new_private_ip.endswith(":2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ".".join(ip_parts) if ip_type == "ipv4" else ":".join(ip_parts)

        new_section = []
        for line in section:
            line = re.sub(
                r"leftsubnet=\S+", f"leftsubnet={new_private_ip}{subnet}", line
            )
            line = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", line)
            line = re.sub(r"right=\S+", f"right={counterpart_ip}", line)
            line = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}{subnet}", line
            )
            new_section.append(line)

        new_content = content[:start_idx] + new_section + content[end_idx:]

        with open(name, "w") as f:
            f.writelines(new_content)

        print(f"\033[92m'conn wireguard_server2' section updated successfully\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipsec_conf_wireguard_server3(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.readlines()

        start_idx, end_idx = None, None
        for i, line in enumerate(content):
            if line.strip() == "conn wireguard_server3":
                start_idx = i
            elif start_idx is not None and line.strip().startswith("conn "):
                end_idx = i
                break

        if start_idx is None:
            print("\033[91m'conn wireguard_server3' section not found\033[0m")
            return

        if end_idx is None:
            end_idx = len(content)

        section = content[start_idx:end_idx]

        ip_type = (
            "ipv6"
            if isinstance(ipaddress.ip_address(new_private_ip), ipaddress.IPv6Address)
            else "ipv4"
        )

        if ip_type == "ipv6":
            subnet = "/64"
        else:
            subnet = "/32"

        ip_parts = (
            new_private_ip.split(".")
            if ip_type == "ipv4"
            else new_private_ip.split(":")
        )
        if new_private_ip.endswith(".2") or new_private_ip.endswith(":2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ".".join(ip_parts) if ip_type == "ipv4" else ":".join(ip_parts)

        new_section = []
        for line in section:
            line = re.sub(
                r"leftsubnet=\S+", f"leftsubnet={new_private_ip}{subnet}", line
            )
            line = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", line)
            line = re.sub(r"right=\S+", f"right={counterpart_ip}", line)
            line = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}{subnet}", line
            )
            new_section.append(line)

        new_content = content[:start_idx] + new_section + content[end_idx:]

        with open(name, "w") as f:
            f.writelines(new_content)

        print(f"\033[92m'conn wireguard_server3' section updated successfully\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipsec_conf_wireguard_server4(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.readlines()

        start_idx, end_idx = None, None
        for i, line in enumerate(content):
            if line.strip() == "conn wireguard_server4":
                start_idx = i
            elif start_idx is not None and line.strip().startswith("conn "):
                end_idx = i
                break

        if start_idx is None:
            print("\033[91m'conn wireguard_server4' section not found\033[0m")
            return

        if end_idx is None:
            end_idx = len(content)

        section = content[start_idx:end_idx]

        ip_type = (
            "ipv6"
            if isinstance(ipaddress.ip_address(new_private_ip), ipaddress.IPv6Address)
            else "ipv4"
        )

        if ip_type == "ipv6":
            subnet = "/64"
        else:
            subnet = "/32"

        ip_parts = (
            new_private_ip.split(".")
            if ip_type == "ipv4"
            else new_private_ip.split(":")
        )
        if new_private_ip.endswith(".2") or new_private_ip.endswith(":2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ".".join(ip_parts) if ip_type == "ipv4" else ":".join(ip_parts)

        new_section = []
        for line in section:
            line = re.sub(
                r"leftsubnet=\S+", f"leftsubnet={new_private_ip}{subnet}", line
            )
            line = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", line)
            line = re.sub(r"right=\S+", f"right={counterpart_ip}", line)
            line = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}{subnet}", line
            )
            new_section.append(line)

        new_content = content[:start_idx] + new_section + content[end_idx:]

        with open(name, "w") as f:
            f.writelines(new_content)

        print(f"\033[92m'conn wireguard_server4' section updated successfully\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipsec_conf_wireguard_server5(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.readlines()

        start_idx, end_idx = None, None
        for i, line in enumerate(content):
            if line.strip() == "conn wireguard_server5":
                start_idx = i
            elif start_idx is not None and line.strip().startswith("conn "):
                end_idx = i
                break

        if start_idx is None:
            print("\033[91m'conn wireguard_server5' section not found\033[0m")
            return

        if end_idx is None:
            end_idx = len(content)

        section = content[start_idx:end_idx]

        ip_type = (
            "ipv6"
            if isinstance(ipaddress.ip_address(new_private_ip), ipaddress.IPv6Address)
            else "ipv4"
        )

        if ip_type == "ipv6":
            subnet = "/64"
        else:
            subnet = "/32"

        ip_parts = (
            new_private_ip.split(".")
            if ip_type == "ipv4"
            else new_private_ip.split(":")
        )
        if new_private_ip.endswith(".2") or new_private_ip.endswith(":2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ".".join(ip_parts) if ip_type == "ipv4" else ":".join(ip_parts)

        new_section = []
        for line in section:
            line = re.sub(
                r"leftsubnet=\S+", f"leftsubnet={new_private_ip}{subnet}", line
            )
            line = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", line)
            line = re.sub(r"right=\S+", f"right={counterpart_ip}", line)
            line = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}{subnet}", line
            )
            new_section.append(line)

        new_content = content[:start_idx] + new_section + content[end_idx:]

        with open(name, "w") as f:
            f.writelines(new_content)

        print(f"\033[92m'conn wireguard_server5' section updated successfully\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipsec_conf_wireguard_46sec(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.read()

        ip_obj = ipaddress.ip_address(new_private_ip)
        if isinstance(ip_obj, ipaddress.IPv6Address):
            ip_parts = new_private_ip.split(":")
            subnet_suffix = "/64"
        else:
            ip_parts = new_private_ip.split(".")
            subnet_suffix = "/32"

        ip_parts[-1] = "1" if ip_parts[-1].endswith("2") else "2"
        counterpart_ip = (
            ":".join(ip_parts)
            if isinstance(ip_obj, ipaddress.IPv6Address)
            else ".".join(ip_parts)
        )

        new_content = re.sub(
            r"leftsubnet=\S+", f"leftsubnet={new_private_ip}{subnet_suffix}", content
        )
        new_content = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", new_content)
        new_content = re.sub(r"right=\S+", f"right={counterpart_ip}", new_content)
        new_content = re.sub(
            r"rightsubnet=\S+",
            f"rightsubnet={counterpart_ip}{subnet_suffix}",
            new_content,
        )

        with open(name, "w") as f:
            f.write(new_content)

        print("\033[92mIPsec configuration updated successfully!\033[0m")

    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mOut of ordinary error: {e}\033[0m")


def update_ipsecsecret_wire(name, new_secret):
    try:
        with open(name, "r") as f:
            content = f.read()

        new_content = re.sub(r'PSK "\S+"', f'PSK "{new_secret}"', content)

        with open(name, "w") as f:
            f.write(new_content)

        display_checkmark("\033[92mIPsec secret key updated successfully!\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mOut of ordinary error: {e}\033[0m")


def ipsecsecret_key_wire(name):
    try:
        with open(name, "r") as f:
            content = f.read()
        match = re.search(r'PSK "(\S+)"', content)
        if match:
            return match.group(1)
        else:
            print("\033[91mNo IPsec key found\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mOut of ordinary error: {e}\033[0m")
    return None


def display_ipsecsecret_wire(secret_key):
    box_width = 50
    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")
    print(f"\033[93m Title:        \033[93m IPsec Secret Key\033[0m")
    print(f"\033[97m──────────────────────────────────────\033[0m")
    print(f"\033[93m IPsec Key:  \033[97m{secret_key}\033[0m")
    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


# can be removed#


def wireguard_gre6tapnsec_kharejconfig_1():
    local_ip_private = local_ip("/etc/gre61.sh")
    remote_ip_private = remote_ip("/etc/gre61.sh")
    private_ip_private = private_gre61("/etc/gre61.sh")
    config_path = "/etc/wireguard/wireserver1.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_kharej_server1(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m Kharej Server \033[96mConfig [1]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Client [1] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6.\033[94m Change IPsec Secret Key\033[0m")
        print("7. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [1]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec1(opposite_ip)
                update_ipsec_conf_wireguard_server1("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "7":
            save_stuff_gre61(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire1sec(config_path, new_config)
            update_ipsec_ip_multi(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tapsec_noconjuction_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapnsec_kharejconfig_2():
    local_ip_private = local_ip("/etc/gre62.sh")
    remote_ip_private = remote_ip("/etc/gre62.sh")
    private_ip_private = private_gre61("/etc/gre62.sh")
    config_path = "/etc/wireguard/wireserver2.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_kharej_server2(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m Kharej Server \033[96mConfig [2]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Client [2] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6.\033[94m Change IPsec Secret Key\033[0m")
        print("7. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [2]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec2(opposite_ip)
                update_ipsec_conf_wireguard_server2("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "7":
            save_stuff_gre62(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire2sec(config_path, new_config)
            update_ipsec_ip_multi2(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tapsec_noconjuction_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapnsec_kharejconfig_3():
    local_ip_private = local_ip("/etc/gre63.sh")
    remote_ip_private = remote_ip("/etc/gre63.sh")
    private_ip_private = private_gre61("/etc/gre63.sh")
    config_path = "/etc/wireguard/wireserver3.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_kharej_server3(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m Kharej Server \033[96mConfig [3]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Client [3] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6.\033[94m Change IPsec Secret Key\033[0m")
        print("7. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [3]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec3(opposite_ip)
                update_ipsec_conf_wireguard_server3("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "7":
            save_stuff_gre63(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire3sec(config_path, new_config)
            update_ipsec_ip_multi3(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tapsec_noconjuction_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapnsec_kharejconfig_4():
    local_ip_private = local_ip("/etc/gre64.sh")
    remote_ip_private = remote_ip("/etc/gre64.sh")
    private_ip_private = private_gre61("/etc/gre64.sh")
    config_path = "/etc/wireguard/wireserver4.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_kharej_server4(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m Kharej Server \033[96mConfig [4]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Client [4] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6.\033[94m Change IPsec Secret Key\033[0m")
        print("7. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [4]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec4(opposite_ip)
                update_ipsec_conf_wireguard_server4("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "7":
            save_stuff_gre64(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire4sec(config_path, new_config)
            update_ipsec_ip_multi4(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tapsec_noconjuction_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapnsec_kharejconfig_5():
    local_ip_private = local_ip("/etc/gre65.sh")
    remote_ip_private = remote_ip("/etc/gre65.sh")
    private_ip_private = private_gre61("/etc/gre65.sh")
    config_path = "/etc/wireguard/wireserver5.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_kharej_server5(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m Kharej Server \033[96mConfig [5]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Client [5] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6.\033[94m Change IPsec Secret Key\033[0m")
        print("7. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [5]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec5(opposite_ip)
                update_ipsec_conf_wireguard_server5("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "7":
            save_stuff_gre64(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire5sec(config_path, new_config)
            update_ipsec_ip_multi5(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tapsec_noconjuction_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapnsec_iran_client1():
    local_ip_private = local_ip("/etc/gre61.sh")
    remote_ip_private = remote_ip("/etc/gre61.sh")
    private_ip_private = private_gre61("/etc/gre61.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_iran_client1(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m IRAN Client \033[96m[1]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Client [1]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6.\033[94m Change IPsec Secret Key\033[0m")
        print("7. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [1]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
                update_ipsec_conf_wireguard_46sec("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "7":
            save_stuff_gre61(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            update_ipsec_ip(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tapsec_noconjuction_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapnsec_iran_client2():
    local_ip_private = local_ip("/etc/gre62.sh")
    remote_ip_private = remote_ip("/etc/gre62.sh")
    private_ip_private = private_gre61("/etc/gre62.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_iran_client2(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m IRAN Client \033[96m[2]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Client [2]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6.\033[94m Change IPsec Secret Key\033[0m")
        print("7. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [2]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
                update_ipsec_conf_wireguard_46sec("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "7":
            save_stuff_gre62(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            update_ipsec_ip(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tapsec_noconjuction_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapnsec_iran_client3():
    local_ip_private = local_ip("/etc/gre63.sh")
    remote_ip_private = remote_ip("/etc/gre63.sh")
    private_ip_private = private_gre61("/etc/gre63.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_iran_client3(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m IRAN Client \033[96m[3]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Client [3]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6.\033[94m Change IPsec Secret Key\033[0m")
        print("7. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [3]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
                update_ipsec_conf_wireguard_46sec("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "7":
            save_stuff_gre63(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            update_ipsec_ip(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tapsec_noconjuction_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapnsec_iran_client4():
    local_ip_private = local_ip("/etc/gre64.sh")
    remote_ip_private = remote_ip("/etc/gre64.sh")
    private_ip_private = private_gre61("/etc/gre64.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_iran_client4(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m IRAN Client \033[96m[4]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Client [4]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6.\033[94m Change IPsec Secret Key\033[0m")
        print("7. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [4]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
                update_ipsec_conf_wireguard_46sec("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "7":
            save_stuff_gre64(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            update_ipsec_ip(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tapsec_noconjuction_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapnsec_iran_client4():
    local_ip_private = local_ip("/etc/gre64.sh")
    remote_ip_private = remote_ip("/etc/gre64.sh")
    private_ip_private = private_gre61("/etc/gre64.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_iran_client4(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m IRAN Client \033[96m[4]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Client [4]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6.\033[94m Change IPsec Secret Key\033[0m")
        print("7. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [4]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
                update_ipsec_conf_wireguard_46sec("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "7":
            save_stuff_gre64(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            update_ipsec_ip(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tapsec_noconjuction_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapnsec_iran_client5():
    local_ip_private = local_ip("/etc/gre65.sh")
    remote_ip_private = remote_ip("/etc/gre65.sh")
    private_ip_private = private_gre61("/etc/gre65.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_iran_client5(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m IRAN Client \033[96m[5]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Client [5]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6.\033[94m Change IPsec Secret Key\033[0m")
        print("7. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [5]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
                update_ipsec_conf_wireguard_46sec("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "7":
            save_stuff_gre65(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            update_ipsec_ip(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tapsec_noconjuction_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


# I iran 5 kharej client
def wireguard_gre6tapnsec_iranconfig_1():
    local_ip_private = local_ip("/etc/gre61.sh")
    remote_ip_private = remote_ip("/etc/gre61.sh")
    private_ip_private = private_gre61("/etc/gre61.sh")
    config_path = "/etc/wireguard/wireserver1.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_iran1(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m IRAN Server \033[96mConfig [1]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Client [1] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6.\033[94m Change IPsec Secret Key\033[0m")
        print("7. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [1]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec1(opposite_ip)
                update_ipsec_conf_wireguard_server1("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "7":
            save_stuff_gre61(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire1sec(config_path, new_config)
            update_ipsec_ip_multi(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tapsec_noconjuction_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapnsec_iranconfig_2():
    local_ip_private = local_ip("/etc/gre62.sh")
    remote_ip_private = remote_ip("/etc/gre62.sh")
    private_ip_private = private_gre61("/etc/gre62.sh")
    config_path = "/etc/wireguard/wireserver2.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_iran2(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m IRAN Server \033[96mConfig [2]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Client [2] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6.\033[94m Change IPsec Secret Key\033[0m")
        print("7. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [2]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec2(opposite_ip)
                update_ipsec_conf_wireguard_server2("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "7":
            save_stuff_gre62(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire2sec(config_path, new_config)
            update_ipsec_ip_multi2(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tapsec_noconjuction_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapnsec_iranconfig_3():
    local_ip_private = local_ip("/etc/gre63.sh")
    remote_ip_private = remote_ip("/etc/gre63.sh")
    private_ip_private = private_gre61("/etc/gre63.sh")
    config_path = "/etc/wireguard/wireserver3.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_iran3(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m IRAN Server \033[96mConfig [3]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Client [3] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6.\033[94m Change IPsec Secret Key\033[0m")
        print("7. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [3]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec3(opposite_ip)
                update_ipsec_conf_wireguard_server3("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "7":
            save_stuff_gre63(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire3sec(config_path, new_config)
            update_ipsec_ip_multi3(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tapsec_noconjuction_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapnsec_iranconfig_4():
    local_ip_private = local_ip("/etc/gre64.sh")
    remote_ip_private = remote_ip("/etc/gre64.sh")
    private_ip_private = private_gre61("/etc/gre64.sh")
    config_path = "/etc/wireguard/wireserver4.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_iran4(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m IRAN Server \033[96mConfig [4]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Client [4] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6.\033[94m Change IPsec Secret Key\033[0m")
        print("7. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [4]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec4(opposite_ip)
                update_ipsec_conf_wireguard_server4("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "7":
            save_stuff_gre64(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire4sec(config_path, new_config)
            update_ipsec_ip_multi4(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tapsec_noconjuction_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapnsec_iranconfig_5():
    local_ip_private = local_ip("/etc/gre65.sh")
    remote_ip_private = remote_ip("/etc/gre65.sh")
    private_ip_private = private_gre61("/etc/gre65.sh")
    config_path = "/etc/wireguard/wireserver5.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_iran5(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m IRAN Server \033[96mConfig [5]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Client [5] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6.\033[94m Change IPsec Secret Key\033[0m")
        print("7. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [5]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec5(opposite_ip)
                update_ipsec_conf_wireguard_server5("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "7":
            save_stuff_gre64(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire5sec(config_path, new_config)
            update_ipsec_ip_multi5(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tapsec_noconjuction_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapnsec_kharej_client1():
    local_ip_private = local_ip("/etc/gre61.sh")
    remote_ip_private = remote_ip("/etc/gre61.sh")
    private_ip_private = private_gre61("/etc/gre61.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_kharej1(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m Kharej Client \033[96m[1]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Client [1]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6.\033[94m Change IPsec Secret Key\033[0m")
        print("7. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [1]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
                update_ipsec_conf_wireguard_46sec("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "7":
            save_stuff_gre61(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            update_ipsec_ip(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tapsec_noconjuction_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapnsec_kharej_client2():
    local_ip_private = local_ip("/etc/gre62.sh")
    remote_ip_private = remote_ip("/etc/gre62.sh")
    private_ip_private = private_gre61("/etc/gre62.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_kharej2(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m Kharej Client \033[96m[2]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Client [2]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6.\033[94m Change IPsec Secret Key\033[0m")
        print("7. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [2]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
                update_ipsec_conf_wireguard_46sec("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "7":
            save_stuff_gre62(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            update_ipsec_ip(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tapsec_noconjuction_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapnsec_kharej_client3():
    local_ip_private = local_ip("/etc/gre63.sh")
    remote_ip_private = remote_ip("/etc/gre63.sh")
    private_ip_private = private_gre61("/etc/gre63.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_kharej3(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m Kharej Client \033[96m[3]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Client [3]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6.\033[94m Change IPsec Secret Key\033[0m")
        print("7. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [3]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
                update_ipsec_conf_wireguard_46sec("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "7":
            save_stuff_gre63(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            update_ipsec_ip(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tapsec_noconjuction_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapnsec_kharej_client4():
    local_ip_private = local_ip("/etc/gre64.sh")
    remote_ip_private = remote_ip("/etc/gre64.sh")
    private_ip_private = private_gre61("/etc/gre64.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_kharej4(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m Kharej Client \033[96m[4]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Client [4]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6.\033[94m Change IPsec Secret Key\033[0m")
        print("7. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [4]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
                update_ipsec_conf_wireguard_46sec("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "7":
            save_stuff_gre64(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            update_ipsec_ip(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tapsec_noconjuction_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapnsec_kharej_client5():
    local_ip_private = local_ip("/etc/gre65.sh")
    remote_ip_private = remote_ip("/etc/gre65.sh")
    private_ip_private = private_gre61("/etc/gre65.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_kharej5(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m Kharej Client \033[96m[5]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Client [5]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6.\033[94m Change IPsec Secret Key\033[0m")
        print("7. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [5]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
                update_ipsec_conf_wireguard_46sec("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "7":
            save_stuff_gre65(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            update_ipsec_ip(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tapsec_noconjuction_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguardsiteditserver_mnu():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard + SIT \033[93m Edit Menu\033[0m")
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mNo IPSEC\033[0m")
    print("2. \033[93mWith IPSEC\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardeditserver_nosec_sit_mnu()
            break
        elif server_type == "2":
            wireguardeditserver_sec_sit_mnu()
            break
        elif server_type == "0":
            os.system("clear")
            wireguard_edit_server()
            break
        else:
            print("Invalid choice.")


def wireguardeditserver_nosec_sit_mnu():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard + SIT \033[93m Edit Menu\033[0m")
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mWireguard + SIT - [1]Kharej Server [5]IRAN Clients\033[0m")
    print("2. \033[93mWireguard + SIT - [1]IRAN   Server [5]Kharej Clients\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardedit_noconjuction_sit_kharej1_5iran()
            break
        elif server_type == "2":
            wireguardedit_noconjuction_sit_1iran_5kharej()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardsiteditserver_mnu()
            break
        else:
            print("Invalid choice.")


def wireguardedit_noconjuction_sit_kharej1_5iran():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mWireguard + SIT \033[92m[1]Kharej Server\033[96m [5]IRAN Client\033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mIRAN Client [1] Config\033[0m")
    print("2. \033[92mIRAN Client [2] Config\033[0m")
    print("3. \033[92mIRAN Client [3] Config\033[0m")
    print("4. \033[93mIRAN Client [4] Config\033[0m")
    print("5. \033[92mIRAN Client [5] Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("6. \033[96mKharej Server Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardudp_sit_iran_client1()
            break
        elif server_type == "2":
            wireguardudp_sit_iran_client2()
            break
        elif server_type == "3":
            wireguardudp_sit_iran_client3()
            break
        elif server_type == "4":
            wireguardudp_sit_iran_client4()
            break
        elif server_type == "5":
            wireguardudp_sit_iran_client5()
            break
        elif server_type == "6":
            wireguardudpedit_sit_kharej_server()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardeditserver_nosec_sit_mnu()
            break
        else:
            print("Invalid choice.")


def wireguardudpedit_sit_kharej_server():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mWireguard + SIT \033[92m[1]Kharej Server\033[96m [5]IRAN Client\033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej Server Config [1] \033[0m")
    print("2. \033[92mKharej Server Config [2]\033[0m")
    print("3. \033[93mKharej Server Config [3]\033[0m")
    print("4. \033[92mKharej Server Config [4]\033[0m")
    print("5. \033[92mKharej Server Config [5]\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardedit_sit_kharejconfig_1()
            break
        elif server_type == "2":
            wireguardedit_sit_kharejconfig_2()
            break
        elif server_type == "3":
            wireguardedit_sit_kharejconfig_3()
            break
        elif server_type == "4":
            wireguardedit_sit_kharejconfig_4()
            break
        elif server_type == "5":
            wireguardedit_sit_kharejconfig_5()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardedit_noconjuction_sit_kharej1_5iran()
            break
        else:
            print("Invalid choice.")


def wireguardedit_noconjuction_sit_1iran_5kharej():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mWireguard + SIT \033[92m[1]IRAN Server\033[96m [5]Kharej Client\033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej Client [1] Config\033[0m")
    print("2. \033[92mKharej Client [2] Config\033[0m")
    print("3. \033[92mKharej Client [3] Config\033[0m")
    print("4. \033[93mKharej Client [4] Config\033[0m")
    print("5. \033[92mKharej Client [5] Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("6. \033[96mIRAN Server Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardudp_sit_kharej_client1()
            break
        elif server_type == "2":
            wireguardudp_sit_kharej_client2()
            break
        elif server_type == "3":
            wireguardudp_sit_kharej_client3()
            break
        elif server_type == "4":
            wireguardudp_sit_kharej_client4()
            break
        elif server_type == "5":
            wireguardudp_sit_kharej_client5()
            break
        elif server_type == "6":
            wireguardudpedit_sit_iran_server()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardeditserver_nosec_sit_mnu()
            break
        else:
            print("Invalid choice.")


def wireguardudpedit_sit_iran_server():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mWireguard + SIT \033[92m[1]IRAN Server\033[96m [5]Kharej Client\033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mIRAN Server Config [1] \033[0m")
    print("2. \033[92mIRAN Server Config [2]\033[0m")
    print("3. \033[93mIRAN Server Config [3]\033[0m")
    print("4. \033[92mIRAN Server Config [4]\033[0m")
    print("5. \033[92mIRAN Server Config [5]\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardedit_sit_iranconfig_1()
            break
        elif server_type == "2":
            wireguardedit_sit_iranconfig_2()
            break
        elif server_type == "3":
            wireguardedit_sit_iranconfig_3()
            break
        elif server_type == "4":
            wireguardedit_sit_iranconfig_4()
            break
        elif server_type == "5":
            wireguardedit_sit_iranconfig_5()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardedit_noconjuction_sit_1iran_5kharej()
            break
        else:
            print("Invalid choice.")
def wtb_opposite_ip_sitwire(ip):
    if ":" in ip:  # IPv6
        ip_parts = ip.split(":")
        ip_parts[-1] = "1" if ip_parts[-1] == "2" else "2"
        return ":".join(ip_parts)
    else:  # IPv4
        ip_parts = ip.split(".")
        ip_parts[-1] = "1" if ip_parts[-1] == "2" else "2"
        return ".".join(ip_parts)


def delete_ufw_rules(ip, port=None):
    counterpart_ip = wtb_opposite_ip_sitwire(ip)
    try:
        if port:
            subprocess.run(
                [
                    "sudo",
                    "ufw",
                    "delete",
                    "allow",
                    "from",
                    ip,
                    "to",
                    "any",
                    "port",
                    port,
                ],
                check=False,
            )
            subprocess.run(
                [
                    "sudo",
                    "ufw",
                    "delete",
                    "allow",
                    "from",
                    counterpart_ip,
                    "to",
                    "any",
                    "port",
                    port,
                ],
                check=False,
            )
        else:
            subprocess.run(["sudo", "ufw", "delete", "allow", "from", ip], check=False)
            subprocess.run(
                ["sudo", "ufw", "delete", "allow", "from", counterpart_ip], check=False
            )
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror deleting UFW rules: {e}\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def add_ufw_rules(ip, port=None):
    counterpart_ip = wtb_opposite_ip_sitwire(ip)
    try:
        if port:
            subprocess.run(
                ["sudo", "ufw", "allow", "from", ip, "to", "any", "port", port],
                check=True,
            )
            subprocess.run(
                [
                    "sudo",
                    "ufw",
                    "allow",
                    "from",
                    counterpart_ip,
                    "to",
                    "any",
                    "port",
                    port,
                ],
                check=True,
            )
        else:
            subprocess.run(["sudo", "ufw", "allow", "from", ip], check=True)
            subprocess.run(["sudo", "ufw", "allow", "from", counterpart_ip], check=True)
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror adding UFW rules: {e}\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def display_checkmark(message):
    print("\u2714 " + message)


def local_ip(name):
    try:
        with open(name, "r") as f:
            content = f.read()
        match = re.search(r"local (\S+)", content)
        if match:
            return match.group(1)
        else:
            print(f"\033[91mno local IP found\033[0m")
    except FileNotFoundError:
        print(f"file {name} doesn't exist")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    return None


def remote_ip(name):
    try:
        with open(name, "r") as f:
            content = f.read()
        match = re.search(r"remote (\S+)", content)
        if match:
            return match.group(1)
        else:
            print("\033[91mno remote IP found \033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    return None


def private_ip1(name):
    try:
        with open(name, "r") as f:
            content = f.read()
        match = re.search(r"ip (-6 )?addr add (\S+)/64 dev azumi?", content)
        if match:
            return match.group(2)
        else:
            print(f"\033[91mno private IP found\033[0m")
    except FileNotFoundError:
        print(f"file {name} doesn't exist")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    return None


def update_pingfile_sit(name, new_ip):
    try:
        with open(name, "r") as f:
            content = f.read()

        new_content = re.sub(r'ip_address="[^"]+"', f'ip_address="{new_ip}"', content)

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipfile_sit1(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi1",
                f"ip -6 addr add {new_ip}/64 dev azumi1",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi1",
                f"ip -6 route add {counterpart_ip}/64 dev azumi1",
                new_content,
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipfile_sit2(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi2",
                f"ip -6 addr add {new_ip}/64 dev azumi2",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi2",
                f"ip -6 route add {counterpart_ip}/64 dev azumi2",
                new_content,
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipfile_sit3(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi3",
                f"ip -6 addr add {new_ip}/64 dev azumi3",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi3",
                f"ip -6 route add {counterpart_ip}/64 dev azumi3",
                new_content,
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipfile_sit4(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi4",
                f"ip -6 addr add {new_ip}/64 dev azumi4",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi4",
                f"ip -6 route add {counterpart_ip}/64 dev azumi4",
                new_content,
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipfile_sit5(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi5",
                f"ip -6 addr add {new_ip}/64 dev azumi5",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi5",
                f"ip -6 route add {counterpart_ip}/64 dev azumi5",
                new_content,
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_sit1(private_ip, local_ip, remote_ip):
    current_ips = {"private": private_ip1("/etc/private1.sh")}
    current_ip = current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip_sitwire(private_ip)
    try:
        update_pingfile_sit("/etc/ping_v61.sh", counterpart_ip)
        update_ipfile_sit1("/etc/private1.sh", private_ip, update_type="private")
        update_ipfile_sit1("/etc/private1.sh", local_ip, update_type="local")
        update_ipfile_sit1("/etc/private1.sh", remote_ip, update_type="remote")

        interface = "azumi1"
        try:
            subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
            subprocess.run(["ip", "link", "delete", interface], check=True)
        except subprocess.CalledProcessError as e:
            print("\033[91merror bringing interface down or deleting it\033[0m")

        script = "/etc/private1.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("interface already exists, don't mind this")
        else:
            result.check_returncode()
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["systemctl", "restart", "ping_v61"], check=True)
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror applying network stuff\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_sit2(private_ip, local_ip, remote_ip):
    current_ips = {"private": private_ip1("/etc/private2.sh")}
    current_ip = current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip_sitwire(private_ip)
    try:
        update_pingfile_sit("/etc/ping_v62.sh", counterpart_ip)
        update_ipfile_sit2("/etc/private2.sh", private_ip, update_type="private")
        update_ipfile_sit2("/etc/private2.sh", local_ip, update_type="local")
        update_ipfile_sit2("/etc/private2.sh", remote_ip, update_type="remote")

        interface = "azumi2"
        try:
            subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
            subprocess.run(["ip", "link", "delete", interface], check=True)
        except subprocess.CalledProcessError as e:
            print("\033[91merror bringing interface down or deleting it\033[0m")

        script = "/etc/private2.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("interface already exists, don't mind this")
        else:
            result.check_returncode()
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["systemctl", "restart", "ping_v62"], check=True)
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror applying network stuff\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_sit3(private_ip, local_ip, remote_ip):
    current_ips = {"private": private_ip1("/etc/private3.sh")}
    current_ip = current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip_sitwire(private_ip)
    try:
        update_pingfile_sit("/etc/ping_v63.sh", counterpart_ip)
        update_ipfile_sit3("/etc/private3.sh", private_ip, update_type="private")
        update_ipfile_sit3("/etc/private3.sh", local_ip, update_type="local")
        update_ipfile_sit3("/etc/private3.sh", remote_ip, update_type="remote")

        interface = "azumi3"
        try:
            subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
            subprocess.run(["ip", "link", "delete", interface], check=True)
        except subprocess.CalledProcessError as e:
            print("\033[91merror bringing interface down or deleting it\033[0m")

        script = "/etc/private3.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("interface already exists, don't mind this")
        else:
            result.check_returncode()
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["systemctl", "restart", "ping_v63"], check=True)
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror applying network stuff\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_sit4(private_ip, local_ip, remote_ip):
    current_ips = {"private": private_ip1("/etc/private4.sh")}
    current_ip = current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip_sitwire(private_ip)
    try:
        update_pingfile_sit("/etc/ping_v64.sh", counterpart_ip)
        update_ipfile_sit4("/etc/private4.sh", private_ip, update_type="private")
        update_ipfile_sit4("/etc/private4.sh", local_ip, update_type="local")
        update_ipfile_sit4("/etc/private4.sh", remote_ip, update_type="remote")

        interface = "azumi4"
        try:
            subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
            subprocess.run(["ip", "link", "delete", interface], check=True)
        except subprocess.CalledProcessError as e:
            print("\033[91merror bringing interface down or deleting it\033[0m")

        script = "/etc/private4.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("interface already exists, don't mind this")
        else:
            result.check_returncode()
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["systemctl", "restart", "ping_v64"], check=True)
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror applying network stuff\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_sit5(private_ip, local_ip, remote_ip):
    current_ips = {"private": private_ip1("/etc/private5.sh")}
    current_ip = current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip_sitwire(private_ip)
    try:
        update_pingfile_sit("/etc/ping_v65.sh", counterpart_ip)
        update_ipfile_sit5("/etc/private5.sh", private_ip, update_type="private")
        update_ipfile_sit5("/etc/private5.sh", local_ip, update_type="local")
        update_ipfile_sit5("/etc/private5.sh", remote_ip, update_type="remote")

        interface = "azumi5"
        try:
            subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
            subprocess.run(["ip", "link", "delete", interface], check=True)
        except subprocess.CalledProcessError as e:
            print("\033[91merror bringing interface down or deleting it\033[0m")

        script = "/etc/private5.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("interface already exists, don't mind this")
        else:
            result.check_returncode()
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["systemctl", "restart", "ping_v65"], check=True)
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror applying network stuff\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def wtb_opposite_ip_wireguard(ip):
    return wtb_opposite_ip_sitwire(ip)


def load_wireguardconfig_sitwire(file_path):
    try:
        with open(file_path, "r") as file:
            content = file.read()

        address_match = re.search(r"Address = ([^\s]+)", content)
        listen_port_match = re.search(r"ListenPort = (\d+)", content)
        endpoint_match = re.search(r"Endpoint = ([^\s]+):\d+", content)
        allowed_ips_match = re.search(r"AllowedIPs = ([^\s]+)", content)

        address = address_match.group(1) if address_match else "N/A"
        listen_port = listen_port_match.group(1) if listen_port_match else "N/A"
        endpoint = endpoint_match.group(1) if endpoint_match else "N/A"
        allowed_ips = allowed_ips_match.group(1) if allowed_ips_match else "N/A"

        return address, address.split("/")[0], listen_port, endpoint, allowed_ips
    except FileNotFoundError:
        print("\033[91mWireguard configuration file not found.\033[0m")
        return None, None, None, None, None
    except Exception as e:
        print(f"\033[91mAn error occurred: {e}\033[0m")
        return None, None, None, None, None


def save_wireguardconfig_sitwire1(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+):\d+"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )
        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )
        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )

        def replace_endpoint(match):
            endpoint_ip = new_config["EndpointIP"]
            return f'Endpoint = {endpoint_ip}:{new_config["ListenPort"]}'

        new_config_content = re.sub(
            endpoint_pattern, replace_endpoint, new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)
        service_name = "wireguardping_1.service"
        service_status = subprocess.run(
            ["systemctl", "is-active", service_name],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if service_status.returncode != 0:
            print(f"\033[91mService {service_name} doesn't exist or is inactive\033[0m")

        subprocess.run(
            ["wg-quick", "down", "/etc/wireguard/wireserver1.conf"], check=True
        )
        subprocess.run(
            ["wg-quick", "up", "/etc/wireguard/wireserver1.conf"], check=True
        )

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in restating services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving da config: {e}\033[0m")


def save_wireguardconfig_sitwire2(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+):\d+"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )
        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )
        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )

        def replace_endpoint(match):
            endpoint_ip = new_config["EndpointIP"]
            return f'Endpoint = {endpoint_ip}:{new_config["ListenPort"]}'

        new_config_content = re.sub(
            endpoint_pattern, replace_endpoint, new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)
        service_name = "wireguardping_2.service"
        service_status = subprocess.run(
            ["systemctl", "is-active", service_name],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if service_status.returncode != 0:
            print(f"\033[91mService {service_name} doesn't exist or is inactive\033[0m")

        subprocess.run(
            ["wg-quick", "down", "/etc/wireguard/wireserver2.conf"], check=True
        )
        subprocess.run(
            ["wg-quick", "up", "/etc/wireguard/wireserver2.conf"], check=True
        )

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in restating services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving da config: {e}\033[0m")


def save_wireguardconfig_sitwire3(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+):\d+"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )
        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )
        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )

        def replace_endpoint(match):
            endpoint_ip = new_config["EndpointIP"]
            return f'Endpoint = {endpoint_ip}:{new_config["ListenPort"]}'

        new_config_content = re.sub(
            endpoint_pattern, replace_endpoint, new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)
        service_name = "wireguardping_3.service"
        service_status = subprocess.run(
            ["systemctl", "is-active", service_name],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if service_status.returncode != 0:
            print(f"\033[91mService {service_name} doesn't exist or is inactive\033[0m")

        subprocess.run(
            ["wg-quick", "down", "/etc/wireguard/wireserver3.conf"], check=True
        )
        subprocess.run(
            ["wg-quick", "up", "/etc/wireguard/wireserver3.conf"], check=True
        )

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in restating services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving da config: {e}\033[0m")


def save_wireguardconfig_sitwire4(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+):\d+"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )
        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )
        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )

        def replace_endpoint(match):
            endpoint_ip = new_config["EndpointIP"]
            return f'Endpoint = {endpoint_ip}:{new_config["ListenPort"]}'

        new_config_content = re.sub(
            endpoint_pattern, replace_endpoint, new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)
        service_name = "wireguardping_4.service"
        service_status = subprocess.run(
            ["systemctl", "is-active", service_name],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if service_status.returncode != 0:
            print(f"\033[91mService {service_name} doesn't exist or is inactive\033[0m")

        subprocess.run(
            ["wg-quick", "down", "/etc/wireguard/wireserver4.conf"], check=True
        )
        subprocess.run(
            ["wg-quick", "up", "/etc/wireguard/wireserver4.conf"], check=True
        )

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in restating services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving da config: {e}\033[0m")


def save_wireguardconfig_sitwire5(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+):\d+"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )
        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )
        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )

        def replace_endpoint(match):
            endpoint_ip = new_config["EndpointIP"]
            return f'Endpoint = {endpoint_ip}:{new_config["ListenPort"]}'

        new_config_content = re.sub(
            endpoint_pattern, replace_endpoint, new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)
        service_name = "wireguardping_5.service"
        service_status = subprocess.run(
            ["systemctl", "is-active", service_name],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if service_status.returncode != 0:
            print(f"\033[91mService {service_name} doesn't exist or is inactive\033[0m")

        subprocess.run(
            ["wg-quick", "down", "/etc/wireguard/wireserver5.conf"], check=True
        )
        subprocess.run(
            ["wg-quick", "up", "/etc/wireguard/wireserver5.conf"], check=True
        )

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in restating services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving da config: {e}\033[0m")


def save_wireguardconfig_sitwire_client(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+):\d+"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )
        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )
        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )

        def replace_endpoint(match):
            endpoint_ip = new_config["EndpointIP"]
            return f'Endpoint = {endpoint_ip}:{new_config["ListenPort"]}'

        new_config_content = re.sub(
            endpoint_pattern, replace_endpoint, new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)
        service_name = "wireguardping.service"
        service_status = subprocess.run(
            ["systemctl", "is-active", service_name],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if service_status.returncode != 0:
            print(f"\033[91mService {service_name} doesn't exist or is inactive\033[0m")

        subprocess.run(
            ["wg-quick", "down", "/etc/wireguard/wireclient.conf"], check=True
        )
        subprocess.run(["wg-quick", "up", "/etc/wireguard/wireclient.conf"], check=True)

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in restating services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving da config: {e}\033[0m")


def update_ufw_ruleswireguard(old_ip, new_ip, old_port=None, new_port=None):
    if old_port:
        delete_ufw_rules(old_ip, old_port)
        delete_ufw_rules(wtb_opposite_ip_wireguard(old_ip), old_port)
    add_ufw_rules(new_ip, new_port)
    add_ufw_rules(wtb_opposite_ip_wireguard(new_ip), new_port)


def update_ping_script_opposite_ip_wirenosec_client(new_opposite_ip):
    script_path = "/etc/ping_wireguard.sh"
    try:
        with open(script_path, "r") as f:
            script_content = f.read()

        updated_script_content = re.sub(
            r'ip_address="[^"]+"', f'ip_address="{new_opposite_ip}"', script_content
        )

        with open(script_path, "w") as f:
            f.write(updated_script_content)

        display_checkmark(
            "\033[92mPing script updated with new opposite IP address!\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mPing script {script_path} not found.\033[0m")
    except Exception as e:
        print(f"\033[91mError updating ping script: {e}\033[0m")


def update_ping_script_opposite_ip_wirenosec1(new_opposite_ip):
    script_path = "/etc/ping_wireguard_1.sh"
    try:
        with open(script_path, "r") as f:
            script_content = f.read()

        updated_script_content = re.sub(
            r'ip_address="[^"]+"', f'ip_address="{new_opposite_ip}"', script_content
        )

        with open(script_path, "w") as f:
            f.write(updated_script_content)

        display_checkmark(
            "\033[92mPing script updated with new opposite IP address!\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mPing script {script_path} not found.\033[0m")
    except Exception as e:
        print(f"\033[91mError updating ping script: {e}\033[0m")


def update_ping_script_opposite_ip_wirenosec2(new_opposite_ip):
    script_path = "/etc/ping_wireguard_2.sh"
    try:
        with open(script_path, "r") as f:
            script_content = f.read()

        updated_script_content = re.sub(
            r'ip_address="[^"]+"', f'ip_address="{new_opposite_ip}"', script_content
        )

        with open(script_path, "w") as f:
            f.write(updated_script_content)

        display_checkmark(
            "\033[92mPing script updated with new opposite IP address!\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mPing script {script_path} not found.\033[0m")
    except Exception as e:
        print(f"\033[91mError updating ping script: {e}\033[0m")


def update_ping_script_opposite_ip_wirenosec3(new_opposite_ip):
    script_path = "/etc/ping_wireguard_3.sh"
    try:
        with open(script_path, "r") as f:
            script_content = f.read()

        updated_script_content = re.sub(
            r'ip_address="[^"]+"', f'ip_address="{new_opposite_ip}"', script_content
        )

        with open(script_path, "w") as f:
            f.write(updated_script_content)

        display_checkmark(
            "\033[92mPing script updated with new opposite IP address!\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mPing script {script_path} not found.\033[0m")
    except Exception as e:
        print(f"\033[91mError updating ping script: {e}\033[0m")


def update_ping_script_opposite_ip_wirenosec4(new_opposite_ip):
    script_path = "/etc/ping_wireguard_4.sh"
    try:
        with open(script_path, "r") as f:
            script_content = f.read()

        updated_script_content = re.sub(
            r'ip_address="[^"]+"', f'ip_address="{new_opposite_ip}"', script_content
        )

        with open(script_path, "w") as f:
            f.write(updated_script_content)

        display_checkmark(
            "\033[92mPing script updated with new opposite IP address!\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mPing script {script_path} not found.\033[0m")
    except Exception as e:
        print(f"\033[91mError updating ping script: {e}\033[0m")


def update_ping_script_opposite_ip_wirenosec5(new_opposite_ip):
    script_path = "/etc/ping_wireguard_5.sh"
    try:
        with open(script_path, "r") as f:
            script_content = f.read()

        updated_script_content = re.sub(
            r'ip_address="[^"]+"', f'ip_address="{new_opposite_ip}"', script_content
        )

        with open(script_path, "w") as f:
            f.write(updated_script_content)

        display_checkmark(
            "\033[92mPing script updated with new opposite IP address!\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mPing script {script_path} not found.\033[0m")
    except Exception as e:
        print(f"\033[91mError updating ping script: {e}\033[0m")


def display_stuff_sitwire_privateiran1(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[93mIRAN Public IP:         \033[97m{local_ip}\033[0m",
        f"\033[92mKharej \033[96m[1]\033[92m Public IP:   \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_sitwire_privateiran2(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[93mIRAN Public IP:         \033[97m{local_ip}\033[0m",
        f"\033[92mKharej \033[96m[2]\033[92m Public IP:   \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_sitwire_privateiran3(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[93mIRAN Public IP:         \033[97m{local_ip}\033[0m",
        f"\033[92mKharej \033[96m[3]\033[92m Public IP:   \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_sitwire_privateiran4(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[93mIRAN Public IP:         \033[97m{local_ip}\033[0m",
        f"\033[92mKharej \033[96m[4]\033[92m Public IP:   \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_sitwire_privateiran5(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[93mIRAN Public IP:         \033[97m{local_ip}\033[0m",
        f"\033[92mKharej \033[96m[5]\033[92m Public IP:   \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_sitwire_privatekharej1(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej \033[96m[1]\033[92m Public IP:   \033[97m{local_ip}\033[0m",
        f"\033[93mIRAN Public IP:         \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_sitwire_privatekharej2(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej \033[96m[2]\033[92m Public IP:   \033[97m{local_ip}\033[0m",
        f"\033[93mIRAN Public IP:         \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_sitwire_privatekharej3(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej \033[96m[3]\033[92m Public IP:   \033[97m{local_ip}\033[0m",
        f"\033[93mIRAN Public IP:         \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_sitwire_privatekharej4(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej \033[96m[4]\033[92m Public IP:   \033[97m{local_ip}\033[0m",
        f"\033[93mIRAN Public IP:         \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_sitwire_privatekharej5(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej \033[96m[5]\033[92m Public IP:   \033[97m{local_ip}\033[0m",
        f"\033[93mIRAN Public IP:         \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_wireguard_config_sitwire(
    address_no_subnet, listen_port, endpoint, allowed_ips
):
    lines = [
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[93mTitle:         Wireguard Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mAddress:           \033[97m{address_no_subnet}\033[0m",
        f"\033[92mListenPort:        \033[97m{listen_port}\033[0m",
        f"\033[92mEndpoint:          \033[97m{endpoint}\033[0m",
        f"\033[92mAllowedIPs:        \033[97m{allowed_ips}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def wireguardedit_sit_iranconfig_1():
    local_ip_private = local_ip("/etc/private1.sh")
    remote_ip_private = remote_ip("/etc/private1.sh")
    private_ip_private = private_ip1("/etc/private1.sh")
    config_path = "/etc/wireguard/wireserver1.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privateiran1(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m IRAN Server \033[96mConfig [1]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Client [1] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7. \033[92mSave All Stuff\033[0m")
        print("0. \033[97mback to the related menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [1]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec1(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "7":
            save_stuff_sit1(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire1(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sit_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguardedit_sit_iranconfig_2():
    local_ip_private = local_ip("/etc/private2.sh")
    remote_ip_private = remote_ip("/etc/private2.sh")
    private_ip_private = private_ip1("/etc/private2.sh")
    config_path = "/etc/wireguard/wireserver2.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privateiran2(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m IRAN Server \033[96mConfig [2]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Client [2] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7. \033[92mSave All Stuff\033[0m")
        print("0. \033[97mback to the related menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [2]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec2(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "7":
            save_stuff_sit2(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire2(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sit_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguardedit_sit_iranconfig_3():
    local_ip_private = local_ip("/etc/private3.sh")
    remote_ip_private = remote_ip("/etc/private3.sh")
    private_ip_private = private_ip1("/etc/private3.sh")
    config_path = "/etc/wireguard/wireserver3.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privateiran3(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m IRAN Server \033[96mConfig [3]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Client [3] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7. \033[92mSave All Stuff\033[0m")
        print("0. \033[97mback to the related menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [3]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec3(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "7":
            save_stuff_sit3(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire3(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sit_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguardedit_sit_iranconfig_4():
    local_ip_private = local_ip("/etc/private4.sh")
    remote_ip_private = remote_ip("/etc/private4.sh")
    private_ip_private = private_ip1("/etc/private4.sh")
    config_path = "/etc/wireguard/wireserver4.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privateiran4(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m IRAN Server \033[96mConfig [4]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Client [4] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7. \033[92mSave All Stuff\033[0m")
        print("0. \033[97mback to the related menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [4]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec4(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "7":
            save_stuff_sit4(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire4(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sit_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguardedit_sit_iranconfig_5():
    local_ip_private = local_ip("/etc/private5.sh")
    remote_ip_private = remote_ip("/etc/private5.sh")
    private_ip_private = private_ip1("/etc/private5.sh")
    config_path = "/etc/wireguard/wireserver5.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privateiran5(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m IRAN Server \033[96mConfig [5]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Client [5] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7. \033[92mSave All Stuff\033[0m")
        print("0. \033[97mback to the related menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [5]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec5(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "7":
            save_stuff_sit5(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire5(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sit_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguardudp_sit_kharej_client1():
    local_ip_private = local_ip("/etc/private1.sh")
    remote_ip_private = remote_ip("/etc/private1.sh")
    private_ip_private = private_ip1("/etc/private1.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privatekharej1(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m Kharej Client \033[96m[1]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Client [1]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Server\033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7. \033[92mSave All Stuff\033[0m")
        print("0. \033[97mback to the related menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [1]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "7":
            save_stuff_sit1(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire_client(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sit_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguardudp_sit_kharej_client2():
    local_ip_private = local_ip("/etc/private2.sh")
    remote_ip_private = remote_ip("/etc/private2.sh")
    private_ip_private = private_ip1("/etc/private2.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privatekharej2(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m Kharej Client \033[96m[2]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Client [2]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Server\033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7. \033[92mSave All Stuff\033[0m")
        print("0. \033[97mback to the related menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [2]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "7":
            save_stuff_sit2(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire_client(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sit_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguardudp_sit_kharej_client3():
    local_ip_private = local_ip("/etc/private3.sh")
    remote_ip_private = remote_ip("/etc/private3.sh")
    private_ip_private = private_ip1("/etc/private3.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privatekharej3(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m Kharej Client \033[96m[3]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Client [3]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Server\033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7. \033[92mSave All Stuff\033[0m")
        print("0. \033[97mback to the related menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [3]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "7":
            save_stuff_sit3(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire_client(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sit_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguardudp_sit_kharej_client4():
    local_ip_private = local_ip("/etc/private4.sh")
    remote_ip_private = remote_ip("/etc/private4.sh")
    private_ip_private = private_ip1("/etc/private4.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privatekharej4(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m Kharej Client \033[96m[4]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Client [4]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Server\033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7. \033[92mSave All Stuff\033[0m")
        print("0. \033[97mback to the related menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [4]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "7":
            save_stuff_sit4(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire_client(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sit_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguardudp_sit_kharej_client5():
    local_ip_private = local_ip("/etc/private5.sh")
    remote_ip_private = remote_ip("/etc/private5.sh")
    private_ip_private = private_ip1("/etc/private5.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privatekharej5(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m Kharej Client \033[96m[5]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Client [5]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Server\033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7. \033[92mSave All Stuff\033[0m")
        print("0. \033[97mback to the related menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [5]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "7":
            save_stuff_sit5(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire_client(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sit_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def display_stuff_sitwire_privateiran_client1(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[93mIRAN \033[96m[1] Public IP:         \033[97m{local_ip}\033[0m",
        f"\033[92mKharej Public IP:   \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_sitwire_privateiran_client2(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[93mIRAN \033[96m[2] Public IP:         \033[97m{local_ip}\033[0m",
        f"\033[92mKharej Public IP:   \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_sitwire_privateiran_client3(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[93mIRAN \033[96m[3] Public IP:         \033[97m{local_ip}\033[0m",
        f"\033[92mKharej Public IP:   \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_sitwire_privateiran_client4(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[93mIRAN \033[96m[4] Public IP:         \033[97m{local_ip}\033[0m",
        f"\033[92mKharej Public IP:   \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_sitwire_privateiran_client5(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[93mIRAN \033[96m[5] Public IP:         \033[97m{local_ip}\033[0m",
        f"\033[92mKharej Public IP:   \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_sitwire_privatekharej_server1(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej Public IP:   \033[97m{local_ip}\033[0m",
        f"\033[93mIRAN \033[96m[1]\033[93m Public IP:         \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_sitwire_privatekharej_server2(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej Public IP:   \033[97m{local_ip}\033[0m",
        f"\033[93mIRAN \033[96m[2]\033[93m Public IP:         \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_sitwire_privatekharej_server3(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej Public IP:   \033[97m{local_ip}\033[0m",
        f"\033[93mIRAN \033[96m[3]\033[93m Public IP:         \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_sitwire_privatekharej_server4(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej Public IP:   \033[97m{local_ip}\033[0m",
        f"\033[93mIRAN \033[96m[4]\033[93m Public IP:         \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_sitwire_privatekharej_server5(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej Public IP:   \033[97m{local_ip}\033[0m",
        f"\033[93mIRAN \033[96m[5]\033[93m Public IP:         \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def wireguardedit_sit_kharejconfig_1():
    local_ip_private = local_ip("/etc/private1.sh")
    remote_ip_private = remote_ip("/etc/private1.sh")
    private_ip_private = private_ip1("/etc/private1.sh")
    config_path = "/etc/wireguard/wireserver1.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privatekharej_server1(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m Kharej Server \033[96mConfig [1]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Client [1] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7. \033[92mSave All Stuff\033[0m")
        print("0. \033[97mback to the related menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [1]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec1(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "7":
            save_stuff_sit1(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire1(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sit_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguardedit_sit_kharejconfig_2():
    local_ip_private = local_ip("/etc/private2.sh")
    remote_ip_private = remote_ip("/etc/private2.sh")
    private_ip_private = private_ip1("/etc/private2.sh")
    config_path = "/etc/wireguard/wireserver2.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privatekharej_server2(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m Kharej Server \033[96mConfig [2]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Client [2] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7. \033[92mSave All Stuff\033[0m")
        print("0. \033[97mback to the related menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [2]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec2(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "7":
            save_stuff_sit2(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire2(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sit_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguardedit_sit_kharejconfig_3():
    local_ip_private = local_ip("/etc/private3.sh")
    remote_ip_private = remote_ip("/etc/private3.sh")
    private_ip_private = private_ip1("/etc/private3.sh")
    config_path = "/etc/wireguard/wireserver3.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privatekharej_server3(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m Kharej Server \033[96mConfig [3]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Client [3] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7. \033[92mSave All Stuff\033[0m")
        print("0. \033[97mback to the related menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [3]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec3(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "7":
            save_stuff_sit3(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire3(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sit_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguardedit_sit_kharejconfig_4():
    local_ip_private = local_ip("/etc/private4.sh")
    remote_ip_private = remote_ip("/etc/private4.sh")
    private_ip_private = private_ip1("/etc/private4.sh")
    config_path = "/etc/wireguard/wireserver4.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privatekharej_server4(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m Kharej Server \033[96mConfig [4]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Client [4] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7. \033[92mSave All Stuff\033[0m")
        print("0. \033[97mback to the related menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [4]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec4(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "7":
            save_stuff_sit4(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire4(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sit_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguardedit_sit_kharejconfig_5():
    local_ip_private = local_ip("/etc/private5.sh")
    remote_ip_private = remote_ip("/etc/private5.sh")
    private_ip_private = private_ip1("/etc/private5.sh")
    config_path = "/etc/wireguard/wireserver5.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privatekharej_server5(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m Kharej Server \033[96mConfig [5]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Client [5] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7. \033[92mSave All Stuff\033[0m")
        print("0. \033[97mback to the related menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [5]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec5(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "7":
            save_stuff_sit5(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire5(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sit_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")

def wireguardudp_sit_iran_client1():
    local_ip_private = local_ip("/etc/private1.sh")
    remote_ip_private = remote_ip("/etc/private1.sh")
    private_ip_private = private_ip1("/etc/private1.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privateiran_client1(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m IRAN Client \033[96m[1]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Client [1]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Server\033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7. \033[92mSave All Stuff\033[0m")
        print("0. \033[97mback to the related menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [1]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "7":
            save_stuff_sit1(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire_client(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sit_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguardudp_sit_iran_client2():
    local_ip_private = local_ip("/etc/private2.sh")
    remote_ip_private = remote_ip("/etc/private2.sh")
    private_ip_private = private_ip1("/etc/private2.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privateiran_client2(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m IRAN Client \033[96m[2]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Client [2]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Server\033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7. \033[92mSave All Stuff\033[0m")
        print("0. \033[97mback to the related menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [2]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "7":
            save_stuff_sit2(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire_client(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sit_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguardudp_sit_iran_client3():
    local_ip_private = local_ip("/etc/private3.sh")
    remote_ip_private = remote_ip("/etc/private3.sh")
    private_ip_private = private_ip1("/etc/private3.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privateiran_client3(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m IRAN Client \033[96m[3]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Client [3]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Server\033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7. \033[92mSave All Stuff\033[0m")
        print("0. \033[97mback to the related menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [3]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "7":
            save_stuff_sit3(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire_client(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sit_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguardudp_sit_iran_client4():
    local_ip_private = local_ip("/etc/private4.sh")
    remote_ip_private = remote_ip("/etc/private4.sh")
    private_ip_private = private_ip1("/etc/private4.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privateiran_client4(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m IRAN Client \033[96m[4]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Client [4]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Server\033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7. \033[92mSave All Stuff\033[0m")
        print("0. \033[97mback to the related menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [4]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "7":
            save_stuff_sit4(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire_client(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sit_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguardudp_sit_iran_client5():
    local_ip_private = local_ip("/etc/private5.sh")
    remote_ip_private = remote_ip("/etc/private5.sh")
    private_ip_private = private_ip1("/etc/private5.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privateiran_client5(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m IRAN Client \033[96m[5]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Client [5]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Server\033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7. \033[92mSave All Stuff\033[0m")
        print("0. \033[97mback to the related menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [5]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "7":
            save_stuff_sit5(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire_client(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sit_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


# ipsec
def wireguardeditserver_sec_sit_mnu():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard + SIT + IPSEC \033[93m Edit Menu\033[0m")
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print(
        "1. \033[92mWireguard + SIT + IPSEC - [1]Kharej Server [5]IRAN Clients\033[0m"
    )
    print(
        "2. \033[93mWireguard + SIT + IPSEC - [1]IRAN   Server [5]Kharej Clients\033[0m"
    )
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardedit_noconjuction_sitsec_kharej1_5iran()
            break
        elif server_type == "2":
            wireguardedit_noconjuction_sitsec_1iran_5kharej()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardsiteditserver_mnu()
            break
        else:
            print("Invalid choice.")


def wireguardedit_noconjuction_sitsec_kharej1_5iran():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mWireguard + SIT + IPSEC \033[92m[1]Kharej Server\033[96m [5]IRAN Client\033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mIRAN Client [1] Config\033[0m")
    print("2. \033[92mIRAN Client [2] Config\033[0m")
    print("3. \033[92mIRAN Client [3] Config\033[0m")
    print("4. \033[93mIRAN Client [4] Config\033[0m")
    print("5. \033[92mIRAN Client [5] Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("6. \033[96mKharej Server Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardudp_sitsec_iran_client1()
            break
        elif server_type == "2":
            wireguardudp_sitsec_iran_client2()
            break
        elif server_type == "3":
            wireguardudp_sitsec_iran_client3()
            break
        elif server_type == "4":
            wireguardudp_sitsec_iran_client4()
            break
        elif server_type == "5":
            wireguardudp_sitsec_iran_client5()
            break
        elif server_type == "6":
            wireguardudpedit_sitsec_kharej_server()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardeditserver_sec_sit_mnu()
            break
        else:
            print("Invalid choice.")


def wireguardudpedit_sitsec_kharej_server():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mWireguard + SIT + IPSEC \033[92m[1]Kharej Server\033[96m [5]IRAN Client\033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej Server Config [1] \033[0m")
    print("2. \033[92mKharej Server Config [2]\033[0m")
    print("3. \033[93mKharej Server Config [3]\033[0m")
    print("4. \033[92mKharej Server Config [4]\033[0m")
    print("5. \033[92mKharej Server Config [5]\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardedit_sitsec_kharejconfig_1()
            break
        elif server_type == "2":
            wireguardedit_sitsec_kharejconfig_2()
            break
        elif server_type == "3":
            wireguardedit_sitsec_kharejconfig_3()
            break
        elif server_type == "4":
            wireguardedit_sitsec_kharejconfig_4()
            break
        elif server_type == "5":
            wireguardedit_sitsec_kharejconfig_5()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardedit_noconjuction_sitsec_kharej1_5iran()
            break
        else:
            print("Invalid choice.")


def wireguardedit_noconjuction_sitsec_1iran_5kharej():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mWireguard + SIT + IPSEC \033[92m[1]IRAN Server\033[96m [5]Kharej Client\033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej Client [1] Config\033[0m")
    print("2. \033[92mKharej Client [2] Config\033[0m")
    print("3. \033[92mKharej Client [3] Config\033[0m")
    print("4. \033[93mKharej Client [4] Config\033[0m")
    print("5. \033[92mKharej Client [5] Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("6. \033[96mIRAN Server Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardudp_sitsec_kharej_client1()
            break
        elif server_type == "2":
            wireguardudp_sitsec_kharej_client2()
            break
        elif server_type == "3":
            wireguardudp_sitsec_kharej_client3()
            break
        elif server_type == "4":
            wireguardudp_sitsec_kharej_client4()
            break
        elif server_type == "5":
            wireguardudp_sitsec_kharej_client5()
            break
        elif server_type == "6":
            wireguardudpedit_sitsec_iran_server()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardeditserver_sec_sit_mnu()
            break
        else:
            print("Invalid choice.")


def wireguardudpedit_sitsec_iran_server():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mWireguard + SIT + IPSEC \033[92m[1]IRAN Server\033[96m [5]Kharej Client\033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mIRAN Server Config [1] \033[0m")
    print("2. \033[92mIRAN Server Config [2]\033[0m")
    print("3. \033[93mIRAN Server Config [3]\033[0m")
    print("4. \033[92mIRAN Server Config [4]\033[0m")
    print("5. \033[92mIRAN Server Config [5]\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardedit_sitsec_iranconfig_1()
            break
        elif server_type == "2":
            wireguardedit_sitsec_iranconfig_2()
            break
        elif server_type == "3":
            wireguardedit_sitsec_iranconfig_3()
            break
        elif server_type == "4":
            wireguardedit_sitsec_iranconfig_4()
            break
        elif server_type == "5":
            wireguardedit_sitsec_iranconfig_5()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardedit_noconjuction_sitsec_1iran_5kharej()
            break
        else:
            print("Invalid choice.")


def update_ipsec_conf_wireguard_server1(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.readlines()

        start_idx, end_idx = None, None
        for i, line in enumerate(content):
            if line.strip() == "conn wireguard_server1":
                start_idx = i
            elif start_idx is not None and line.strip().startswith("conn "):
                end_idx = i
                break

        if start_idx is None:
            print("\033[91m'conn wireguard_server1' section not found\033[0m")
            return

        if end_idx is None:
            end_idx = len(content)

        section = content[start_idx:end_idx]

        ip_type = (
            "ipv6"
            if isinstance(ipaddress.ip_address(new_private_ip), ipaddress.IPv6Address)
            else "ipv4"
        )

        if ip_type == "ipv6":
            subnet = "/64"
        else:
            subnet = "/32"

        ip_parts = (
            new_private_ip.split(".")
            if ip_type == "ipv4"
            else new_private_ip.split(":")
        )
        if new_private_ip.endswith(".2") or new_private_ip.endswith(":2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ".".join(ip_parts) if ip_type == "ipv4" else ":".join(ip_parts)

        new_section = []
        for line in section:
            line = re.sub(
                r"leftsubnet=\S+", f"leftsubnet={new_private_ip}{subnet}", line
            )
            line = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", line)
            line = re.sub(r"right=\S+", f"right={counterpart_ip}", line)
            line = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}{subnet}", line
            )
            new_section.append(line)

        new_content = content[:start_idx] + new_section + content[end_idx:]

        with open(name, "w") as f:
            f.writelines(new_content)

        print(f"\033[92m'conn wireguard_server1' section updated successfully\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipsec_conf_wireguard_server2(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.readlines()

        start_idx, end_idx = None, None
        for i, line in enumerate(content):
            if line.strip() == "conn wireguard_server2":
                start_idx = i
            elif start_idx is not None and line.strip().startswith("conn "):
                end_idx = i
                break

        if start_idx is None:
            print("\033[91m'conn wireguard_server2' section not found\033[0m")
            return

        if end_idx is None:
            end_idx = len(content)

        section = content[start_idx:end_idx]

        ip_type = (
            "ipv6"
            if isinstance(ipaddress.ip_address(new_private_ip), ipaddress.IPv6Address)
            else "ipv4"
        )

        if ip_type == "ipv6":
            subnet = "/64"
        else:
            subnet = "/32"

        ip_parts = (
            new_private_ip.split(".")
            if ip_type == "ipv4"
            else new_private_ip.split(":")
        )
        if new_private_ip.endswith(".2") or new_private_ip.endswith(":2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ".".join(ip_parts) if ip_type == "ipv4" else ":".join(ip_parts)

        new_section = []
        for line in section:
            line = re.sub(
                r"leftsubnet=\S+", f"leftsubnet={new_private_ip}{subnet}", line
            )
            line = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", line)
            line = re.sub(r"right=\S+", f"right={counterpart_ip}", line)
            line = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}{subnet}", line
            )
            new_section.append(line)

        new_content = content[:start_idx] + new_section + content[end_idx:]

        with open(name, "w") as f:
            f.writelines(new_content)

        print(f"\033[92m'conn wireguard_server2' section updated successfully\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipsec_conf_wireguard_server3(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.readlines()

        start_idx, end_idx = None, None
        for i, line in enumerate(content):
            if line.strip() == "conn wireguard_server3":
                start_idx = i
            elif start_idx is not None and line.strip().startswith("conn "):
                end_idx = i
                break

        if start_idx is None:
            print("\033[91m'conn wireguard_server3' section not found\033[0m")
            return

        if end_idx is None:
            end_idx = len(content)

        section = content[start_idx:end_idx]

        ip_type = (
            "ipv6"
            if isinstance(ipaddress.ip_address(new_private_ip), ipaddress.IPv6Address)
            else "ipv4"
        )

        if ip_type == "ipv6":
            subnet = "/64"
        else:
            subnet = "/32"

        ip_parts = (
            new_private_ip.split(".")
            if ip_type == "ipv4"
            else new_private_ip.split(":")
        )
        if new_private_ip.endswith(".2") or new_private_ip.endswith(":2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ".".join(ip_parts) if ip_type == "ipv4" else ":".join(ip_parts)

        new_section = []
        for line in section:
            line = re.sub(
                r"leftsubnet=\S+", f"leftsubnet={new_private_ip}{subnet}", line
            )
            line = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", line)
            line = re.sub(r"right=\S+", f"right={counterpart_ip}", line)
            line = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}{subnet}", line
            )
            new_section.append(line)

        new_content = content[:start_idx] + new_section + content[end_idx:]

        with open(name, "w") as f:
            f.writelines(new_content)

        print(f"\033[92m'conn wireguard_server3' section updated successfully\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipsec_conf_wireguard_server4(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.readlines()

        start_idx, end_idx = None, None
        for i, line in enumerate(content):
            if line.strip() == "conn wireguard_server4":
                start_idx = i
            elif start_idx is not None and line.strip().startswith("conn "):
                end_idx = i
                break

        if start_idx is None:
            print("\033[91m'conn wireguard_server4' section not found\033[0m")
            return

        if end_idx is None:
            end_idx = len(content)

        section = content[start_idx:end_idx]

        ip_type = (
            "ipv6"
            if isinstance(ipaddress.ip_address(new_private_ip), ipaddress.IPv6Address)
            else "ipv4"
        )

        if ip_type == "ipv6":
            subnet = "/64"
        else:
            subnet = "/32"

        ip_parts = (
            new_private_ip.split(".")
            if ip_type == "ipv4"
            else new_private_ip.split(":")
        )
        if new_private_ip.endswith(".2") or new_private_ip.endswith(":2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ".".join(ip_parts) if ip_type == "ipv4" else ":".join(ip_parts)

        new_section = []
        for line in section:
            line = re.sub(
                r"leftsubnet=\S+", f"leftsubnet={new_private_ip}{subnet}", line
            )
            line = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", line)
            line = re.sub(r"right=\S+", f"right={counterpart_ip}", line)
            line = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}{subnet}", line
            )
            new_section.append(line)

        new_content = content[:start_idx] + new_section + content[end_idx:]

        with open(name, "w") as f:
            f.writelines(new_content)

        print(f"\033[92m'conn wireguard_server4' section updated successfully\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipsec_conf_wireguard_server5(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.readlines()

        start_idx, end_idx = None, None
        for i, line in enumerate(content):
            if line.strip() == "conn wireguard_server5":
                start_idx = i
            elif start_idx is not None and line.strip().startswith("conn "):
                end_idx = i
                break

        if start_idx is None:
            print("\033[91m'conn wireguard_server5' section not found\033[0m")
            return

        if end_idx is None:
            end_idx = len(content)

        section = content[start_idx:end_idx]

        ip_type = (
            "ipv6"
            if isinstance(ipaddress.ip_address(new_private_ip), ipaddress.IPv6Address)
            else "ipv4"
        )

        if ip_type == "ipv6":
            subnet = "/64"
        else:
            subnet = "/32"

        ip_parts = (
            new_private_ip.split(".")
            if ip_type == "ipv4"
            else new_private_ip.split(":")
        )
        if new_private_ip.endswith(".2") or new_private_ip.endswith(":2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ".".join(ip_parts) if ip_type == "ipv4" else ":".join(ip_parts)

        new_section = []
        for line in section:
            line = re.sub(
                r"leftsubnet=\S+", f"leftsubnet={new_private_ip}{subnet}", line
            )
            line = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", line)
            line = re.sub(r"right=\S+", f"right={counterpart_ip}", line)
            line = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}{subnet}", line
            )
            new_section.append(line)

        new_content = content[:start_idx] + new_section + content[end_idx:]

        with open(name, "w") as f:
            f.writelines(new_content)

        print(f"\033[92m'conn wireguard_server5' section updated successfully\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_wireguardconfig_sitwire1sec(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+):\d+"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )
        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )
        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )

        def replace_endpoint(match):
            endpoint_ip = new_config["EndpointIP"]
            return f'Endpoint = {endpoint_ip}:{new_config["ListenPort"]}'

        new_config_content = re.sub(
            endpoint_pattern, replace_endpoint, new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)

        services_to_restart = [
            "strong-azumi1",
            "wireguardping_1.service",
        ]

        wg_quick_interface = "/etc/wireguard/wireserver1.conf"
        wg_quick_down = subprocess.run(
            ["wg-quick", "down", wg_quick_interface],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if wg_quick_down.returncode == 0:
            subprocess.run(["wg-quick", "up", wg_quick_interface], check=True)
            display_checkmark(
                f"\033[92mInterface {wg_quick_interface} brought down and up successfully!\033[0m"
            )
        else:
            print(
                f"\033[93mFailed to bring down interface {wg_quick_interface}.\033[0m"
            )

        for service_name in services_to_restart:
            service_status = subprocess.run(
                ["systemctl", "is-active", service_name],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
            )

            if service_status.returncode == 0:
                subprocess.run(["systemctl", "restart", service_name], check=True)
                display_checkmark(
                    f"\033[92mService {service_name} restarted successfully!\033[0m"
                )
            else:
                print(
                    f"\033[93mService {service_name} doesn't exist or is inactive.\033[0m"
                )

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in managing services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving the config: {e}\033[0m")


def save_wireguardconfig_sitwire2sec(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+):\d+"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )
        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )
        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )

        def replace_endpoint(match):
            endpoint_ip = new_config["EndpointIP"]
            return f'Endpoint = {endpoint_ip}:{new_config["ListenPort"]}'

        new_config_content = re.sub(
            endpoint_pattern, replace_endpoint, new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)

        services_to_restart = [
            "strong-azumi1",
            "wireguardping_2.service",
        ]

        wg_quick_interface = "/etc/wireguard/wireserver2.conf"
        wg_quick_down = subprocess.run(
            ["wg-quick", "down", wg_quick_interface],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if wg_quick_down.returncode == 0:
            subprocess.run(["wg-quick", "up", wg_quick_interface], check=True)
            display_checkmark(
                f"\033[92mInterface {wg_quick_interface} brought down and up successfully!\033[0m"
            )
        else:
            print(
                f"\033[93mFailed to bring down interface {wg_quick_interface}.\033[0m"
            )

        for service_name in services_to_restart:
            service_status = subprocess.run(
                ["systemctl", "is-active", service_name],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
            )

            if service_status.returncode == 0:
                subprocess.run(["systemctl", "restart", service_name], check=True)
                display_checkmark(
                    f"\033[92mService {service_name} restarted successfully!\033[0m"
                )
            else:
                print(
                    f"\033[93mService {service_name} doesn't exist or is inactive.\033[0m"
                )

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in managing services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving the config: {e}\033[0m")


def save_wireguardconfig_sitwire3sec(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+):\d+"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )
        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )
        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )

        def replace_endpoint(match):
            endpoint_ip = new_config["EndpointIP"]
            return f'Endpoint = {endpoint_ip}:{new_config["ListenPort"]}'

        new_config_content = re.sub(
            endpoint_pattern, replace_endpoint, new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)

        services_to_restart = [
            "strong-azumi1",
            "wireguardping_3.service",
        ]

        wg_quick_interface = "/etc/wireguard/wireserver3.conf"
        wg_quick_down = subprocess.run(
            ["wg-quick", "down", wg_quick_interface],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if wg_quick_down.returncode == 0:
            subprocess.run(["wg-quick", "up", wg_quick_interface], check=True)
            display_checkmark(
                f"\033[92mInterface {wg_quick_interface} brought down and up successfully!\033[0m"
            )
        else:
            print(
                f"\033[93mFailed to bring down interface {wg_quick_interface}.\033[0m"
            )

        for service_name in services_to_restart:
            service_status = subprocess.run(
                ["systemctl", "is-active", service_name],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
            )

            if service_status.returncode == 0:
                subprocess.run(["systemctl", "restart", service_name], check=True)
                display_checkmark(
                    f"\033[92mService {service_name} restarted successfully!\033[0m"
                )
            else:
                print(
                    f"\033[93mService {service_name} doesn't exist or is inactive.\033[0m"
                )

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in managing services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving the config: {e}\033[0m")


def save_wireguardconfig_sitwire4sec(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+):\d+"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )
        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )
        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )

        def replace_endpoint(match):
            endpoint_ip = new_config["EndpointIP"]
            return f'Endpoint = {endpoint_ip}:{new_config["ListenPort"]}'

        new_config_content = re.sub(
            endpoint_pattern, replace_endpoint, new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)

        services_to_restart = [
            "strong-azumi1",
            "wireguardping_4.service",
        ]

        wg_quick_interface = "/etc/wireguard/wireserver4.conf"
        wg_quick_down = subprocess.run(
            ["wg-quick", "down", wg_quick_interface],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if wg_quick_down.returncode == 0:
            subprocess.run(["wg-quick", "up", wg_quick_interface], check=True)
            display_checkmark(
                f"\033[92mInterface {wg_quick_interface} brought down and up successfully!\033[0m"
            )
        else:
            print(
                f"\033[93mFailed to bring down interface {wg_quick_interface}.\033[0m"
            )

        for service_name in services_to_restart:
            service_status = subprocess.run(
                ["systemctl", "is-active", service_name],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
            )

            if service_status.returncode == 0:
                subprocess.run(["systemctl", "restart", service_name], check=True)
                display_checkmark(
                    f"\033[92mService {service_name} restarted successfully!\033[0m"
                )
            else:
                print(
                    f"\033[93mService {service_name} doesn't exist or is inactive.\033[0m"
                )

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in managing services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving the config: {e}\033[0m")


def save_wireguardconfig_sitwire5sec(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+):\d+"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )
        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )
        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )

        def replace_endpoint(match):
            endpoint_ip = new_config["EndpointIP"]
            return f'Endpoint = {endpoint_ip}:{new_config["ListenPort"]}'

        new_config_content = re.sub(
            endpoint_pattern, replace_endpoint, new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)

        services_to_restart = [
            "strong-azumi1",
            "wireguardping_5.service",
        ]

        wg_quick_interface = "/etc/wireguard/wireserver5.conf"
        wg_quick_down = subprocess.run(
            ["wg-quick", "down", wg_quick_interface],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if wg_quick_down.returncode == 0:
            subprocess.run(["wg-quick", "up", wg_quick_interface], check=True)
            display_checkmark(
                f"\033[92mInterface {wg_quick_interface} brought down and up successfully!\033[0m"
            )
        else:
            print(
                f"\033[93mFailed to bring down interface {wg_quick_interface}.\033[0m"
            )

        for service_name in services_to_restart:
            service_status = subprocess.run(
                ["systemctl", "is-active", service_name],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
            )

            if service_status.returncode == 0:
                subprocess.run(["systemctl", "restart", service_name], check=True)
                display_checkmark(
                    f"\033[92mService {service_name} restarted successfully!\033[0m"
                )
            else:
                print(
                    f"\033[93mService {service_name} doesn't exist or is inactive.\033[0m"
                )

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in managing services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving the config: {e}\033[0m")


def save_wireguardconfig_sitwiresec_client(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+):\d+"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )
        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )
        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )

        def replace_endpoint(match):
            endpoint_ip = new_config["EndpointIP"]
            return f'Endpoint = {endpoint_ip}:{new_config["ListenPort"]}'

        new_config_content = re.sub(
            endpoint_pattern, replace_endpoint, new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)

        services_to_restart = [
            "strong-azumi1",
            "wireguardping.service",
        ]

        wg_quick_interface = "/etc/wireguard/wireclient.conf"
        wg_quick_down = subprocess.run(
            ["wg-quick", "down", wg_quick_interface],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if wg_quick_down.returncode == 0:
            subprocess.run(["wg-quick", "up", wg_quick_interface], check=True)
            display_checkmark(
                f"\033[92mInterface {wg_quick_interface} brought down and up successfully!\033[0m"
            )
        else:
            print(
                f"\033[93mFailed to bring down interface {wg_quick_interface}.\033[0m"
            )

        for service_name in services_to_restart:
            service_status = subprocess.run(
                ["systemctl", "is-active", service_name],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
            )

            if service_status.returncode == 0:
                subprocess.run(["systemctl", "restart", service_name], check=True)
                display_checkmark(
                    f"\033[92mService {service_name} restarted successfully!\033[0m"
                )
            else:
                print(
                    f"\033[93mService {service_name} doesn't exist or is inactive.\033[0m"
                )

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in managing services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving the config: {e}\033[0m")


def update_ipsec_conf_wireguard_46sec(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.read()

        ip_obj = ipaddress.ip_address(new_private_ip)
        if isinstance(ip_obj, ipaddress.IPv6Address):
            ip_parts = new_private_ip.split(":")
            subnet_suffix = "/64"
        else:
            ip_parts = new_private_ip.split(".")
            subnet_suffix = "/32"

        ip_parts[-1] = "1" if ip_parts[-1].endswith("2") else "2"
        counterpart_ip = (
            ":".join(ip_parts)
            if isinstance(ip_obj, ipaddress.IPv6Address)
            else ".".join(ip_parts)
        )

        new_content = re.sub(
            r"leftsubnet=\S+", f"leftsubnet={new_private_ip}{subnet_suffix}", content
        )
        new_content = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", new_content)
        new_content = re.sub(r"right=\S+", f"right={counterpart_ip}", new_content)
        new_content = re.sub(
            r"rightsubnet=\S+",
            f"rightsubnet={counterpart_ip}{subnet_suffix}",
            new_content,
        )

        with open(name, "w") as f:
            f.write(new_content)

        print("\033[92mIPsec configuration updated successfully!\033[0m")

    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mOut of ordinary error: {e}\033[0m")


def wireguardedit_sitsec_iranconfig_1():
    local_ip_private = local_ip("/etc/private1.sh")
    remote_ip_private = remote_ip("/etc/private1.sh")
    private_ip_private = private_ip1("/etc/private1.sh")
    config_path = "/etc/wireguard/wireserver1.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privateiran1(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m IRAN Server \033[96mConfig [1]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Client [1] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7.\033[94m Change IPsec Secret Key\033[0m")
        print("8. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [1]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec1(opposite_ip)
                update_ipsec_conf_wireguard_server1("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "7":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "8":
            save_stuff_sit1(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire1sec(config_path, new_config)
            update_ipsec_ip_multi(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sitsec_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguardedit_sitsec_iranconfig_2():
    local_ip_private = local_ip("/etc/private2.sh")
    remote_ip_private = remote_ip("/etc/private2.sh")
    private_ip_private = private_ip1("/etc/private2.sh")
    config_path = "/etc/wireguard/wireserver2.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privateiran2(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m IRAN Server \033[96mConfig [2]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Client [2] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7.\033[94m Change IPsec Secret Key\033[0m")
        print("8. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [2]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec2(opposite_ip)
                update_ipsec_conf_wireguard_server2("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "7":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "8":
            save_stuff_sit2(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire2sec(config_path, new_config)
            update_ipsec_ip_multi2(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sitsec_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguardedit_sitsec_iranconfig_3():
    local_ip_private = local_ip("/etc/private3.sh")
    remote_ip_private = remote_ip("/etc/private3.sh")
    private_ip_private = private_ip1("/etc/private3.sh")
    config_path = "/etc/wireguard/wireserver3.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privateiran3(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m IRAN Server \033[96mConfig [3]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Client [3] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7.\033[94m Change IPsec Secret Key\033[0m")
        print("8. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [3]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec3(opposite_ip)
                update_ipsec_conf_wireguard_server3("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "7":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "8":
            save_stuff_sit3(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire3sec(config_path, new_config)
            update_ipsec_ip_multi3(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sitsec_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguardedit_sitsec_iranconfig_4():
    local_ip_private = local_ip("/etc/private4.sh")
    remote_ip_private = remote_ip("/etc/private4.sh")
    private_ip_private = private_ip1("/etc/private4.sh")
    config_path = "/etc/wireguard/wireserver4.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privateiran4(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m IRAN Server \033[96mConfig [4]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Client [4] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7.\033[94m Change IPsec Secret Key\033[0m")
        print("8. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [4]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec4(opposite_ip)
                update_ipsec_conf_wireguard_server4("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "7":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "8":
            save_stuff_sit4(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire4sec(config_path, new_config)
            update_ipsec_ip_multi4(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sitsec_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguardedit_sitsec_iranconfig_5():
    local_ip_private = local_ip("/etc/private5.sh")
    remote_ip_private = remote_ip("/etc/private5.sh")
    private_ip_private = private_ip1("/etc/private5.sh")
    config_path = "/etc/wireguard/wireserver5.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privateiran5(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m IRAN Server \033[96mConfig [5]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Client [5] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7.\033[94m Change IPsec Secret Key\033[0m")
        print("8. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [5]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec5(opposite_ip)
                update_ipsec_conf_wireguard_server5("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "7":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "8":
            save_stuff_sit5(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire5sec(config_path, new_config)
            update_ipsec_ip_multi5(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sitsec_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguardudp_sitsec_kharej_client1():
    local_ip_private = local_ip("/etc/private1.sh")
    remote_ip_private = remote_ip("/etc/private1.sh")
    private_ip_private = private_ip1("/etc/private1.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privatekharej1(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m Kharej Client \033[96m[1]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Client [1]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7.\033[94m Change IPsec Secret Key\033[0m")
        print("8. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [1]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
                update_ipsec_conf_wireguard_46sec("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "7":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "8":
            save_stuff_sit1(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            update_ipsec_ip(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sitsec_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguardudp_sitsec_kharej_client2():
    local_ip_private = local_ip("/etc/private2.sh")
    remote_ip_private = remote_ip("/etc/private2.sh")
    private_ip_private = private_ip1("/etc/private2.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privatekharej2(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m Kharej Client \033[96m[2]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Client [2]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7.\033[94m Change IPsec Secret Key\033[0m")
        print("8. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [2]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
                update_ipsec_conf_wireguard_46sec("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "7":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "8":
            save_stuff_sit2(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            update_ipsec_ip(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sitsec_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguardudp_sitsec_kharej_client3():
    local_ip_private = local_ip("/etc/private3.sh")
    remote_ip_private = remote_ip("/etc/private3.sh")
    private_ip_private = private_ip1("/etc/private3.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privatekharej3(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m Kharej Client \033[96m[3]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Client [3]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7.\033[94m Change IPsec Secret Key\033[0m")
        print("8. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [3]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
                update_ipsec_conf_wireguard_46sec("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "7":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "8":
            save_stuff_sit3(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            update_ipsec_ip(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sitsec_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguardudp_sitsec_kharej_client4():
    local_ip_private = local_ip("/etc/private4.sh")
    remote_ip_private = remote_ip("/etc/private4.sh")
    private_ip_private = private_ip1("/etc/private4.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privatekharej4(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m Kharej Client \033[96m[4]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Client [4]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7.\033[94m Change IPsec Secret Key\033[0m")
        print("8. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [4]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
                update_ipsec_conf_wireguard_46sec("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "7":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "8":
            save_stuff_sit4(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            update_ipsec_ip(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sitsec_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguardudp_sitsec_kharej_client5():
    local_ip_private = local_ip("/etc/private5.sh")
    remote_ip_private = remote_ip("/etc/private5.sh")
    private_ip_private = private_ip1("/etc/private5.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privatekharej5(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m Kharej Client \033[96m[2]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Client [5]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7.\033[94m Change IPsec Secret Key\033[0m")
        print("8. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [5]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
                update_ipsec_conf_wireguard_46sec("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "7":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "8":
            save_stuff_sit5(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            update_ipsec_ip(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sitsec_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


# 1 kharej server 5 iran client


def wireguardedit_sitsec_kharejconfig_1():
    local_ip_private = local_ip("/etc/private1.sh")
    remote_ip_private = remote_ip("/etc/private1.sh")
    private_ip_private = private_ip1("/etc/private1.sh")
    config_path = "/etc/wireguard/wireserver1.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privatekharej_server1(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m Kharej Server \033[96mConfig [1]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Client [1] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7.\033[94m Change IPsec Secret Key\033[0m")
        print("8. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [1]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec1(opposite_ip)
                update_ipsec_conf_wireguard_server1("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "7":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "8":
            save_stuff_sit1(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire1sec(config_path, new_config)
            update_ipsec_ip_multi(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sitsec_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguardedit_sitsec_kharejconfig_2():
    local_ip_private = local_ip("/etc/private2.sh")
    remote_ip_private = remote_ip("/etc/private2.sh")
    private_ip_private = private_ip1("/etc/private2.sh")
    config_path = "/etc/wireguard/wireserver2.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privatekharej_server2(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m Kharej Server \033[96mConfig [2]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Client [2] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7.\033[94m Change IPsec Secret Key\033[0m")
        print("8. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [2]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec2(opposite_ip)
                update_ipsec_conf_wireguard_server2("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "7":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "8":
            save_stuff_sit2(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire2sec(config_path, new_config)
            update_ipsec_ip_multi2(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sitsec_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguardedit_sitsec_kharejconfig_3():
    local_ip_private = local_ip("/etc/private3.sh")
    remote_ip_private = remote_ip("/etc/private3.sh")
    private_ip_private = private_ip1("/etc/private3.sh")
    config_path = "/etc/wireguard/wireserver3.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privatekharej_server3(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m Kharej Server \033[96mConfig [3]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Client [3] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7.\033[94m Change IPsec Secret Key\033[0m")
        print("8. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [3]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec3(opposite_ip)
                update_ipsec_conf_wireguard_server3("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "7":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "8":
            save_stuff_sit3(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire3sec(config_path, new_config)
            update_ipsec_ip_multi3(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sitsec_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguardedit_sitsec_kharejconfig_4():
    local_ip_private = local_ip("/etc/private4.sh")
    remote_ip_private = remote_ip("/etc/private4.sh")
    private_ip_private = private_ip1("/etc/private4.sh")
    config_path = "/etc/wireguard/wireserver4.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privatekharej_server4(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m Kharej Server \033[96mConfig [4]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Client [4] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7.\033[94m Change IPsec Secret Key\033[0m")
        print("8. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [4]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec4(opposite_ip)
                update_ipsec_conf_wireguard_server4("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "7":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "8":
            save_stuff_sit4(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire4sec(config_path, new_config)
            update_ipsec_ip_multi4(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sitsec_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguardedit_sitsec_kharejconfig_5():
    local_ip_private = local_ip("/etc/private5.sh")
    remote_ip_private = remote_ip("/etc/private5.sh")
    private_ip_private = private_ip1("/etc/private5.sh")
    config_path = "/etc/wireguard/wireserver5.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privatekharej_server5(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m Kharej Server \033[96mConfig [5]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Client [5] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7.\033[94m Change IPsec Secret Key\033[0m")
        print("8. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [5]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec5(opposite_ip)
                update_ipsec_conf_wireguard_server5("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "7":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "8":
            save_stuff_sit5(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire5sec(config_path, new_config)
            update_ipsec_ip_multi5(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sitsec_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguardudp_sitsec_iran_client1():
    local_ip_private = local_ip("/etc/private1.sh")
    remote_ip_private = remote_ip("/etc/private1.sh")
    private_ip_private = private_ip1("/etc/private1.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privateiran_client1(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m IRAN Client \033[96m[1]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Client [1]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7.\033[94m Change IPsec Secret Key\033[0m")
        print("8. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [1]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
                update_ipsec_conf_wireguard_46sec("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "7":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "8":
            save_stuff_sit1(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            update_ipsec_ip(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sitsec_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguardudp_sitsec_iran_client2():
    local_ip_private = local_ip("/etc/private2.sh")
    remote_ip_private = remote_ip("/etc/private2.sh")
    private_ip_private = private_ip1("/etc/private2.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privateiran_client2(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m IRAN Client \033[96m[2]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Client [2]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7.\033[94m Change IPsec Secret Key\033[0m")
        print("8. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [2]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
                update_ipsec_conf_wireguard_46sec("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "7":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "8":
            save_stuff_sit2(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            update_ipsec_ip(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sitsec_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguardudp_sitsec_iran_client3():
    local_ip_private = local_ip("/etc/private3.sh")
    remote_ip_private = remote_ip("/etc/private3.sh")
    private_ip_private = private_ip1("/etc/private3.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privateiran_client3(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m IRAN Client \033[96m[3]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Client [3]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7.\033[94m Change IPsec Secret Key\033[0m")
        print("8. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [3]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
                update_ipsec_conf_wireguard_46sec("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "7":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "8":
            save_stuff_sit3(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            update_ipsec_ip(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sitsec_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguardudp_sitsec_iran_client4():
    local_ip_private = local_ip("/etc/private4.sh")
    remote_ip_private = remote_ip("/etc/private4.sh")
    private_ip_private = private_ip1("/etc/private4.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privateiran_client4(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m IRAN Client \033[96m[4]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Client [4]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7.\033[94m Change IPsec Secret Key\033[0m")
        print("8. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [4]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
                update_ipsec_conf_wireguard_46sec("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "7":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "8":
            save_stuff_sit4(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            update_ipsec_ip(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sitsec_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguardudp_sitsec_iran_client5():
    local_ip_private = local_ip("/etc/private5.sh")
    remote_ip_private = remote_ip("/etc/private5.sh")
    private_ip_private = private_ip1("/etc/private5.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privateiran_client5(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m IRAN Client \033[96m[2]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Client [5]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7.\033[94m Change IPsec Secret Key\033[0m")
        print("8. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [5]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
                update_ipsec_conf_wireguard_46sec("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "7":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "8":
            save_stuff_sit5(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            update_ipsec_ip(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sitsec_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def update_ipsec_ip(new_vxlan_ip):
    def opposite_ip(ip):
        if ":" in ip:
            parts = ip.split(":")
            if parts[-1].endswith("1"):
                parts[-1] = parts[-1][:-1] + "2"
            else:
                parts[-1] = parts[-1][:-1] + "1"
            return ":".join(parts)
        else:
            octets = ip.split(".")
            if octets[-1] == "1":
                octets[-1] = "2"
            else:
                octets[-1] = "1"
            return ".".join(octets)

    secrets_file = "/etc/ipsec.secrets"
    opposite_ip_addr = opposite_ip(new_vxlan_ip)

    with open(secrets_file, "r") as file:
        lines = file.readlines()

    new_lines = []
    for line in lines:
        if ": PSK" in line:
            parts = line.split()
            if len(parts) > 2:
                new_line = (
                    f'{opposite_ip_addr} {new_vxlan_ip} : PSK "{parts[-1][1:-1]}"'
                )
                new_lines.append(new_line + "\n")
            else:
                new_lines.append(line)
        else:
            new_lines.append(line)

    with open(secrets_file, "w") as file:
        file.writelines(new_lines)


def update_ipsec_ip_multi(new_vxlan_ip):
    def opposite_ip(ip):
        if ":" in ip:
            parts = ip.split(":")
            if parts[-1].endswith("1"):
                parts[-1] = parts[-1][:-1] + "2"
            else:
                parts[-1] = parts[-1][:-1] + "1"
            return ":".join(parts)
        else:
            octets = ip.split(".")
            if octets[-1] == "1":
                octets[-1] = "2"
            else:
                octets[-1] = "1"
            return ".".join(octets)

    secrets_file = "/etc/ipsec.secrets"
    opposite_ip_addr = opposite_ip(new_vxlan_ip)

    with open(secrets_file, "r") as file:
        lines = file.readlines()

    new_lines = []
    modified = False
    for line in lines:
        if not modified and ": PSK" in line:
            parts = line.split()
            if len(parts) > 2:
                new_line = (
                    f'{opposite_ip_addr} {new_vxlan_ip} : PSK "{parts[-1][1:-1]}"'
                )
                new_lines.append(new_line + "\n")
                modified = True
            else:
                new_lines.append(line)
        else:
            new_lines.append(line)

    with open(secrets_file, "w") as file:
        file.writelines(new_lines)


def update_ipsec_ip_multi2(new_vxlan_ip):
    def opposite_ip(ip):
        if ":" in ip:
            parts = ip.split(":")
            if parts[-1].endswith("1"):
                parts[-1] = parts[-1][:-1] + "2"
            else:
                parts[-1] = parts[-1][:-1] + "1"
            return ":".join(parts)
        else:
            octets = ip.split(".")
            if octets[-1] == "1":
                octets[-1] = "2"
            else:
                octets[-1] = "1"
            return ".".join(octets)

    secrets_file = "/etc/ipsec.secrets"
    opposite_ip_addr = opposite_ip(new_vxlan_ip)

    with open(secrets_file, "r") as file:
        lines = file.readlines()

    if len(lines) < 2:
        raise ValueError("The secrets file doesn't have at least 2 lines")

    new_lines = []
    for index, line in enumerate(lines):
        if index == 1 and ": PSK" in line:
            parts = line.split()
            if len(parts) > 2:
                new_line = (
                    f'{opposite_ip_addr} {new_vxlan_ip} : PSK "{parts[-1][1:-1]}"'
                )
                new_lines.append(new_line + "\n")
            else:
                new_lines.append(line)
        else:
            new_lines.append(line)

    with open(secrets_file, "w") as file:
        file.writelines(new_lines)


def update_ipsec_ip_multi3(new_vxlan_ip):
    def opposite_ip(ip):
        if ":" in ip:
            parts = ip.split(":")
            if parts[-1].endswith("1"):
                parts[-1] = parts[-1][:-1] + "2"
            else:
                parts[-1] = parts[-1][:-1] + "1"
            return ":".join(parts)
        else:
            octets = ip.split(".")
            if octets[-1] == "1":
                octets[-1] = "2"
            else:
                octets[-1] = "1"
            return ".".join(octets)

    secrets_file = "/etc/ipsec.secrets"
    opposite_ip_addr = opposite_ip(new_vxlan_ip)

    with open(secrets_file, "r") as file:
        lines = file.readlines()

    if len(lines) < 3:
        raise ValueError("The secrets file doesn't have at least 3 lines")

    new_lines = []
    for index, line in enumerate(lines):
        if index == 2:
            parts = line.split()
            if len(parts) >= 3 and parts[2] == ":":
                new_line = (
                    f'{opposite_ip_addr} {new_vxlan_ip} : PSK "{parts[-1][1:-1]}"'
                )
                new_lines.append(new_line + "\n")
            else:
                new_lines.append(line)
        else:
            new_lines.append(line)

    with open(secrets_file, "w") as file:
        file.writelines(new_lines)


def update_ipsec_ip_multi4(new_vxlan_ip):
    def opposite_ip(ip):
        if ":" in ip:
            parts = ip.split(":")
            if parts[-1].endswith("1"):
                parts[-1] = parts[-1][:-1] + "2"
            else:
                parts[-1] = parts[-1][:-1] + "1"
            return ":".join(parts)
        else:
            octets = ip.split(".")
            if octets[-1] == "1":
                octets[-1] = "2"
            else:
                octets[-1] = "1"
            return ".".join(octets)

    secrets_file = "/etc/ipsec.secrets"
    opposite_ip_addr = opposite_ip(new_vxlan_ip)

    with open(secrets_file, "r") as file:
        lines = file.readlines()

    if len(lines) < 4:
        raise ValueError("The secrets file doesn't have at least 4 lines")

    new_lines = []
    for index, line in enumerate(lines):
        if index == 3:
            parts = line.split()
            if len(parts) >= 3 and parts[2] == ":":
                new_line = (
                    f'{opposite_ip_addr} {new_vxlan_ip} : PSK "{parts[-1][1:-1]}"'
                )
                new_lines.append(new_line + "\n")
            else:
                new_lines.append(line)
        else:
            new_lines.append(line)

    with open(secrets_file, "w") as file:
        file.writelines(new_lines)


def update_ipsec_ip_multi5(new_vxlan_ip):
    def opposite_ip(ip):
        if ":" in ip:
            parts = ip.split(":")
            if parts[-1].endswith("1"):
                parts[-1] = parts[-1][:-1] + "2"
            else:
                parts[-1] = parts[-1][:-1] + "1"
            return ":".join(parts)
        else:
            octets = ip.split(".")
            if octets[-1] == "1":
                octets[-1] = "2"
            else:
                octets[-1] = "1"
            return ".".join(octets)

    secrets_file = "/etc/ipsec.secrets"
    opposite_ip_addr = opposite_ip(new_vxlan_ip)

    with open(secrets_file, "r") as file:
        lines = file.readlines()

    if len(lines) < 5:
        raise ValueError("The secrets file doesn't have at least 5 lines")

    new_lines = []
    for index, line in enumerate(lines):
        if index == 4:
            parts = line.split()
            if len(parts) >= 3 and parts[2] == ":":
                new_line = (
                    f'{opposite_ip_addr} {new_vxlan_ip} : PSK "{parts[-1][1:-1]}"'
                )
                new_lines.append(new_line + "\n")
            else:
                new_lines.append(line)
        else:
            new_lines.append(line)

    with open(secrets_file, "w") as file:
        file.writelines(new_lines)


def clear():
    subprocess.run(["clear"])


## edit menu close##


def remote_extraction(file_path):
    with open(file_path, "r") as file:
        content = file.read()
        match_ipv4 = re.search(
            r"remote\s+(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})", content
        )
        match_ipv6 = re.search(r"remote\s+([0-9a-fA-F:]+)", content)
        if match_ipv4:
            return match_ipv4.group(1)
        elif match_ipv6:
            return match_ipv6.group(1)
    return None


def remote_extraction_sit(file_path):
    with open(file_path, "r") as file:
        content = file.read()
        match = re.search(r"remote\s+(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})", content)
        if match:
            return match.group(1)
    return None


def remote_endpoint(file_path):
    with open(file_path, "r") as file:
        content = file.read()
        match = re.search(r"\[Peer\][\s\S]*?Endpoint\s*=\s*([\d\.]+)", content)
        if match:
            return match.group(1)
    return None


def parse_wireguard_config(file_path):
    with open(file_path, "r") as file:
        content = file.read()
    endpoint = re.search(r"Endpoint\s*=\s*(\S+)", content)
    mtu = re.search(r"MTU\s*=\s*(\d+)", content)
    port = re.search(r"ListenPort\s*=\s*(\d+)", content)
    return {
        "endpoint": endpoint.group(1) if endpoint else None,
        "mtu": mtu.group(1) if mtu else None,
        "port": port.group(1) if port else None,
    }

wireguard_edit_server()
